### YamlMime:Tutorial
title: Send Proactive Messages
metadata:
  title: Send Proactive Messages
  description: In this module, learn how to send proactive messages, such as welcome messages, scheduled messages, and notifications from a bot.
  audience: Developer
  level: Beginner
  ms.date: 06/23/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ./bots/how-to/conversations/send-proactive-messages.md
  nextTutorialTitle: Read more on proactive messages
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    A proactive message is any message sent by a bot that isn't in response to a request from a user that includes messages, such as:
     - Welcome messages
     - Notifications
     - Scheduled messages
     
    This step-by-step guide helps you to send a proactive message from a bot. You'll see the following outputs:

    * Proactive hello message in chat.  

      :::image type="content" source="~/assets/images/proactive-scenario/proactive-helo1.png" alt-text="Screenshot shows the Proactive Hello message in Teams chat.":::

- title: Prerequisites 
  durationInMinutes: 2
  content: |
    Here's a list of tools you need for building and deploying your apps.

    | &nbsp; | Install | For using |
    | --- | --- | --- |
    | &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript, or TypeScript, build environments. Use the latest version. |
    | &nbsp; | [Teams Toolkit](#install-the-teams-toolkit) | Microsoft Visual Studio Code extension that creates a project scaffolding for your app. Use the latest version. |
    | &nbsp; | [Node.js](https://nodejs.org/en/download/) | Back-end JavaScript runtime environment. For more information, see [Node.js version compatibility table for project type](~/toolkit/build-environments.md#nodejs-version-compatibility-table-for-project-type).|
    | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, and call-all in one place.|
    | &nbsp; | [Microsoft&nbsp;Edge](https://www.microsoft.com/edge) (recommended) or [Google Chrome](https://www.google.com/chrome/) | A browser with developer tools. |
    | &nbsp; | [Microsoft 365](https://developer.microsoft.com/en-us/microsoft-365/dev-program) | Access to Teams account with the appropriate permissions to install an app. |
    
    > [!NOTE]
    > The guide is tested on Teams Toolkit latest version and Nodejs version 14 and 16. The steps in this guide may work with other versions, but that hasn't been tested.
    
    ## Prepare development environment

    After you've installed the required tools, set up the development environment.

    ### Install the Teams Toolkit

    The Teams Toolkit helps simplify the development process with tools to provision and deploy cloud resources for your app, publish to the Microsoft Teams Store, and more. 
        
    You can use the toolkit with Visual Studio Code, or CLI (command-line interface), called `TeamsFx`.

    # [Visual Studio Code](#tab/vscode)

    1. Open Visual Studio Code and select **Extensions** (**Ctrl+Shift+X** / **⌘⇧-X** or **View > Extensions**).
    1. In the search box, enter **Teams Toolkit**.
    1. Select **Install** next to the Teams Toolkit.

        :::image type="content" source="~/assets/images/sbs-notification-bot/teams-toolkit.png" alt-text="Illustration shows the Teams Toolkit extension installation." lightbox="~/assets/images/sbs-notification-bot/teams-toolkit-2.png":::

        The Teams Toolkit :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon appears in the Visual Studio Code **Activity Bar** after it's installed.

    You can also find the Teams Toolkit on the [Visual Studio Code Marketplace](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension).

    # [Command line](#tab/cli)

    To install the TeamsFx CLI, use the `npm` package manager:

    ``` bash
    npm install -g @microsoft/teamsfx-cli
    ```

    Depending on your configuration, you may need to use `sudo` to install the CLI:

    ``` bash
    sudo npm install -g --unsafe-perm @microsoft/teamsfx-cli
    ```

    It's more common on Linux and macOS systems.

    Ensure you add the npm global cache to your PATH. This step is normally done as part of the Node.js installer.  

    You can use the CLI with the `teamsfx` command. Test the command is working by running `teamsfx -h`.

    > [!NOTE]
    > Before you run TeamsFx in PowerShell terminals, ensure you enable the **remote signed** execution policy for PowerShell.

    ---

    ## Set up your Teams development tenant

    A **tenant** is like a space or a container where you chat, share files, and run meetings for your organization in Teams. You can also sideload and test the app.

    ### Check for sideloading option

    After creating the app, you must load your app in Teams without distributing it. Sign in to your Microsoft 365 account to view this option.

        > [!NOTE]
        > Uploading your app is necessary for previewing and testing apps in Teams local environment. Enable Sideloading to preview and test your app in Teams locally.

    Do you already have a tenant, and do you have the admin access? Let's check if you really do!

    To verify uploading apps in Teams:

        1. Go to **Microsoft Teams**.
        1. Select **Apps** > **Manage your apps**.
        1. Select **Upload an app**.
        1. Look for the option to **Upload a custom app**. If you see the option, sideloading apps is enabled.

            :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png" alt-text="Illustration shows the option to upload a custom app in Teams.":::

            > [!NOTE]
            > Contact Teams administrator, if you don't see the option to upload a custom app.

    ### Create a free Teams developer tenant (optional)

    If you don't have a Teams developer account, you can get it free. Join the Microsoft 365 developer program!

    1. Go to the [Microsoft 365 developer program](https://developer.microsoft.com/microsoft-365/dev-program).
    1. Select **Join Now** and follow the onscreen instructions.
    1. Select **Set up E5 subscription** from the welcome screen.
    1. Set up administrator account. After you finish, the following screen displays.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png" alt-text="Microsoft":::

    1. Sign in to Teams using the new administrator account. Now you should have the **Upload a custom app** option.     

- title: Build Proactive Message bot
  durationInMinutes: 3
  content: |

    **To build notification bot using Visual Studio Code**

    1. Open Visual Studio Code.
    
    1. Select the Teams Toolkit :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon in the Visual Studio Code **Activity Bar**.

    1. In the left pane, select **View Samples**.

    1. From the list of samples, select **Proactive Messaging**. A prebuilt sample that's ready for debugging opens.

    1. Select **Create**.

    1. Select **Default folder** to store your project root folder in default location.

         :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/select-default-location.png" alt-text="Select default location":::
    
       You can also change the default location by the following steps:

        1. Select **Browse**.

            :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/select-browse.png" alt-text="Select browse location":::
            
        1. Select the location for project workspace.

        1. Select the **Select Folder**.

           :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/select-folder.png" alt-text="Select Folder":::
    
    1. After your app is created, the Teams Toolkit displays the following message:

    1. Select **Select and Start Debugging Teams App** icon.

    1. Select **Debug(Edge)** or **Debug(Chrome)** from the dropdown list. After debugging is successful, you'll be prompted to upload the bot app to Teams on your local machine. 

    1. Select **Add** or use the dropdown menu to add your proactive bot app to a team, chat, or meeting.

    1.	Download the [sample code](https://github.com/MicrosoftDocs/msteams-docs/tree/master/msteams-platform/assets/downloads/SendProactiveMessages.zip) (.zip file) and extract the files.
    1.	Go to the extracted files and double-click **ProactiveBot.csproj**. The solution opens in Visual Studio.
    1.	In Visual Studio, right-click the project (**ProactiveBot**) and select **Build** to build the solution.

        :::image type="content" source="~/assets/images/proactive-scenario/proactive-bot-project.png" alt-text="Screenshot shows the Proactive Bot Project in Visual Studio and with the Build highlighted in red.":::

        <br>

        <details>

        <summary><b>Troubleshooting</b></summary>

        If you get the **Unable to find package** error, follow these steps:

        1.  Go to **Tools** > **NuGet Package Manager** > **Package Manager Settings**.
        1.	In the **Options** window that appears, select **NuGet Package Manager** > **Package Sources**.
        1.	Select **Add**.
        1.	Enter nuget.org in the **Name** and https://api.nuget.org/v3/index.json in the **Source** fields.
        1.	Select **Update** and **OK**.
        1.	Rebuild your project.
        <br>

        </details>

    1. Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

        ```bash
        ngrok http --host-header=localhost 3978
        ```
        
    1. From ngrok, copy the HTTPS URL. 

        :::image type="content" source="~/assets/images/proactive-scenario/ngrok-base-url1.png" alt-text="Screenshot shows the ngrok base URL highlighted in red."lightbox="~/assets/images/proactive-scenario/ngrok-base-url1.png":::   

    ## Take tour of source code

        Teams Toolkit provides components for building an app. After creating the project, you can view the project folders and files in the **Explorer** area of Visual Studio Code.

        :::image type="content" source="~/assets/images/sbs-command-bot/folder-structure-command-bot.png" alt-text="Screenshot shows the structure tab":::

        If you choose to use UI framework, following sample template code provides a scaffolding with React components. It contains following content:

        | Folder / File | Contents |
        | - | - |
        | `teamsapp.yml` | Main project file describes your application configuration and defines the set of actions to run in each lifecycle stages. |
        | `teamsapp.local.yml`| This overrides `teamsapp.yml` with actions that enable local execution and debugging. |
        | `env/`| Name / value pairs are stored in environment files and used by `teamsapp.yml` to customize the provisioning and deployment rules. |
        | `.vscode/` | VSCode files for debugging. |
        | `appPackage/` | Templates for the Teams application manifest. |
        | `infra/` | Templates for provisioning Azure resources. |
        | `src/` | The source code for the application. |
        | `src/index.js` | Application entry point and `restify` handlers for command and response. |
        | `src/teamsBot.js` | An empty teams activity handler for bot customization. |
        | `src/adaptiveCards/helloworldCommand.json` | A generated Adaptive Card that is sent to Teams. |
        | `src/helloworldCommandHandler.js` | The business logic to handle a command. |

- title: Deploy your first Teams app
  durationInMinutes: 1
  content: |

    You've learnt to build, and run Teams app with proactive message bot capability. The final step is to deploy your app on Azure.

    Let's deploy the first app with proactive message bot capability on Azure using Teams Toolkit.

    ## Sign in to your Azure account

    Use your account to access the Microsoft Azure portal and to provide provision new cloud resources to support your app.

    1. Open Visual Studio Code.
    1. Open the project folder that you created the proactive message bot app.
    1. Select the Teams Toolkit  :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon in the sidebar.
    1. Select **Sign-in to Azure** using your credentials.

        > [!TIP]
        > If you have the AZURE ACCOUNT extension installed and are using the same account, you can skip this step.

        Your default web browser opens to let you sign-in to the account.
        1. Close the browser when prompted and return to Visual Studio Code.

        The **ACCOUNTS** section of the sidebar shows the two accounts separately. It also lists the number of usable Azure subscriptions available to you. Ensure you have at least one usable Azure subscription available. If not, sign out and use a different account.

        Congratulations, you have created a Teams app! Now let's go ahead and learn how to deploy one of the apps to Azure using the Teams Toolkit.

    ## Deploy your app to Azure

     Under **DEPLOYMENT** you can provision for necessary cloud resources and your app's code is copied into the created cloud resources.

    # [Visual Studio Code](#tab/vscode)

    1. Select the Teams Toolkit :::image type="icon" source="~/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon in the Visual Studio Code sidebar.

    1. Select **Provision** under **LIFECYCLE**.

        :::image type="content" source="~/assets/images/sbs-command-bot/provision-cloud.png" alt-text="Screenshot shows the provisioning commands.":::

    1. Select an existing resource group or create new resource group. For more information, see [Create resource group](/azure/azure-resource-manager/management/manage-resource-groups-portal#create-resource-groups).
    
        :::image type="content" source="~/assets/images/sbs-command-bot/subscription-cloud.png" alt-text="Screenshot show resources for provisioning.":::

        > [!NOTE]
        > A dialog appears mentioning that costs may be incurred when running resources in Azure.

    1. Select **Provision**.

        :::image type="content" source="~/assets/images/sbs-command-bot/provision-confirm1.png" alt-text="Screenshot of the provisioning dialog.":::

       The provisioning process creates resources in the Azure cloud. You can monitor the progress by observing the dialogs in the lower-right corner. After few minutes, you see the following notice:

        :::image type="content" source="~/assets/images/sbs-command-bot/deploy-provision-success1.png" alt-text="Screenshot shows the provisioning complete dialog.":::

         You have the option to view the provisioned resources. For this tutorial, you don't need to view resources.

    1. Select **Deploy** under **LIFECYCLE** after provisioning is complete.

        :::image type="content" source="~/assets/images/sbs-command-bot/deploy-cloud.png" alt-text="Screenshot showing the where to click to deploy to cloud.":::

    1. Select **Deploy**.

        :::image type="content" source="~/assets/images/sbs-command-bot/Deploy-confirm.png" alt-text="Screenshot shows the confirmation to deploy.":::

       Deployment takes some time. You can monitor the progress in the dialog in lower-right corner. After a few minutes, you see the following notice.

        :::image type="content" source="~/assets/images/sbs-command-bot/command-deploy-confirm.png" alt-text="Screenshots shows the deploy confirm.":::
    
    
    1. Open the debug panel (**Ctrl+Shift+D** / **⌘⇧-D** or **View > Run**) from Visual Studio Code.
    1. Select **Launch Remote (Edge)** from the launch configuration dropdown.
    1. Select **Start Debugging** button. You'll be prompted to sideload the proactive message bot app onto Teams.

         :::image type="content" source="~/assets/images/sbs-command-bot/remote-debug.png" alt-text="Screenshot shows the remote debug.":::

    1. Select **Add** or use the dropdown menu to add your proactive message bot app to a team, chat, or meeting.
    
        :::image type="content" source="~/assets/images/sbs-command-bot/app-cloud-output.png" alt-text="Screenshot shows the app cloud output.":::

    1. Select the bot.
    1. Select **Enter**.  

        :::image type="content" source="~/assets/images/sbs-command-bot/hello-world-cloud.png" alt-text="Screenshot shows the Hello World Command to enter.":::

        You receive the following command response in adaptive card:

         :::image type="content" source="~/assets/images/sbs-command-bot/cloud-final-output.png" alt-text="Screenshot shows the cloud final output.":::

    # [Command Line](#tab/cli)

    In your terminal window:

    1. Run `teamsfx new` to create new project.

       ``` bash
       teamsfx new
       ```

    1. Run `teamsfx provision` to create azure resource.

       ``` bash
       teamsfx provision
       ```

    1. Run `teamsfx deploy` to deploy the app.

       ``` bash
       teamsfx deploy
       ```

    1. Run `teamsfx preview` to run the app.

       ``` bash
       teamsfx preview
       ```

    ---
  
- title: Complete challenge
  durationInMinutes: 3
  content: |
    Did you come up with something like this? This is how the proactive hello message in Adaptive Card appears:
    
    :::image type="content" source="~/assets/images/proactive-scenario/proactive-helo-in-adaptive-card.png" alt-text="Screenshot shows the Proactive Hello message in adaptive card.":::

- content: |
    You've completed the scenario.
    * You can send notifications on daily basis or request for feedback from user on periodic basis.
    * Handle throttling limits to avoid multiple notifications.
    
   
