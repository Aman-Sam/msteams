### YamlMime:Tutorial
title: Send Proactive Messages
metadata:
  title: Send Proactive Messages
  description: In this article, you'll learn how to send proactive messages, such as welcome messages, scheduled messages, and notifications from a bot.
  audience: Developer
  level: Beginner
  ms.date: 06/23/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ./bots/how-to/conversations/send-proactive-messages.md
  nextTutorialTitle: Read more on proactive messages
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    A proactive message is any message sent by a bot that isn't in response to a request from a user that includes messages, such as:
     - Welcome messages
     - Notifications
     - Scheduled messages
     
    This step-by-step guide helps you to send a proactive message from a bot. You'll see the following outputs:

    * Proactive hello message in chat.  

      :::image type="content" source="~/assets/images/proactive-scenario/proactive-helo1.png" alt-text="Proactive Hello message":::

    * Proactive hello message as an Adaptive Card.
    
      :::image type="content" source="~/assets/images/proactive-scenario/proactive-helo-in-adaptive-card.png" alt-text="Proactive Hello message in adaptive card"::: 

- title: Prerequisites 
  durationInMinutes: 2
  content: |
    Ensure that you install the following:    

    | &nbsp; | Install | For using... |
     | --- | --- | --- |
     | **Required** | &nbsp; | &nbsp; |
     | &nbsp; | [Visual Studio 2022 version 17.3](https://visualstudio.microsoft.com)<br> Install one of the following two workloads:<br> • ASP.NET and web development <br> • .NET Core cross-platform development | You can install the enterprise version in Visual Studio 2022, and install the workloads. |
     | &nbsp; | [ngrok](https://ngrok.com/download) | Teams app features (conversational bots, message extensions, and incoming webhooks) require inbound connections. A tunnel connects your development system to Teams. It isn't required for apps that only include tabs. This package is installed within the project directory (using npm `devDependencies`). |
     | &nbsp; | [Microsoft 365 developer account](/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | Access to Teams account with the appropriate permissions to install an app. |
     | &nbsp; | [Developer Portal for Teams](https://dev.teams.microsoft.com/) | Web-based portal to configure, manage, and distribute your Teams app including to your organization or the Teams store. |

- title: Set up local environment
  durationInMinutes: 3
  content: |
    1.	Download the [sample code](https://github.com/MicrosoftDocs/msteams-docs/tree/master/msteams-platform/assets/downloads/SendProactiveMessages.zip) (Zip file) and extract the files.
    1.	Go to the extracted files and double-click **ProactiveBot.csproj**. The solution opens in Visual Studio.
    1.	In Visual Studio, right-click the project (**ProactiveBot**) and select **Build** to build the solution.

        :::image type="content" source="~/assets/images/proactive-scenario/proactivebot-project1.png" alt-text="Proactive Bot Project":::

        <br>

        <details>

        <summary><b>Troubleshooting</b></summary>

        If you get the **Unable to find package** error, follow these steps:

        1.  Go to **Tools** > **NuGet Package Manager** > **Package Manager Settings**.
        1.	In the **Options** window that appears, select **NuGet Package Manager** > **Package Sources**.
        1.	Select **Add**.
        1.	Enter `nuget.org` in the **Name** and `https://api.nuget.org/v3/index.json` in the **Source** fields.
        1.	Select **Update** and **OK**.
        1.	Rebuild your project.
        <br>

        </details>
        
    1. Unzip to install ngrok.
       * Windows: Double-click `ngrok.zip`.
       * Linux or OS X: Unzip ngrok from the terminal and run the `unzip /path/to/ngrok.zip` command.
    1. Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

        ```bash
        ngrok http --host-header=localhost 3978
        ```
        
    1. From ngrok, copy the HTTPS URL. 

        :::image type="content" source="~/assets/images/proactive-scenario/ngrok-base-url1.png" alt-text="ngrok base URL":::   

- title: Enable developer preview
  durationInMinutes: 1
  content: |
    1. Enable uploading of apps in the admin console of your tenant.
        1. Sign in to [Microsoft 365 admin center](https://admin.microsoft.com/Adminportal/Home?source=applauncher#/homepage#/) with your admin credentials.
        1. In the left panel, select **Show All**.
        1. Select **Teams**.
    
           :::image type="content" source="./assets/images/meeting-token-generator/meeting-token-generator-admincenter_1.png" alt-text="Admin center menu" border="true":::

- title: Create and install Teams app
  durationInMinutes: 5
  content: |
    1. Open [Developer Portal for Teams](https://dev.teams.microsoft.com).

       The following page appears:

       :::image type="content" source="~/assets/images/proactive-scenario/developer-portal-intro.png" alt-text="Developer Portal Introduction":::
 
    1. Select **Apps** > **Import app**.

        :::image type="content" source="~/assets/images/proactive-scenario/upload-app-package.png" alt-text="Select-upload package":::  

    1. Select **AppManifest** and select **Open**.

        :::image type="content" source="~/assets/images/proactive-scenario/select-app-package.png" alt-text="Select App package":::

    1. Select **Import**.

         :::image type="content" source="~/assets/images/proactive-scenario/select-import.png" alt-text="Select Import":::

        The following page appears:

         :::image type="content" source="~/assets/images/proactive-scenario/proactive-message.png" alt-text="Proactive Message."lightbox="~/assets/images/proactive-scenario/proactive-message.png"::: 

    1. Select **App Features** > **Bot**.
    
        :::image type="content" source="~/assets/images/proactive-scenario/select-app-features.png" alt-text="Select App Features":::

    1. Select **Create a new bot**.

        :::image type="content" source="~/assets/images/proactive-scenario/select-bot.png" alt-text="Select bot":::     
        
    1. Select **New Bot**. 
    
        :::image type="content" source="~/assets/images/proactive-scenario/create-new-bot.png" alt-text="Create new bot":::

        The **Add bot** window appears.

    1. Enter **Proactive Message bot** and select **Add**.

         :::image type="content" source="~/assets/images/proactive-scenario/enter-proactive-message.png" alt-text="Enter Proactive Message":::

        Now the Bot Proactive Message bot is successfully added to the application. You can see the **Bot Name** and **Bot ID**.

         :::image type="content" source="~/assets/images/proactive-scenario/bot-name.png" alt-text="Bot Name and ID":::

       > [!TIP]
       > Save the **Bot ID** for future reference.

    1. Double-click on the **Proactive Message bot**.

       The **Proactive Message Demo** page appears.

    1. Select **Configure** and set the **Endpoint address** in the form of `https://your ngrok/api/messages`.

        :::image type="content" source="~/assets/images/proactive-scenario/select-configure.png" alt-text="Select Configure":::

    1. Select **Client secrets** > **Add a client secret for your bot**.

        :::image type="content" source="~/assets/images/proactive-scenario/secret.png" alt-text="Select Secret":::

    1. The **New client secret generated** window appears and select **OK**.    

        :::image type="content" source="~/assets/images/proactive-scenario/new-secret.png" alt-text="New Secret":::

        > [!TIP]
        > Save the **New client secret** value for future reference.

    1. Select the Apps :::image type="icon" source="~/assets/images/proactive-scenario/apps-icon.png"::: icon and select **Proactive Message Demo**.

         :::image type="content" source="~/assets/images/proactive-scenario/select-apps.png" alt-text="Select Apps":::

        The following page appears:

         :::image type="content" source="~/assets/images/proactive-scenario/overview-page.png" alt-text="Overview page":::

    1. Select **App Features** under **Configure** and select **Bot**.

         :::image type="content" source="~/assets/images/proactive-scenario/select-app-features1.png" alt-text="Select app features":::

    1. Select **Proactive Message bot** from the **Select an existing bot** dropdown.

         :::image type="content" source="~/assets/images/proactive-scenario/select-send-proactive-message.png" alt-text="Select send proactive messages":::

    1. Select **Personal** > **Save**.

        :::image type="content" source="~/assets/images/proactive-scenario/select-personal.png" alt-text="Select personal":::

    1. Open the **appsettings.json** file in Visual Studio and update the following information:

        * Set **MicrosoftAppID** to your bot ID.
        * Set **MicrosoftAppPassword** to your client secret ID value.

       :::image type="content" source="~/assets/images/proactive-scenario/appsettings.png" alt-text="App Settings file":::

    1. Select **Debug** > **Start Debugging**.

        :::image type="content" source="~/assets/images/proactive-scenario/debug.png" alt-text="Select Debug":::

       The corresponding proactive message sample appears:

        :::image type="content" source="~/assets/images/proactive-scenario/proactive-confirm.png" alt-text="Proactive Confirm":::

    1. Go back to Developer Portal, select **Preview in Teams**.
        
        :::image type="content" source="~/assets/images/proactive-scenario/preview-teams.png" alt-text="Preview Teams":::

    1. Select **Add**.

        :::image type="content" source="~/assets/images/proactive-scenario/select-add.png" alt-text="Select Add":::

       The following page appears.

        :::image type="content" source="~/assets/images/proactive-scenario/teams-open1.png" alt-text="Teams Open":::

       Open the browser.

    1. Copy and paste the `http://localhost:3978/api/notify` URL in browser to get a proactive hello message in the chat.

        :::image type="content" source="~/assets/images/proactive-scenario/url-paste.png" alt-text="URL Paste":::

    1. Go to Teams. You receive a proactive hello message from the bot when installation is successful.

        :::image type="content" source="~/assets/images/proactive-scenario/proactive-reply.png" alt-text="Proactive reply":::
    

- title: Add Adaptive Card to proactive message
  durationInMinutes: 10
  content: |
    1. In Visual Studio, stop the debugging process.

        :::image type="content" source="~/assets/images/proactive-scenario/stop-debugging.png" alt-text="Stop Debugging":::

    1. Right-click **Dependencies**, select **Manage NuGet Packages**.

        :::image type="content" source="~/assets/images/proactive-scenario/dependencies.png" alt-text="Proactive Dependencies":::

    1. In **NuGet ProactiveBot**, select **Browse** and search for **AdaptiveCards**. 
    1. Select **Install**. 

        :::image type="content" source="~/assets/images/proactive-scenario/select-adaptive cards.png" alt-text="select Adaptive Cards":::

    1. In **Preview changes** window, select **OK**.

        :::image type="content" source="~/assets/images/proactive-scenario/select-ok.png" alt-text="select Ok":::

    1. Open the **NotifyController.cs** file under **Controllers**.

        :::image type="content" source="~/assets/images/proactive-scenario/select-notify.png" alt-text="Select Notify":::

    1. Replace the existing `BotCallback` code with the following code to send the Adaptive Card message:     
        
       ```csharp
       private async Task BotCallback(ITurnContext turnContext, CancellationToken cancellationToken)
        {
                    AdaptiveCard card = new AdaptiveCard(new AdaptiveSchemaVersion(1, 0));

                    card.Body.Add(new AdaptiveTextBlock()
                    {
                        Text = "Proactive Hello",
                        Size = AdaptiveTextSize.ExtraLarge
                    });

                    card.Body.Add(new AdaptiveImage()
                    {
                        Url = new Uri("http://adaptivecards.io/content/cats/1.png")
                    });

                    Attachment attachment = new Attachment()
                    {
                        ContentType = AdaptiveCard.ContentType,
                        Content = card
                    };

                    await turnContext.SendActivityAsync(MessageFactory.Attachment(attachment));
        }
       ```  
    
    1. Press **F5** to run the code.

       The corresponding proactive message sample appears:

        :::image type="content" source="~/assets/images/proactive-scenario/proactive-confirm.png" alt-text="Proactive Confirm":::

    1. Go to Teams and uninstall your app. 

    1. Reinstall the same app to get the `conversationUpdate` event.   

    1. Copy and paste the `http://localhost:3978/api/notify` URL in browser to get a proactive hello message in the Adaptive Card.     
  
- title: Complete challenge
  durationInMinutes: 3
  content: |
    Did you come up with something like this? This is how the proactive hello message in Adaptive Card appears:
    
    :::image type="content" source="~/assets/images/proactive-scenario/proactive-helo-in-adaptive-card.png" alt-text="Proactive Hello message in adaptive card":::

- content: |
    You've completed the scenario.
    * You can send notifications on daily basis or request for feedback from user on periodic basis.
    * Handle throttling limits to avoid multiple notifications.
    
   
