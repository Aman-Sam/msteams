### YamlMime:Tutorial
title: Send Proactive Messages
metadata:
  title: Send Proactive Messages
  description: In this article, you'll learn how to send proactive messages, such as welcome messages, scheduled messages, and notifications from a bot.
  audience: Developer
  level: Beginner
  ms.date: 06/23/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ./bots/how-to/conversations/send-proactive-messages.md
  nextTutorialTitle: Read more on proactive messages
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    A proactive message is any message sent by a bot that isn't in response to a request from a user that includes messages, such as:
     - Welcome messages
     - Notifications
     - Scheduled messages
     
    This step-by-step guide helps you to send a proactive message from a bot. You'll see the following outputs:

    * Proactive hello message in chat.     
    :::image type="content" source="~/assets/images/proactive-scenario/proactive-helo.png" alt-text="Screenshot shows the proactive hello message in chat.":::
    
    * Proactive hello message as an Adaptive Card.
    :::image type="content" source="~/assets/images/proactive-scenario/proactive-helo-in-adaptive-card.png" alt-text="Screenshot shows the proactive hello message in adaptive card.":::
    
- title: Prerequisites
  durationInMinutes: 2
  content: |
    Ensure that you install the following:    

    * [Visual Studio 2019](https://visualstudio.microsoft.com/downloads/)
    * [ASP.NET and web development](https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-5.0.301-windows-x64-installer), or [.NET Core](https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-3.1.410-windows-x64-installer) cross-platform development workload
    * [ngrok](https://ngrok.com/download): A cross-platform application that enables you to expose a local development server to the internet with minimal effort
    * [Get a free Teams developer tenant](https://developer.microsoft.com/microsoft-365/dev-program)

- title: Set up local environment
  durationInMinutes: 3
  content: |
    1.	Download the [sample code](https://github.com/MicrosoftDocs/msteams-docs/tree/master/msteams-platform/assets/downloads/SendProactiveMessages.zip) (Zip file) and extract the files.
    1.	Go to the extracted files and double-click **ProactiveBot.csproj**. The solution opens in Visual Studio.
    1.	In Visual Studio, right-click the project (**ProactiveBot**) and select **Build** to build the solution.

        :::image type="content" source="~/assets/images/proactive-scenario/proactivebot-project.png" alt-text="Screenshot shows the proactivebot project.":::
        
        <br>

        <details>

        <summary><b>Troubleshooting</b></summary>

        If you get the **Unable to find package** error, follow these steps:

        1.  Go to **Tools** > **NuGet Package Manager** > **Package Manager Settings**.
        1.	In the **Options** window that appears, select **NuGet Package Manager** > **Package Sources**.
        1.	Select **Add**.
        1.	Enter `nuget.org` in the **Name** and `https://api.nuget.org/v3/index.json` in the **Source** fields.
        1.	Select **Update** and **OK**.
        1.	Rebuild your project.
        <br>

        </details>
        
    1. Unzip to install ngrok.
       * Windows: Double-click `ngrok.zip`.
       * Linux or OS X: Unzip ngrok from the terminal and run the `unzip /path/to/ngrok.zip` command.
    1. Run ngrok from the command line with following arguments:
    
        `ngrok http 3978 --host-header=localhost`  
        
    1. Copy the ngrok URL (as highlighted in the image) for further reference as ngrok base URL in the next steps. 

        :::image type="content" source="~/assets/images/proactive-scenario/ngrok-base-url.png" alt-text="Screenshot shows the ngrok base URL.":::
        
- title: Create and install Teams app
  durationInMinutes: 5
  content: |
    1. Go to Teams > **App Studio** and import the `AppManifest.zip` file available in the downloaded sample code (Zip file).

        :::image type="content" source="~/assets/images/proactive-scenario/app-studio-import-app.png" alt-text="Screenshot shows the App Studio.":::
        
    1. Select **Bots** > **Set up**.

        :::image type="content" source="~/assets/images/proactive-scenario/bot-setup.png" alt-text="Screenshot shows the Bot set up.":::
        
    1. In the **Set up a bot** window, enter **Name** (for example, **Proactive Message Demo**).
    1. Select **Personal** and then select **Create bot** to create the bot.

        :::image type="content" source="~/assets/images/proactive-scenario/create-bot-id.png" alt-text="Screenshot shows the steps to create bot id.":::
        
    1. Append **/api/messages** to the ngrok base URL (that you had copied) and set it as **Bot endpoint address**. Your URL would look like this: `https://yourngrokdomain.ngrok.io/api/messages`.
    
        :::image type="content" source="~/assets/images/proactive-scenario/bot-endpoint-address.png" alt-text="Screenshot shows the bot endpoint address.":::
        
    1. Wait for a few seconds for the changes to take effect.     

        > If it's taking longer, select **Tabs** and then the **Bots** section to force update.
        
    1. Select **Generate new password** to generate the new App Password and copy it. 
    
        :::image type="content" source="~/assets/images/proactive-scenario/generate-app-password.png" alt-text="Screenshot shows the steps to generate app password.":::
        
    1. Go to Visual Studio and open the **appsettings.json** file. Paste the password as the value for `MicrosoftAppPassword`.    
    1. Go to **App Studio**, and copy the App ID. 

        :::image type="content" source="~/assets/images/proactive-scenario/generate-app-id.png" alt-text="Screenshot shows the steps to generate app id.":::
        
    1. Go to Visual Studio and open the **appsettings.json** file. Paste the App ID as the value for `MicrosoftAppId`. Your `appsettings.json` will have the following setting values:    

        :::image type="content" source="~/assets/images/proactive-scenario/app-setting-values.png" alt-text="Screenshot shows the app setting values.":::
        
    1. Press **F5** or select **IIS express** to run the code.

        :::image type="content" source="~/assets/images/proactive-scenario/run-code.png" alt-text="Screenshot shows the steps to run the code.":::
            
        The corresponding proactive message sample appears:  

        :::image type="content" source="~/assets/images/proactive-scenario/proactive-message-sample.png" alt-text="Screenshot shows sample proactive message.":::
            
    1. Go to **Test and distribute** > **Install** to install the same app again.

        :::image type="content" source="~/assets/images/proactive-scenario/install-app.png" alt-text="Screenshot shows the steps to install app.":::
        
    1. Select the `http://localhost:3978/api/notify` URL to get a proactive hello message in the chat.

        :::image type="content" source="~/assets/images/proactive-scenario/result.png" alt-text="Screenshot shows the proactive sent message.":::
        
    1. Go to Teams. You receive a proactive hello message from the bot when installation is successful.          

        :::image type="content" source="~/assets/images/proactive-scenario/proactive-helo.png" alt-text="Screenshot shows the Proactive hello message in chat.":::
        
- title: Add Adaptive Card to proactive message
  durationInMinutes: 10
  content: |
    1. In Visual Studio, stop the debugging process.

        :::image type="content" source="~/assets/images/proactive-scenario/stop-debug.png" alt-text="Screenshot shows the steps to stop the debug.":::
        
    1. Right-click **Dependencies**, select **Manage NuGet Packages**.

        :::image type="content" source="~/assets/images/proactive-scenario/add-adaptive-card-package1.png" alt-text="Screenshot shows the steps to add adaptive card package.":::
        
    1. In **NuGet ProactiveBot**, select **Browse** and search for **AdaptiveCards**. 
    1. Select **Install**. 

        :::image type="content" source="~/assets/images/proactive-scenario/add-adaptive-card-package2.png" alt-text="Screenshot shows the steps to install adaptive cards.":::
        
    1. Open the **NotifyController.cs** file and replace the existing `BotCallback` code with the following code to send the Adaptive Card message:     
        
       ```csharp
       private async Task BotCallback(ITurnContext turnContext, CancellationToken cancellationToken)
        {
                    AdaptiveCard card = new AdaptiveCard(new AdaptiveSchemaVersion(1, 0));

                    card.Body.Add(new AdaptiveTextBlock()
                    {
                        Text = "Proactive Hello",
                        Size = AdaptiveTextSize.ExtraLarge
                    });

                    card.Body.Add(new AdaptiveImage()
                    {
                        Url = new Uri("http://adaptivecards.io/content/cats/1.png")
                    });

                    Attachment attachment = new Attachment()
                    {
                        ContentType = AdaptiveCard.ContentType,
                        Content = card
                    };

                    await turnContext.SendActivityAsync(MessageFactory.Attachment(attachment));
        }
       ```

    1. Hover over the squiggly red line and select **using AdaptiveCards** to resolve the errors. 
    
        :::image type="content" source="~/assets/images/proactive-scenario/resolve-error.png" alt-text="Screenshot shows the steps to resolve error.":::
            
    1. Press **F5** to run the code. 
    1. Go to Teams and uninstall your app. 
        
        :::image type="content" source="~/assets/images/proactive-scenario/uninstall-app.png" alt-text="Screenshot shows the steps to uninstall app.":::
        
    1. Reinstall the same app to get the `conversationUpdate` event.   

    1. Select the [api/notify] `(http://localhost:3978/api/notify)` URL to get a proactive hello message in the Adaptive Card.     
  
- title: Complete challenge
  durationInMinutes: 3
  content: |
    Did you come up with something like this? This is how the proactive hello message in Adaptive Card appears:
    
    :::image type="content" source="~/assets/images/proactive-scenario/proactive-helo-in-adaptive-card.png" alt-text="Screenshot shows the proactive hello messgae in Adaptive Card.":::
    
- content: |
    You've completed the scenario.
    * You can send notifications on daily basis or request for feedback from user on periodic basis.
    * Handle throttling limits to avoid multiple notifications.