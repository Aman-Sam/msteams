### YamlMime:Tutorial
title: Send Proactive Messages
metadata:
  title: Send Proactive Messages
  description: In this module, learn how to send proactive messages, such as welcome messages, scheduled messages, and notifications from a bot.
  audience: Developer
  level: Beginner
  ms.date: 06/23/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ./bots/how-to/conversations/send-proactive-messages.md
  nextTutorialTitle: Read more on proactive messages
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    A proactive message is a message sent by a bot that responds to simple commands sent in the chat from a user and doesn't respond to messages, such as:
    
     - Welcome messages
     - Notifications
     - Scheduled messages
     
    This step-by-step guide helps you to send a proactive message from a bot. You'll see the following output:

    * Proactive hello message in chat.

      :::image type="content" source="~/assets/images/proactive-scenario/proactive-helo1.png" alt-text="Screenshot shows the Proactive Hello message in Teams chat.":::

- title: Prerequisites 
  durationInMinutes: 2
  content: |
    Ensure you install the following tools for building and deploying your apps.

    | &nbsp; | Install | For using |
    | --- | --- | --- |
    | **Required** | &nbsp; | &nbsp; |
    | &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript or TypeScript, build environments. Use the latest version. |
    | &nbsp; | [Teams Toolkit](#install-teams-toolkit) | A Microsoft Visual Studio Code extension that creates a project scaffolding for your app. Use the latest version.|
    | &nbsp; | [Node.js](https://nodejs.org/en/download/) | Back-end JavaScript runtime environment. For more information, see [Node.js version compatibility table for project type](~/toolkit/build-environments.md#nodejs-version-compatibility-table-for-project-type).|
    | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, call and all in one place.|
    | &nbsp; | [Microsoft&nbsp;Edge](https://www.microsoft.com/edge) (recommended) or [Google Chrome](https://www.google.com/chrome/) | A browser with developer tools. |
    | &nbsp; | [Microsoft 365 developer account](/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | Access to Teams account with the appropriate permissions to install an app. |
    > [!NOTE]
    > The guide is tested on Teams Toolkit latest version and Nodejs version 14 and 16. The steps in this guide may work with other versions, but that hasn't been tested.
    
    [!INCLUDE [Set up prerequisites](includes/get-started/prepare-teams-toolkit.md)]

- title: Build Proactive Message bot
  durationInMinutes: 3
  content: |

    **To build proactive message bot using Visual Studio Code**

    1. Open Visual Studio Code.
    
    1. Select the Teams Toolkit :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon in the Visual Studio Code **Activity Bar**.

    1. In the left pane, select **View Samples**.

        :::image type="content" source="../msteams-platform/assets/images/proactive-scenario/view-sample-1.png" alt-text="Screenshot shows the View Samples option.":::

    1. From the list of samples, select **Proactive Messaging**. A prebuilt sample that's ready for debugging opens.

        :::image type="content" source="../msteams-platform/assets/images/proactive-scenario/select-proactive-msg.png" alt-text="Screenshot shows the Proactive messaging bot sample.":::

    1. Select **Create**.

        :::image type="content" source="../msteams-platform/assets/images/proactive-scenario/create-proactive-bot.png" alt-text="Screenshot shows the Create option.":::

    1. Select **Default folder** to store your project root folder in default location.

         :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/select-default-location.png" alt-text="Screenshot shows the option to select default location":::
    
       You can change the default location by the following steps:

        1. Select **Browse**.

            :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/select-browse.png" alt-text="Screenshot shows the option to browse location.":::
            
        1. Select the location for project workspace.

        1. Select **Select Folder**.

           :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/select-folder.png" alt-text="Screenshot shows the option to select Folder.":::
    
    1. After your app is created, the Teams Toolkit displays the following message:

        :::image type="content" source="../msteams-platform/assets/images/proactive-scenario/bot-successful.png" alt-text="Screenshot shows the bot created.":::

        The proactive message bot is created in a few seconds.

        :::image type="content" source="../msteams-platform/assets/images/proactive-scenario/file-structure.png" alt-text="Screenshot shows the proactive message bot created.":::

    1. Select **Run and Debug** :::image type="icon" source="../msteams-platform/assets/images/proactive-scenario/run-debug-icon.png"::: icon from the Visual Studio Code **Activity Bar**.

    1. Select **Debug (Edge)** or **Debug (Chrome)** from the dropdown list.

        :::image type="content" source="../msteams-platform/assets/images/proactive-scenario/debug-option-edge.png" alt-text="Screenshot shows the debugging application.":::

    You'll be prompted to upload the proactive message bot to Teams on your local machine. 

    1. Select **Add** or use the dropdown menu to add your proactive bot app to a team, chat, or meeting.

        :::image type="content" source="~/assets/images/proactive-scenario/add-to-teams.png" alt-text="Screenshot shows the option to add bot to Teams..":::

    1. Select **Set up a bot**. The proactive message bot app is uploaded to Teams client and the following message appears in response to the message sent.

        :::image type="content" source="~/assets/images/proactive-scenario/proactive-msg-sent.png" alt-text="Screenshot shows the proactive message bot response in the chat.":::

    1. Copy and paste the `http://localhost:3978/api/notify` URL in browser to get a proactive hello message in the chat. 

        :::image type="content" source="~/assets/images/proactive-scenario/pro-msg-browser.png" alt-text="Screenshot shows the browser that responds to proactive message.":::

    1. Go to Teams. You'll receive a **proactive hello** message from the bot as you refresh the browser.

        :::image type="content" source="~/assets/images/proactive-scenario/pro-msg-response.png" alt-text="Screenshot shows the bot response on the chat.":::

    ## Take tour of source code

            Teams Toolkit provides components for building an app. After creating the project, you can view the project folders and files in the **Explorer** area of Visual Studio Code.

            :::image type="content" source="~/assets/images/proactive-scenario/file-structure.png" alt-text="Screenshot shows the structure tab":::

            If you choose to use UI framework, following sample template code provides a scaffolding with React components. It contains following content:

            | Folder / File | Contents |
            | - | - |
            | `teamsapp.yml` | Main project file describes your application configuration and defines the set of actions to run in each lifecycle stages. |
            | `teamsapp.local.yml`| This overrides `teamsapp.yml` with actions that enable local execution and debugging. |
            | `env/`| Name / value pairs are stored in environment files and used by `teamsapp.yml` to customize the provisioning and deployment rules. |
            | `.vscode/` | VSCode files for debugging. |
            | `appPackage/` | Templates for the Teams application manifest. |
            | `infra/` | Templates for provisioning Azure resources. |
            | `src/` | The source code for the application. |
            | `src/index.js` | Application entry point and `restify` handlers for command and response. |
            | `src/teamsBot.js` | An empty teams activity handler for bot customization. |
            | `src/adaptiveCards/helloworldCommand.json` | A generated Adaptive Card that is sent to Teams. |
            | `src/helloworldCommandHandler.js` | The business logic to handle a command. |

- title: Deploy your Proactive message bot
  durationInMinutes: 1
  content: |

    You've learnt to build and run Teams app with proactive message bot capability. The final step is to deploy your app on Azure.

    Let's deploy the first app with proactive message bot capability on Azure using Teams Toolkit.

    ## Sign in to your Azure account

    Use your account to access the Microsoft Azure portal and to provide provision new cloud resources to support your app.

    1. Open Visual Studio Code.
    1. Open the project folder that you created the proactive message bot app.
    1. Select the Teams Toolkit  :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon in the sidebar.
    1. Select **Sign in to Azure** using your credentials.

        > [!TIP]
        > If you have the AZURE ACCOUNT extension installed and are using the same account, you can skip this step.

        Your default web browser opens to let you sign in to the account.

        1. Close the browser when prompted and return to Visual Studio Code.

        The **ACCOUNTS** section of the sidebar shows the two accounts separately. It also lists the number of usable Azure subscriptions available to you. Ensure you have at least one usable Azure subscription available. If not, sign out and use a different account.

        Congratulations, you have created a Teams app! Now let's go ahead and learn how to deploy one of the apps to Azure using the Teams Toolkit.

    ## Deploy your app to Azure

     Under **DEPLOYMENT** you can provision for necessary cloud resources and your app's code is copied into the created cloud resources.

    # [Visual Studio Code](#tab/vscode)

    1. Select the Teams Toolkit :::image type="icon" source="~/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon in the Visual Studio Code sidebar.

    1. Select **Provision** under **LIFECYCLE**.

        :::image type="content" source="~/assets/images/sbs-command-bot/provision-cloud.png" alt-text="Screenshot shows the provisioning commands.":::

    1. Select an existing resource group or create new resource group. For more information, see [Create resource group](/azure/azure-resource-manager/management/manage-resource-groups-portal#create-resource-groups).

    1. Select anyone of the existing subscription.

        :::image type="content" source="~/assets/images/proactive-scenario/select-subscription.png" alt-text="Screenshot shows the subscription option for provisioning.":::

    1. Select an existing or create new resource group.

        :::image type="content" source="~/assets/images/sbs-command-bot/select-resource-group.png" alt-text="Screenshot show the resource group option for provisioning.":::

        > [!NOTE]
        > A dialog appears mentioning that costs may be incurred when running resources in Azure.

    1. Select **Provision**.

        :::image type="content" source="~/assets/images/sbs-command-bot/provision-confirm1.png" alt-text="Screenshot of the provisioning dialog.":::

       The provisioning process creates resources in the Azure cloud. You can monitor the progress by observing the dialogs in the lower-right corner. After few minutes, you see the following notice:

        :::image type="content" source="~/assets/images/proactive-scenario/deploy-provision-proactive.png" alt-text="Screenshot shows the provisioning complete dialog.":::

         You have the option to view the provisioned resources. For this tutorial, you don't need to view resources.

    1. Select **Deploy** under **LIFECYCLE** after provisioning is complete.

        :::image type="content" source="~/assets/images/sbs-command-bot/deploy-cloud.png" alt-text="Screenshot showing the where to click to deploy to cloud.":::

    1. Select **Deploy**.

        :::image type="content" source="~/assets/images/sbs-command-bot/Deploy-confirm.png" alt-text="Screenshot shows the confirmation to deploy.":::

       Deployment takes some time. You can monitor the progress in the dialog in lower-right corner. After a few minutes, you see the following notice.

        :::image type="content" source="~/assets/images/proactive-scenario/deploy-confirmation-proactive.png" alt-text="Screenshots shows the deploy confirm.":::
    
    1. Open the debug panel (**Ctrl+Shift+D** / **⌘⇧-D** or **View > Run**) from Visual Studio Code.
    1. Select **Launch Remote (Edge)** from the launch configuration dropdown.
    1. Select **Start Debugging** button. You'll be prompted to upload the proactive message bot app to Teams.

         :::image type="content" source="~/assets/images/proactive-scenario/debug-option-remote.png" alt-text="Screenshot shows the remote debug.":::

    1. Select **Add** or use the dropdown menu to add your proactive bot app to a team, chat, or meeting.

        :::image type="content" source="~/assets/images/proactive-scenario/add-to-teams.png" alt-text="Screenshot shows the option to add bot to Teams.":::

    1. Select **Set up a bot**. The proactive message bot app is uploaded to Teams client and the following message appears in response to the message sent.

        :::image type="content" source="~/assets/images/proactive-scenario/proactive-msg-sent.png" alt-text="Screenshot shows the bot response in the chat.":::

    1. Copy and paste the `http://localhost:3978/api/notify` URL in browser to get a proactive hello message in the chat. 

        :::image type="content" source="~/assets/images/proactive-scenario/pro-msg-browser.png" alt-text="Screenshot shows the browser that sends proactive message to chat.":::

    1. Go to Teams. You'll receive a **proactive hello** message from the bot as you refresh the browser.

        :::image type="content" source="~/assets/images/proactive-scenario/pro-msg-response.png" alt-text="Screenshot shows the bot response.":::
        
    # [Command Line](#tab/cli)

    In your terminal window:

    1. Run `teamsfx new` to create new project.

       ``` bash
       teamsfx new
       ```

    1. Run `teamsfx provision` to create azure resource.

       ``` bash
       teamsfx provision
       ```

    1. Run `teamsfx deploy` to deploy the app.

       ``` bash
       teamsfx deploy
       ```

    1. Run `teamsfx preview` to run the app.

       ``` bash
       teamsfx preview
       ```

    ---
  
- title: Complete challenge
  durationInMinutes: 3
  content: |
    Did you come up with something like this? This is how the proactive hello message in Adaptive Card appears:
    
    :::image type="content" source="~/assets/images/proactive-scenario/proactive-helo1.png" alt-text="Screenshot shows the proactive hello message.":::

- content: |
    You've completed the scenario.
    * You can send notifications on daily basis or request for feedback from user on periodic basis.
    * Handle throttling limits to avoid multiple notifications.
    
   
