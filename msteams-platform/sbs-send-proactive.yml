### YamlMime:Tutorial
title: Send Proactive Messages
metadata:
  title: Send Proactive Messages
  description: In this module, learn how to send proactive messages, such as welcome messages, scheduled messages, and notifications from a bot.
  audience: Developer
  level: Beginner
  ms.date: 06/23/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ./bots/how-to/conversations/send-proactive-messages.md
  nextTutorialTitle: Read more on proactive messages
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    A proactive message is any message sent by a bot that isn't in response to a request from a user that includes messages, such as:
     - Welcome messages
     - Notifications
     - Scheduled messages
     
    This step-by-step guide helps you to send a proactive message from a bot. You'll see the following outputs:

    * Proactive hello message in chat.  

      :::image type="content" source="~/assets/images/proactive-scenario/proactive-helo1.png" alt-text="Screenshot shows the Proactive Hello message in Teams chat.":::

- title: Prerequisites 
  durationInMinutes: 2
  content: |
    Here's a list of tools you need for building and deploying your apps.

    | &nbsp; | Install | For using |
    | --- | --- | --- |
    | &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript, or TypeScript, build environments. Use the latest version. |
    | &nbsp; | [Teams Toolkit](#install-the-teams-toolkit) | Microsoft Visual Studio Code extension that creates a project scaffolding for your app. Use the latest version. |
    | &nbsp; | [Node.js](https://nodejs.org/en/download/) | Back-end JavaScript runtime environment. For more information, see [Node.js version compatibility table for project type](~/toolkit/build-environments.md#nodejs-version-compatibility-table-for-project-type).|
    | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, and call-all in one place.|
    | &nbsp; | [Microsoft&nbsp;Edge](https://www.microsoft.com/edge) (recommended) or [Google Chrome](https://www.google.com/chrome/) | A browser with developer tools. |
    | &nbsp; | [Microsoft 365](https://developer.microsoft.com/en-us/microsoft-365/dev-program) | Access to Teams account with the appropriate permissions to install an app. |
    
    > [!NOTE]
    > The guide is tested on Teams Toolkit latest version and Nodejs version 14 and 16. The steps in this guide may work with other versions, but that hasn't been tested.
    
    ## Prepare development environment

    After you've installed the required tools, set up the development environment.

    ### Install the Teams Toolkit

    The Teams Toolkit helps simplify the development process with tools to provision and deploy cloud resources for your app, publish to the Microsoft Teams Store, and more. 
        
    You can use the toolkit with Visual Studio Code, or CLI (command-line interface), called `TeamsFx`.

    # [Visual Studio Code](#tab/vscode)

    1. Open Visual Studio Code and select **Extensions** (**Ctrl+Shift+X** / **⌘⇧-X** or **View > Extensions**).
    1. In the search box, enter **Teams Toolkit**.
    1. Select **Install** next to the Teams Toolkit.

        :::image type="content" source="~/assets/images/sbs-notification-bot/teams-toolkit.png" alt-text="Illustration shows the Teams Toolkit extension installation." lightbox="~/assets/images/sbs-notification-bot/teams-toolkit-2.png":::

        The Teams Toolkit :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon appears in the Visual Studio Code **Activity Bar** after it's installed.

    You can also find the Teams Toolkit on the [Visual Studio Code Marketplace](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension).

    # [Command line](#tab/cli)

    To install the TeamsFx CLI, use the `npm` package manager:

    ``` bash
    npm install -g @microsoft/teamsfx-cli
    ```

    Depending on your configuration, you may need to use `sudo` to install the CLI:

    ``` bash
    sudo npm install -g --unsafe-perm @microsoft/teamsfx-cli
    ```

    It's more common on Linux and macOS systems.

    Ensure you add the npm global cache to your PATH. This step is normally done as part of the Node.js installer.  

    You can use the CLI with the `teamsfx` command. Test the command is working by running `teamsfx -h`.

    > [!NOTE]
    > Before you run TeamsFx in PowerShell terminals, ensure you enable the **remote signed** execution policy for PowerShell.

    ---

    ## Set up your Teams development tenant

    A **tenant** is like a space or a container where you chat, share files, and run meetings for your organization in Teams. You can also sideload and test the app.

    ### Check for sideloading option

    After creating the app, you must load your app in Teams without distributing it. Sign in to your Microsoft 365 account to view this option.

        > [!NOTE]
        > Uploading your app is necessary for previewing and testing apps in Teams local environment. Enable Sideloading to preview and test your app in Teams locally.

    Do you already have a tenant, and do you have the admin access? Let's check if you really do!

    To verify uploading apps in Teams:

        1. Go to **Microsoft Teams**.
        1. Select **Apps** > **Manage your apps**.
        1. Select **Upload an app**.
        1. Look for the option to **Upload a custom app**. If you see the option, sideloading apps is enabled.

            :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png" alt-text="Illustration shows the option to upload a custom app in Teams.":::

            > [!NOTE]
            > Contact Teams administrator, if you don't see the option to upload a custom app.

    ### Create a free Teams developer tenant (optional)

    If you don't have a Teams developer account, you can get it free. Join the Microsoft 365 developer program!

    1. Go to the [Microsoft 365 developer program](https://developer.microsoft.com/microsoft-365/dev-program).
    1. Select **Join Now** and follow the onscreen instructions.
    1. Select **Set up E5 subscription** from the welcome screen.
    1. Set up administrator account. After you finish, the following screen displays.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png" alt-text="Microsoft":::

    1. Sign in to Teams using the new administrator account. Now you should have the **Upload a custom app** option.     

- title: Build Proactive Message bot
  durationInMinutes: 3
  content: |

    1. **To build notification bot using Visual Studio Code**

    1. Open Visual Studio Code.
    
    1. Select the Teams Toolkit :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon in the Visual Studio Code **Activity Bar**.

    1. In the left pane, select **View Samples**.

    1. From the list of samples, select **Proactive Messaging**. A prebuilt sample that's ready for debugging opens.

    1. Select **Create**.

    1. Select **Default folder** to store your project root folder in default location.

         :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/select-default-location.png" alt-text="Select default location":::
    
       You can also change the default location by the following steps:

        1. Select **Browse**.

            :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/select-browse.png" alt-text="Select browse location":::
            
        1. Select the location for project workspace.

        1. Select the **Select Folder**.

           :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/select-folder.png" alt-text="Select Folder":::
    
    1. After your app is created, the Teams Toolkit displays the following message:

    1. Select **Select and Start Debugging Teams App** icon.

    1. Select **Debug(Edge)** or **Debug(Chrome)** from the dropdown list. After debugging is successful, you'll be prompted to upload the bot app to Teams on your local machine. 

    1. Select **Add** or use the dropdown menu to add your command bot app to a team, chat, or meeting.

    1.	Download the [sample code](https://github.com/MicrosoftDocs/msteams-docs/tree/master/msteams-platform/assets/downloads/SendProactiveMessages.zip) (.zip file) and extract the files.
    1.	Go to the extracted files and double-click **ProactiveBot.csproj**. The solution opens in Visual Studio.
    1.	In Visual Studio, right-click the project (**ProactiveBot**) and select **Build** to build the solution.

        :::image type="content" source="~/assets/images/proactive-scenario/proactive-bot-project.png" alt-text="Screenshot shows the Proactive Bot Project in Visual Studio and with the Build highlighted in red.":::

        <br>

        <details>

        <summary><b>Troubleshooting</b></summary>

        If you get the **Unable to find package** error, follow these steps:

        1.  Go to **Tools** > **NuGet Package Manager** > **Package Manager Settings**.
        1.	In the **Options** window that appears, select **NuGet Package Manager** > **Package Sources**.
        1.	Select **Add**.
        1.	Enter nuget.org in the **Name** and https://api.nuget.org/v3/index.json in the **Source** fields.
        1.	Select **Update** and **OK**.
        1.	Rebuild your project.
        <br>

        </details>

    1. Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

        ```bash
        ngrok http --host-header=localhost 3978
        ```
        
    1. From ngrok, copy the HTTPS URL. 

        :::image type="content" source="~/assets/images/proactive-scenario/ngrok-base-url1.png" alt-text="Screenshot shows the ngrok base URL highlighted in red."lightbox="~/assets/images/proactive-scenario/ngrok-base-url1.png":::   

- title: Enable developer preview
  durationInMinutes: 1
  content: |
    1. Enable uploading of apps in the admin console of your tenant.
        1. Sign in to [Microsoft 365 admin center](https://admin.microsoft.com/Adminportal/Home?source=applauncher#/homepage#/) with your admin credentials.
        1. In the left pane, select **Show All**.
        1. Select **Teams**.
 
           :::image type="content" source="./assets/images/meeting-token-generator/meeting-token-generator-admincenter-1.png" alt-text="Screenshot of Admin centers with Teams option highlighted in red.":::

    1.  In the left pane, select **Teams apps**.
       
    1.  Select **Setup policies**.
 
           :::image type="content" source="~/assets/images/meeting-token-generator/meeting-token-generator-setuppolicies-1.png" alt-text="Screenshot of Microsoft Teams admin center with Teams apps and Setup policies highlighted in red.":::
   
    1.  Select **Global (Org-wide default)**.

          :::image type="content" source="~/assets/images/sbs-connector/Global-1.png" alt-text="Screenshot of App setup policies with Global Org-wide default highlighted in red.":::

    1.   Turn on the **Upload custom apps** toggle.

          :::image type="content" source="~/assets/images/meeting-token-generator/meeting-token-generator-toggle-on-connectors.png" alt-text="Screenshot of Global Org-wide default with Upload custom apps showing the toggle button on and highlighted in red.":::
   
    1.   Select **Save**.
       
          Your test tenant can now permit custom app sideloading.

          > [!TIP]
          > The sideloading takes some time to become active.

    1.   Go to **Microsoft Teams**.
    
    1.   From the upper-right corner of your Teams, select **...**.
    
    1.   Select **About** > **Developer preview**.

          :::image type="content" source="~/assets/images/meeting-token-generator/meeting-token-generator-devpreview-1.png" alt-text="Screenshot shows the dropdown list with About and Developer preview highlighted in red.":::
   
    1.   Select **Switch to developer preview**.
           :::image type="content" source="./assets/images/meeting-token-generator/meeting-token-generator-admincenter-1.png" alt-text="Screenshot shows the Admin centers menu with Teams highlighted in red." border="true":::

- title: Create and install Teams app
  durationInMinutes: 5
  content: |
    1. Open [Developer Portal for Teams](https://dev.teams.microsoft.com).

       The following page appears:

       :::image type="content" source="~/assets/images/proactive-scenario/developer-portal-intro.png" alt-text="Screenshot shows the Developer Portal Home page.":::
 
    1. Select **Apps** > **Import app**.

        :::image type="content" source="~/assets/images/proactive-scenario/upload-app-package.png" alt-text="Screenshot shows how to upload an app package. The Apps option in the left pane and Import app are highlighted in red.":::  

    1. Select **AppManifest** and select **Open**.

        :::image type="content" source="~/assets/images/proactive-scenario/select-app-package.png" alt-text="Screenshot shows the SendProactiveMessages folder where AppManifest zip folder is selected and the Open option highlighted in red.":::

    1. Select **Import**.

         :::image type="content" source="~/assets/images/proactive-scenario/select-import.png" alt-text="Screenshot shows the App package has errors screen with Import option highlighted in red.":::

        The following page appears:

         :::image type="content" source="~/assets/images/proactive-scenario/proactive-message.png" alt-text="Screenshot shows the Basic information screen of Proactive Message in Developer Portal.":::
    
         An **App ID** is automatically generated by Microsoft for your app and is available under **Basic information**..

    1. Under **Descriptions**, add the **Short description** and **Long description** for your app.

    1. Under **Developer information**, add developer or company name and in **Website (must be a valid HTTPS URL)** give your ngrok HTTPS URL.

    1. Under **App URLs**, update the **Privacy policy** to `https://<yourngrokurl>/privacy` and **Terms of use** to `https://<yourngrokurl>/termsofuse`.

    1. Select **Save**.

    1. Under **Domains**, select **Add a domain** and enter your ngrok URL without the HTTPS prefix `<yourngrokurl>.ngrok.io`.
    
    1. Select **App features** > **Bot**.
    
        :::image type="content" source="~/assets/images/proactive-scenario/select-app-features.png" alt-text="Screenshot shows App features screen of Proactive Message. The App features option under Configure and Bot options are highlighted in red.":::

    1. Select **Create a new bot**.

        :::image type="content" source="~/assets/images/proactive-scenario/select-bot.png" alt-text="Screenshot shows the Select an existing bot option with the Create a new bot option highlighted in red.":::     
        
    1. Select **New Bot**. 
    
        :::image type="content" source="~/assets/images/proactive-scenario/create-new-bot.png" alt-text="Screenshot of Azure Portal with the New Bot option highlighted in red.":::

        The **Add bot** window appears.

    1. In the "Add bot** window enter **Proactive Message bot** and select **Add**.

         :::image type="content" source="~/assets/images/proactive-scenario/enter-proactive-message.png" alt-text="Screenshot of Add bot screen with Add option highlighted in red.":::

        The Proactive Message bot is successfully added to the application.

         :::image type="content" source="~/assets/images/proactive-scenario/bot-name.png" alt-text="Screenshot of Bot management screen that shows Proactive Message bot added successfully message and the Bot Name and ID.":::

       > [!TIP]
       > Save the **Bot ID** for future reference.

    1. Double-click on the **Proactive Message bot**. The **Proactive Message Demo** page appears.

    1. Select **Configure** and set the **Endpoint address** in the form of `https://your ngrok/api/messages`.

        :::image type="content" source="~/assets/images/proactive-scenario/select-configure.png" alt-text="Screenshot of Proactive Message bot with Save option under Configure highlighted in red.":::

    1. Select **Client secrets** > **Add a client secret for your bot**.

        :::image type="content" source="~/assets/images/proactive-scenario/secret.png" alt-text="Screenshot of Proactive Message bot with Client secrets in the left pane and Add a client secret for your bot highlighted in red.":::

    1. The **New client secret generated** window appears. Select **Copy to clipboard** > **OK**.    

        :::image type="content" source="~/assets/images/proactive-scenario/new-secret.png" alt-text="Screenshot shows the New client secret generated window with copy to clipboard icon and OK button highlighted in red.":::

        > [!TIP]
        > Save the **New client secret** value for future reference.

    1. Select the **Apps** icon and select **Proactive Message Demo**.

         :::image type="content" source="~/assets/images/proactive-scenario/select-apps.png" alt-text="Screenshot shows the Apps screen with Apps icon in the left pane and Proactive Message Demo highlighted in red.":::

        The following page appears:

         :::image type="content" source="~/assets/images/proactive-scenario/overview-page.png" alt-text="Screenshot shows the Overview page of your app in Developer Portal.":::

    1. Select **App Features** under **Configure** and select **Bot**.

         :::image type="content" source="~/assets/images/proactive-scenario/select-app-features1.png" alt-text="Screenshot shows App features screen of Proactive Message. The App features option under Configure and Bot options are highlighted in red.":::

    1. From the **Select an existing bot** dropdown, select **Proactive Message bot**.

         :::image type="content" source="~/assets/images/proactive-scenario/select-send-proactive-message.png" alt-text="Screenshot of Identify your bot that shows the selection of Select an existing bot option.":::

    1. Select **Personal** > **Save**.

        :::image type="content" source="~/assets/images/proactive-scenario/select-personal.png" alt-text="Screenshot shows the selection of scope and the Save option highlighted in red.":::

    1. Open the **appsettings.json** file in Visual Studio and update the following information:

        * Set **MicrosoftAppID** to your bot ID.
        * Set **MicrosoftAppPassword** to your client secret ID value.

       :::image type="content" source="~/assets/images/proactive-scenario/appsettings.png" alt-text="Screenshot of appsettings.json file with Microsoft App ID and Password information entered.":::

    1. Select **Debug** > **Start Debugging**.

        :::image type="content" source="~/assets/images/proactive-scenario/debug.png" alt-text="Screenshot of Debug dropdown menu with Start Debugging option highlighted in red.":::

       The corresponding proactive message **Your bot is ready!** sample appears:

        :::image type="content" source="~/assets/images/proactive-scenario/proactive-confirm.png" alt-text="Screenshot shows your bot is ready in browser.":::

    1. Go back to Developer Portal, select **Preview in Teams**.
        
        :::image type="content" source="~/assets/images/proactive-scenario/preview-teams.png" alt-text="Screenshot shows Preview in Teams option highlighted in red.":::

    1. Select **Add**.

        :::image type="content" source="~/assets/images/proactive-scenario/add-select.png" alt-text="Screenshot shows Proactive Message bot in Teams with Add option highlighted in red.":::

       The following page appears.

        :::image type="content" source="~/assets/images/proactive-scenario/teams-open1.png" alt-text="Screenshot shows Proactive Message bot in your Teams.":::

    1. Open the browser.

    1. Copy and paste the `http://localhost:3978/api/notify` URL in browser to get a proactive hello message in the chat.

        :::image type="content" source="~/assets/images/proactive-scenario/url-paste.png" alt-text="Screenshot shows the URL in browser to get a proactive hello message in the chat.":::

    1. Go to Teams. You receive a proactive hello message from the bot when the installation is successful.

        :::image type="content" source="~/assets/images/proactive-scenario/proactive-reply.png" alt-text="Screenshot shows the proactive message reply.":::
    

- title: Add Adaptive Card to proactive message
  durationInMinutes: 10
  content: |
    1. In Visual Studio, **stop** the debugging process.

        :::image type="content" source="~/assets/images/proactive-scenario/stop-debugging.png" alt-text="Screenshot shows stop debug icon highlighted in red.":::

    1. Right-click **Dependencies**, select **Manage NuGet Packages**.

        :::image type="content" source="~/assets/images/proactive-scenario/dependencies.png" alt-text="Screenshot shows Solution screen. The menu item titled Manage NuGet Packages under Dependencies highlighted in red.":::

    1. In **NuGet ProactiveBot**, select **Browse** and search for **AdaptiveCards**. 
    1. Select **Install**. 

        :::image type="content" source="~/assets/images/proactive-scenario/select-adaptive cards.png" alt-text="Screenshot shows the NuGet: Proactive Bot screen with Adaptive Cards option and Install highlighted in red.":::

    1. In **Preview changes** window, select **OK**.

        :::image type="content" source="~/assets/images/proactive-scenario/ok-select.png" alt-text="Screenshot shows the preview changes window with the OK option highlighted in red.":::

    1. Open the **NotifyController.cs** file under **Controllers**.

        :::image type="content" source="~/assets/images/proactive-scenario/select-notify.png" alt-text="Screenshot shows how to select notifycontroller.cs under Controllers folder highlighted in red.":::

    1. Replace the existing `BotCallback` code with the following code to send the Adaptive Card message:     
        
       ```csharp
       private async Task BotCallback(ITurnContext turnContext, CancellationToken cancellationToken)
        {
                    AdaptiveCard card = new AdaptiveCard(new AdaptiveSchemaVersion(1, 0));

                    card.Body.Add(new AdaptiveTextBlock()
                    {
                        Text = "Proactive Hello",
                        Size = AdaptiveTextSize.ExtraLarge
                    });

                    card.Body.Add(new AdaptiveImage()
                    {
                        Url = new Uri("http://adaptivecards.io/content/cats/1.png")
                    });

                    Attachment attachment = new Attachment()
                    {
                        ContentType = AdaptiveCard.ContentType,
                        Content = card
                    };

                    await turnContext.SendActivityAsync(MessageFactory.Attachment(attachment));
        }
       ```  
    
    1. Press **F5** to run the code.

       The corresponding proactive message sample **Your bot is ready!** appears:

        :::image type="content" source="~/assets/images/proactive-scenario/proactive-confirm.png" alt-text="Screenshot shows that your Proactive Message bot is ready.":::

    1. Go to Teams and uninstall your app. 

    1. Reinstall the same app to get the `conversationUpdate` event.   

    1. Copy and paste the `http://localhost:3978/api/notify` URL in browser to get a proactive hello message in the Adaptive Card.     
  
- title: Complete challenge
  durationInMinutes: 3
  content: |
    Did you come up with something like this? This is how the proactive hello message in Adaptive Card appears:
    
    :::image type="content" source="~/assets/images/proactive-scenario/proactive-helo-in-adaptive-card.png" alt-text="Screenshot shows the Proactive Hello message in adaptive card.":::

- content: |
    You've completed the scenario.
    * You can send notifications on daily basis or request for feedback from user on periodic basis.
    * Handle throttling limits to avoid multiple notifications.
    
   
