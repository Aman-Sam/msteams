### YamlMime:Tutorial
title: Upload file in Teams using bot
metadata:
  title: Upload file in Teams using bot 
  description: Learn how to upload files to Teams from a bot and how to receive a file sent to a bot as an attachment.
  audience: Developer
  level: Beginner
  ms.date: 28/12/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/how-to/bots-filesv4.md
  nextTutorialTitle: Read more on send and receive files through the bot
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
   The bot uses Teams API to send and receive files with users in the personal chats. The files shared in Teams can appear as cards and allow rich in-app viewing. The bot also helps in implementing features like expense reporting, image recognition, file archival, and e-signatures that involve editing of file content. 
   
   **Key features of uploading file in Teams using bot:** 
   
     * Upload files to Teams using a bot.
     * Receive a file sent to bot as an attachment.
     * Fetch inline images sent in message.

   This step-by-step guide helps you to upload file in Teams using bot. You'll see the following output:

   :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/output-sbs.png" alt-text="Screenshot shows the final output":::
   
- title: Prerequisites
  durationInMinutes: 1 
  content: |
    Ensure you install the following tools and set up your development environment: 

     | &nbsp; | Install | For using... |
     | --- | --- | --- |
     | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, and call-all in one place.|
     | &nbsp; | [Visual Studio 2022](https://visualstudio.microsoft.com)<br> | You can install the enterprise version in Visual Studio 2022, and install the ASP.NET and web development workloads. Use the latest version. |
     | &nbsp; | [ngrok](https://ngrok.com/download) | Teams app features (conversational bots, message extensions, and incoming webhooks) require inbound connections. A tunnel connects your development system to Teams. It isn't required for apps that only include tabs. This package is installed within the project directory (using npm `devDependencies`). |
   
      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).

- title: Set up local environment
  durationInMinutes: 1
  content: |  

   [!INCLUDE [Set up local environment](includes/get-started/clone-repository.md)]

- title: Create and register your bot 
  durationInMinutes: 5
  content: |
    The following steps help you to create and register your bot in Azure portal:
    
    * Create Azure Bot resource to register bot with Azure Bot Service.
    * Create client secret to enable SSO authentication of the bot.
    * Add Teams channel to deploy the bot.
    * Create a tunnel to your web server's endpoints by using devtunnel alternative ngrok.
    * Add messaging endpoint to the devtunnel you created.

    [!INCLUDE [Azure bot resource](includes/get-started/azure-bot-resource.md)]

    [!INCLUDE [Client secret](includes/get-started/create-client-secret.md)]

    [!INCLUDE [Teams channel](includes/get-started/add-teams-channel.md)]

    [!INCLUDE [Tunnel](includes/get-started/dev-ngrok-tunnel.md)]
   
- title: Update the Azure AD app registration 
  durationInMinutes: 5
  content: |

   [!INCLUDE [Azure app registration](includes/get-started/azure-app-registration.md)]

   [!INCLUDE [Azure add scope](includes/get-started/azure-add-scope.md)]

   [!INCLUDE [Azure client application](includes/get-started/azure-client-application.md)]

   [!INCLUDE [Azure api permission](includes/get-started/azure-user-api-permissions.md)]

   [!INCLUDE [Manifest and new connection](includes/get-started/azure-manifest-service-connection.md)]

- title: Set up app settings and manifest files
  durationInMinutes: 2
  content: |
    1. Go to the **appsettings.json** file in the cloned repository.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/appsettings-file-location.png" alt-text="app settings manifest":::
                      
    1. Open the **appsettings.json** file and update the following information:

         * Set `"MicrosoftAppType"` to **MultiTenant**.
         * Set `"MicrosoftAppId"` to your bot's **Microsoft App ID**.
         * Set `"MicrosoftAppPassword"` to your bot's client secret ID value.
         * Set `"MicrosoftAppTenantId"` as blank for MultiTenant bot.

           :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/appsettings-json1_1.png" alt-text="appsettings file in visual studio":::
           
    1. Go to the **manifest.json** file in the cloned repository.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/manifest-file-location.png" alt-text="open manifest file":::
         
    1. Open the **manifest.json** file and update the following changes:
    
       Replace all occurrences of `<<YOUR-MICROSOFT-APP-ID>>` with your bot's **Microsoft App ID**.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/bot-id_1.png" alt-text="replace bot id.":::

- title: Build and run the service
  durationInMinutes: 2
  content: |
     To build and run the service using Visual Studio or Command line.

     # [Visual Studio](#tab/visualstudio)

       1. Open Visual Studio.
       
       1. Go to **File** > **Open** > **Project/Solution...**.

           :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/VS-open-file_1.png" alt-text="visual studio":::      
        
       1. Select **TeamsFileUpload.csproj** file from **samples** > **bot-file-upload** > **csharp** folder.

           :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/project-file-location.png" alt-text="folder":::        

       1. From **View**, open **Solution Explorer**.

          :::image type="content" source="../msteams-platform/assets/images/Teams-task-module/solutionexplorer_1.png" alt-text="view":::
          
       1. Press **F5** to run the project.
    
       1. Select **Yes** if the following dialog appears:

          :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/certificate_1.png" alt-text="ca":::

          
          A webpage opens with a message **Your bot is ready!**.

          :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/file-bot.png" alt-text="your bot is ready":::

       
 
     # [Command line](#tab/cli)

     Go to **Microsoft-Teams-Samples** > **samples** > **bot-file-upload** > **csharp** in Command Prompt window and enter the following command:

     ```bash
     dotnet run
     ```
   
     ![Dotnet](~/assets/images/teams-file-upload-bot/dotnet-run-command.png)

- title: Add file upload bot in Teams
  durationInMinutes: 2
  content: | 
    1. In your cloned repository, Go to **Microsoft-Teams-Samples** > **samples** > **bot-file-upload** > **csharp** > **TeamsAppManifest**.

    1. Create a .zip file with the following files that are present in the **TeamsAppManifest** folder:
       * manifest.json
       * icon-outline.png
       * icon-color.png 

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/manifest-zip-file-location.png" alt-text="manifest folder":::

       [!INCLUDE [Upload custom app](includes/get-started/app-upload.md)]

    1. Select the .zip file you've created in the **TeamsAppManifest** folder and select **Open**.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/upload-manifest-zip.png" alt-text="manifest open"::: 

    1. Select **Add**.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/add-bot-file.png" alt-text="add"::: 

    1. In the compose message area, type **hi** and bot sends an Adaptive card.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/respond-bot.png" alt-text="card send by bot":::

- title: Interacting with the bot in Teams
  durationInMinutes: 2
  content: |
    1. Send a message to the bot. Bot sends an Adaptive Card with the permission to upload the file.
       
       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/sbs-adaptive-card.png" alt-text="bot sending card":::
    
    1. Select **Allow**. A `teams-logo.png` file is uploaded to the file directory, which is ready for download.
         
       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/sbs-allow.png" alt-text="teams logo":::
    
    1. Send a file to the bot as an attachment in Teams. It responds with a message **Received and Saved**. You can view the attachment from the **Files** tab.
        
       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/sbs-file.png" alt-text="send file":::
   
    1. Send an image as an attachment. It responds with a message **Received and saved**. You can view the image on the chat window and from **Files** tab.
       
       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/sbs-image.png" alt-text="received":::
      
        > [!NOTE]
        >  After the bot is installed in the personal scope, the user enters into a one-on-one chat conversation with the bot.
      
- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?
    
    :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/output-sbs.png" alt-text="final image"::: 

- content: |
    You've completed the tutorial. Now you can upload files in Teams using bot.
 
