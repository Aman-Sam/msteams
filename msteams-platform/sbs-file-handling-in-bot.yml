### YamlMime:Tutorial
title: Upload file in Teams using bot
metadata:
  title: Upload file in Teams using bot 
  description: Learn how to upload files to Teams from a bot and how to receive a file sent to a bot as an attachment.
  audience: Developer
  level: Beginner
  ms.date: 28/12/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/how-to/bots-filesv4.md
  nextTutorialTitle: Read more on send and receive files through the bot
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
   The bot uses Teams API to send and receive files with users in the personal chats. The files shared in Teams can appear as cards and allow rich in-app viewing. The bot also helps in implementing features like expense reporting, image recognition, file archival, and e-signatures that involve editing of file content. 
   
   **Key features of uploading file in Teams using bot** 
   
     * Upload files to Teams using a bot.
     * Receive a file sent to bot as an attachment.
     * Fetch inline images sent in message.

   This step-by-step guide helps you to upload file in Teams using bot. You'll see the following output:

   :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/output-sbs.png" alt-text="output image":::
   
- title: Prerequisites
  durationInMinutes: 1 
  content: |
    Ensure you install the following tools and set up your development environment: 

    * [Microsoft Teams](https://teams.microsoft.com/) with valid account
    * [Latest version of Visual Studio](https://visualstudio.microsoft.com/downloads/)
    * [Latest version of .NET Core SDK](https://dotnet.microsoft.com/download).
    * [Latest version of ngrok](https://ngrok.com/download) (only for devbox testing) or any equivalent tunneling solution
   
      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).

- title: Set up local environment
  durationInMinutes: 1
  content: |  

    1. Open [BotBuilder-Samples](https://github.com/Microsoft/BotBuilder-Samples).
    1. Select **Code**.
    1. From the dropdown menu, select **Open with GitHub Desktop**.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/botbuilder-sample.png" alt-text="cloning the repository":::

    1. Select **Clone**. 

- title: Create and register your bot 
  durationInMinutes: 5
  content: |
    The following steps help you to create and register your bot in Azure portal:
    
    * Create Azure Bot resource to register bot with Azure Bot Service.
    * Create client secret to enable SSO authentication of the bot.
    * Add Teams channel to deploy the bot.
    * Use ngrok to create a tunnel to your web server's endpoints.
    * Add messaging endpoint to the ngrok tunnel you created.

    **To create Azure Bot resource**

    1. Go to the [Azure portal](https://portal.azure.com/).
    1. Select **Create a resource**.
    1. In the search box, enter **Azure bot**.
    1. Select **Enter**.
    1. Select **Azure Bot**.

       :::image type="content" source="./assets/images/azure-bot.png" alt-text="Azure bot.":::

    1. Select **Create**.
    1. Enter required bot handle name in **Bot handle**.
    1. From the **Subscription** dropdown list, select your subscription.
    1. From the **Resource group** dropdown list, select your existing resource group.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/selection-of-resource.png" alt-text="azure resource selection":::
       
         You can also create a new resource group (select **Create new** > enter resource name > select **OK**)

    1. If you've created a new resource group, select the required location from **New resource group location** dropdown list.

        :::image type="content" source="../msteams-platform/assets/images/bots/newresource.png" alt-text="selection of new resource location":::

    1. In the **Microsoft App ID** section, by default **Create new Microsoft App ID** is selected. 
    
        You can either select **Use existing app registration** and enter **Existing app ID** and **Existing app password**, or select **Create new Microsoft App ID**.

        > [!NOTE]
        > You can't create more than one bot with the same **Microsoft App ID**.

    1. Select **Type of App** as **Multi Tenant**.

    1. Select **Review + create**.

        :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/review-create.png" alt-text="creation of new bot":::   

    1. If the validation passes, select **Create**. 
    
        It takes a few moments for your bot service to be provisioned.

    1. Select **Go to resource**. 

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/deployment.png" alt-text="select resource":::
        
        Your Azure bot is created.

        :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/azure-bot-created.png" alt-text="creation of bot":::

     **To create client secret**

       Perform the following steps if you've created a new **Microsoft App ID**:

    1. In the left panel, select **Configuration**. 

       > [!TIP]
       > Save the **Microsoft App ID** or **Client ID** for future reference.

    1. Next to **Microsoft App ID**, select **Manage**.

       :::image type="content" source="~/assets/images/manage-bot-label.png" alt-text="manage bot":::

    1. In the **Client secrets** section, select **New client secret**. 

       :::image type="content" source="~/assets/images/meetings-side-panel/newclientsecret.png" alt-text="adding client secret" border="true":::

            
       The **Add a client secret** window appears.

    1. Enter **Description**.
    
    1. Select **Add**.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/add-client-secret.png" alt-text="adding client secret and description"::: 

       
    1. In the **Value** column, select **Copy to clipboard**.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/copy-value.png" alt-text="copy value to clipboard":::

             
       > [!TIP]
       > Save the **Client secrets** value or app password for future reference.

     **To add the Teams channel**

    1. Select **Home**.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/go-to-home.png" alt-text="select home":::    

       
    1. Select your bot from **Recent resources**.

    1.Select **Channels** in the left pane and select **Microsoft Teams** :::image type="icon" source="../../../../assets/images/bots/teamsicon.png":::

       :::image type="content" source="~/assets/images/adaptive-cards/channel-teams.png" alt-text="Select Teams in channels":::
      
    1. Select the checkbox to accept the **Terms of Service**.
    
    1. Select **Agree**.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/terms.png" alt-text="select terms":::

      
    1. Select **Apply**.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/apply-teams.png" alt-text="microsoft teams":::

      
    **To create tunnel for local web server**

    Use ngrok or Command Prompt to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

     ```bash
     ngrok http --host-header=localhost 3978
     ```

    > [!TIP]
    > If you encounter **ERR_NGROK_4018**, follow the steps provided in the Command Prompt to sign up and authenticate ngrok. Then run the `ngrok http --host-header=localhost 3978` command.

    **To add messaging endpoint**

       1. From ngrok, copy the HTTPS URL.
       
          :::image type="content" source="../msteams-platform/assets/images/ngrok-url.png" alt-text="ngrok HTTPS URL":::
          
          > [!NOTE]
          > The HTTPS URL in your ngrok is your fully qualified domain name.
          > The `WebAppDomain` is a fully qualified domain name that doesn't include `https://` in it.

       1.  In **Settings** for the Azure bot that you created, select **Configuration**.

       1.  In **Messaging endpoint**, use the HTTPS URL available from ngrok and at the end of the URL add **/api/messages**.

           :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/add-api-teams-bot.png" alt-text="adding api":::
        
       1. Select **Apply**.

          You have successfully set up a bot in Azure Bot Service.
   
- title: Update the Azure AD app registration
  durationInMinutes: 5
  content: |
    1. Go to the [Azure portal](https://portal.azure.com/).

    1. Select **Azure Active Directory**.

    1. From the left pane, select **App Registrations**.

    1. Select your bot.
       
       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/select-your-bot.png" alt-text="selection of bot":::

    1. Select **Expose an API**.

    1. Select **Set**.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/set-api.png" alt-text="setting api":::

    1. Set the **Application ID URI** in the form of `api://your ngrok/botid-{your AppID}`.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/app-id-uri1.png" alt-text="redirect uri":::

       The following image shows the domain name:

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/expose-api.png" alt-text="api":::

        > [!NOTE]
        > If you're using a tunneling service such as ngrok, ensure you update the value whenever your ngrok subdomain changes.
        > `For example: api://f631****.ngrok.io/92c11075-c629-4a1e-ab58-02b4fd4204c2`, where `f631****.ngrok.io` is the new ngrok subdomain name.

    1. Select **Add a scope**. 

       :::image type="content" source="../msteams-platform/assets/images/meetings-side-panel/selectscope.png" alt-text="selection of scope":::

    1. In the panel that appears, enter `access_as_user` as the **Scope name**.
  
    1. Set **Who can consent?** to `Admins and users`.
  
    1. To configure the admin and user consent prompts with appropriate values for `access_as_user` scope, provide the following information in the fields:</br>
    
         * Enter `Teams can access the user’s profile` as **Admin consent display name**.

         * Enter `Allows Teams to call the app’s web APIs as the current user` as **Admin consent description**.

         * Enter `Teams can access the user profile and make requests on the user’s behalf` as **User consent display name**.

         * Enter `Enable Teams to call this app’s APIs with the same rights as the user` as **User consent description**.
  
    1. Ensure that **State** is set to **Enabled**.
  
    1. Select **Add scope** to save.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/add-a-scope.png" alt-text="adding scope":::

        > [!NOTE]
        > The **Scope name** should match with the **Application ID** URI with `/access_as_user` appended at the end.</br>
           `api://9179****.ngrok.io/00000000-0000-0000-0000-000000000000/access_as_user`

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/access-as-user.png" alt-text="show access as user":::

    1. In the **Authorized client applications** section, identify the applications that you want to authorize for your app’s web application.

    1. Select **Add a client application**. 

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/selectclientapp.png" alt-text="client app":::

    1. Enter **Client ID**: `1fec8e78-bce4-4aaf-ab1b-5451cc387264` for Teams mobile or desktop application.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/client-id-mobile.png" alt-text="client mobile":::  
 
       You can enter **Client ID**: `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` for Teams web application.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/client-web.png" alt-text="client id web":::

       The following image displays the **Client Id**:

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/client-id-teams-bot.png" alt-text="shows ids":::   

    1. In the left panel, select **API Permissions**. 

       > [!NOTE]
       > Users need to consent to the API permissions only if the Azure Active Directory app is registered in a different tenant.

    1. Select **Add a permission**.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/add-permission.png" alt-text="permission added":::

    1. Select **Microsoft Graph**.

    1. Select **Delegated permissions**.

    1. Add **User.Read** in permission.

    1. Select **Add permissions**.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/add-permissions.png" alt-text="delegated permissions added":::

    1. From the left panel, select **Authentication** to set a redirect URI.

       > [!NOTE]
       > If an app isn't granted IT admin consent, users must provide consent the first time they use an app.

         1. Select **Add a platform**.
        
         1. Select **Web**.

            :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/configure-web.png" alt-text="web configuration"::: 

         1. Enter the redirect URI for your app by appending `auth-end` to fully qualified domain name:</br> 
           `https://your ngrok/auth-end`. </br>

         1. Enable **Implicit grant and hybrid flows** by selecting the following checkboxes:
             * **ID tokens**
             * **Access tokens**
   
         1. Select **Configure**.  

            :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/configuration-web.png" alt-text="configuration":::

      **To update **TeamsAppManifest**.

      1. Select **Manifest** from the left pane.

      1. Set the configuration item **"accessTokenAcceptedVersion":2**. If not set, change its value to `2` and select **Save**.
 
         :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/manifest-value.png" alt-text="open the manifest file":::
        
         > [!NOTE]
         > If you're already testing your bot in Teams, sign out of this app and sign out of Teams. To see this change, sign in again.

      **To set up Bot Service connection**

      1. Go to **Configuration page** > **Add OAuth Connection Settings**.

      1. Select **Add OAuth Connection Settings**.

      1. In **New Connection Setting**, enter the following details:

          * **Name** enter `name for your new connection setting. You can use the name in the settings of your bot service code`.
          * **Service Provider** select `Azure Active Directory V2`.
          * **Client ID** your `Microsoft App ID`.
          * **Client secret** `Value of the client secret ID`.
          * **Token Exchange URL** use the `Application ID URI` obtained previously while exposing API endpoint.
          * **Tenant ID** enter `common`.
          * **Scopes** enter `User.Read`.
     
      1. Select **Save**.

         :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/new-connection-setting.png" alt-text="setting new connection":::

- title: Set up app settings and manifest files
  durationInMinutes: 2
  content: |
    1. Navigate to **appsettings.json** in cloned repository.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/appsettings-file.png" alt-text="app settings manifest":::
                      
    1. Open **appsettings.json** in Visual Studio.

    1. Update the following information:

         * Set `"MicrosoftAppType"` to **MultiTenant**.
         * Set `"MicrosoftAppId"` to your bot's **Microsoft App ID**.
         * Set `"MicrosoftAppPassword"` to your bot's client secret ID value.
         * Set `"MicrosoftAppTenantId"` as blank for MultiTenant bot.

           :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/appsettings-json1.png" alt-text="appsettings file in visual studio":::
           
    1. Navigate to **manifest.json** in cloned repository.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/teams-app-manifest.png" alt-text="open manifest file":::
         
    1. Open **manifest.json** in Visual Studio and make the following changes:
    
       Replace all occurrences of `<<YOUR-MICROSOFT-APP-ID>>` with your bot's **Microsoft App ID**.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/bot-id.png" alt-text="replace bot id"::: 

- title: Build and run the service
  durationInMinutes: 2
  content: |
     **To build and run the service using Visual Studio or Command line**

     # [Visual Studio](#tab/visualstudio)

       1. Launch Visual Studio.
       
       1. Navigate to **File** > **Open** > **Project/Solution**.

           :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/VS-open-file.png" alt-text="visual studio":::      
        
       1. Select **TeamsFileUpload.csproj** file from **56.teams-file-upload** folder.

           :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/csproj-folder.png" alt-text="folder":::        

       1. Open **Solution Explorer** from **View**.

          :::image type="content" source="../msteams-platform/assets/images/Teams-task-module/solutionexplorer.png" alt-text="view":::

       1. Right-click on **TeamsFileUpload**.

       1. Select **Set as Startup Project**.
          
          :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/teams-file-upload.png" alt-text="start up project":::
          
       1. Press **F5** to run the project.
    
       1. Select **Yes** if the following dialog appears:

          :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/certificate.png" alt-text="ca":::

          
          A webpage opens with a message **Your bot is ready!**.

          :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/file-bot.png" alt-text="your bot is ready":::

       
 
     # [Command line](#tab/cli)

     Navigate to **BotBuilder-Samples > samples > csharp_dotnetcore > 50.teams-messaging-extensions-search** in Command Prompt window and enter the following command:

     ```bash
     dotnet run
     ```
   
     ![Dotnet](~/assets/images/Teams-Messaging-Extensions-Search/dotnetruncmd.png)

- title: Add file upload bot in Teams
  durationInMinutes: 2
  content: | 
     1. In your cloned repository, navigate to **csharp_dotnetcore** > **56.teams-file-upload** > **TeamsAppManifest**.

     1. Create a .zip with the following files that are present in the **TeamsAppManifest** folder: 
       * manifest.json
       * icon-outline.png
       * icon-color.png 

         :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/teams-upload-manifest.png" alt-text="manifest folder":::

      1. Go to **Microsoft Teams**.

      1. Select **Apps**.

         :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/AppStore1.png" alt-text="adding app"::: 

      1. In the lower left corner, select **Manage your apps**.

          :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/manage-apps.png" alt-text="apps":::

      1. Select **Upload a custom app**.

         :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/upload-custom-app.png" alt-text="custom apps":::

      1. Select **Open** to upload the .zip file that you created in the **TeamsAppManifest** folder.

         :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/teams-manifest.png" alt-text="manifest open"::: 

      1. Select **Add**.

         :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/add-file-bot.png" alt-text="add"::: 

       1. In the compose message area, type **hi** and wait for few seconds for it to respond with a card.

          :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/respond-bot.png" alt-text="card send by bot":::
 
- title: Interacting with the bot in Teams
  durationInMinutes: 2
  content: |
    1. Send a message to the bot. It responds with a card for the permission to upload the file.
       
       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/sbs-1.png" alt-text="bot sending card":::
    
    1. Select **Allow**. A `teams-logo.png` file is uploaded to the file directory, which is ready for download.
         
       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/sbs-2.png" alt-text="teams logo":::
    
    1. Send a file to the bot as an attachment in Teams. It responds with a message `Received and Saved`. You can view the attachment from the **Files** tab.
        
       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/sbs-3.png" alt-text="send file":::
   
    1. Send an image as an attachment. It responds with a message `Received and saved`. You can view the image on the chat window and from **Files** tab.
       
       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/sbs-4.png" alt-text="received":::
      
        > [!NOTE]
        >  After the bot is installed in the personal scope, the user enters into a one-on-one chat conversation with the bot.
      
- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?
    
    :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/output-sbs.png" alt-text="final image"::: 

- content: |
    You've completed the tutorial. Now you can upload files in Teams using bot.
 
