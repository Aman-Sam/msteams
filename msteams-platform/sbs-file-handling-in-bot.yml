### YamlMime:Tutorial
title: Teams File Upload Bot test demo
metadata:
  title: Teams Bot with Bot Framework
  description: In this tutorial, you'll learn how to upload files to Teams from a bot and how to receive a file sent to a bot as an attachment.
  audience: Developer
  level: Beginner
  ms.date: 12/09/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/how-to/authentication/auth-aad-sso-bots.md
  nextTutorialTitle: Read more on bot authentication
  ms.custom: mvc
  ms.localizationpriority: none
items:
- durationInMinutes: 1
  content: |
   This bot has been created using Bot Framework, it shows how to upload files to Teams from a bot and how to receive a file sent to a bot as an attachment. 
   It also shows how to fetch inline images sent in message.
    
    This step-by-step guide helps you to create a bot with SSO authentication enabled. You'll see the following output:

    ![Mobile signed in to bot](~/assets/images/bots/sbs-desktop-mobile.png)

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure that you install the following tools and set up your development environment:  

    * Microsoft Teams is installed and you have an account
    * [.NET Core SDK version 3.1](https://dotnet.microsoft.com/en-us/download)
    * [ngrok](https://ngrok.com/) or equivalent tunnelling solution
    * Visual Studio 2019 or the latest version

- title: Configure and run Teams file bot
  durationInMinutes: 5
  content: |
   Configure and run Teams file bot app at Microsoft Teams.

   To configure and run your Teams file bot app

    1. Open command prompt and clone a repository *git clone* https://github.com/Microsoft/botbuilder-samples.git

    2. If you are using Visual Studio
      * Open Visual Studio.
      * Select **File > Open > Project/Solution**.
      * Go to **Microsoft-Teams-Samples > samples > csharp_dotnetcore > 56.teams > file > upload ** folder.
      * Open the **Teamsfileupload.csproj** file.

    3. Run  ngrok - Point to port 3978

    ```
    ngrok http -host-header=rewrite 3978
    ```

    **To create Azure Bot resource**

    1. Go to the [Azure portal](https://portal.azure.com/).
    1. Select **Create a resource**.
    1. In the search box, enter **Azure bot** and select the Enter key.
    1. Select **Azure Bot**.

        ![Create Azure bot card](~/assets/images/bots/createazurebot.png)

    1. Select **Create**.
    1. Enter required bot handle name in **Bot handle**.
    1. From the **Subscription** dropdown list, select the subscription.
    1. From the **Resource group** dropdown list, select the resource group.
        
        To create a new resource, select **Create new**, enter resource name, select **OK**, and select required location from **New resource group location** dropdown list.

        > [!NOTE]
        > In the Microsoft App ID section, **Create new Microsoft App ID** is already selected. You can select **Use existing app registration**, enter **Existing app id**, and enter **Existing app password**.

    1. Select **Review + create**.

        <img src="~/assets/images/create-azure-bot.png" alt="Create resource Azure bot" width="500"/>

    1. If the validation passes, select **Create**.

        It takes a few moments for your bot service to be provisioned.

    1. Select **Go to resource**. The bot and the related resources are listed in the resource group.

        Now your Azure bot has been created.

        ![Azure bot resource created](~/assets/images/create-azure-bot-2.png)

    **To create client secret**

    1. In **Settings**, select **Configuration**. Save the **Microsoft App ID** (client ID) for future reference.
    1. Adjacent to **Microsoft App ID**, select **Manage**.

         ![Microsoft App ID](~/assets/images/bots/MicrosoftAppID.png)

    1. In the **Client secrets** section, select **New client secret**. The **Add a client secret** window appears.  

    1. Enter **Description** and select **Add**.
 
        <img src="~/assets/images/bots/addclientsecret.png" alt="Add client secret to app" width="500"/>

    1. In the **Value** column, select **Copy to clipboard** and save the client secret ID for future reference.

         ![Value of client secret](~/assets/images/bots/valueclientsecret.png)
       
    **To add the Microsoft Teams channel**

    1. Go to **Home**.

        <img src="~/assets/images/bots/homepage.png" alt="Home page" width="600"/>

    1. Open your bot, which is listed in the **Recent resources** section.
    1. Select **Channels** in the left pane and select **Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>.    
          ![Open Teams from channels](~/assets/images/bots/channel-teams.png)    
          ![Select Teams](~/assets/images/bots/select-teams.png)    
    1. Select **Save**.
    1. Select the checkbox to accept the terms of service and select **Agree**.</br>
          ![Terms of service](~/assets/images/bots/select-terms-of-service.png)

    **To add messaging endpoint**

    1. In **Settings** for the Azure bot that you created, select **Configuration**.
    1. Go to ngrok.
    1. Copy the HTTPS URL (https to io) as shown in the following image:

        ![ngrok HTTPS URL](~/assets/images/bots/ngrokURL.png)

    1. In **Messaging endpoint**, use the HTTPS URL available from ngrok and at the end of the URL add **/api/messages**.

        <img src="~/assets/images/bots/messagingURL.png" alt="Messaging endpoint" width="600"/>

    1. Select **Apply**.

        You have successfully set up a bot in Azure Bot Service and now you need to set up bot service connection.

- title: Interacting with the bot in Teams
  durationInMinutes: 2
  content: |
    The most comprehensive way to test your bot is by creating an app package and uploading it to Teams. This method is the only way to test the full functionality available to your bot, across all scopes. You can configure and run the Teams app by uploading the **manifest.zip** file.

    **To run the Teams app by uploading the manifest.zip file**
    
    1. In Visual Studio, go to the **appPackage/** folder.
    1. Open the **manifest.json** file.
    1. In the **manifest.json** file, find **{TODO: MicrosoftAppId}** and replace it with your Microsoft App ID.(depending on the scenario the Microsoft App Id may occur multiple times in the manifest.json)
    1. In Windows Explorer, go to the **Microsoft-Teams-Samples > samples > csharp_dotnetcore/56.teams > file > upload ** folder.
    1. Zip the contents of the **appPackage/** folder to create **manifest.zip**.
    1. Go to Teams.
    1. To upload **manifest.zip**, select **Store > Manage your apps > Upload a custom app** and open **manifest.zip**.
    1. Select **Add** to add the conversation bot to your chat.

    1. Sending a message to the bot will cause it to respond with a card that will prompt you to upload a file. The file that's being uploaded is the teams-logo.png in the Files directory in this sample.
       The Accept and Decline events illustrated in this sample are specific to Teams. You can message the bot again to receive another prompt.
        
        (image needs to be replaced)
        ![Permissions to bot](~/assets/images/bots/sbsdesktop-mobile-consent-request.png)

    1. You can send a file to the bot as an attachment in the message compose section in Teams.
       This will be delivered to the bot as a Message Activity and the code in this sample fetches and saves the file.

    1. You can also send an inline image in the message compose section. This will be present in the attachments of the Activity and requires 
       the Bot's access token to fetch the image.
        
        (image needs to be replaced)
        ![Mobile signed in to bot](~/assets/images/bots/sbs-desktop-mobile.png)

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?
    (image needs to be replaced)
    ![Mobile signed in to bot](~/assets/images/bots/sbs-desktop-mobile.png)
    
- content: |
    You've completed the tutorial to get started with SSO in a bot for Microsoft Teams using the Bot Framework.

