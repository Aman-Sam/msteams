### YamlMime:Tutorial
title: Build your first app using Blazor
metadata:
  title: Hello World with Blazor
  description: In this tutorial, you'll learn to build Hello World app with Blazor.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/get-started/get-started-overview.md
  nextTutorialTitle: Back to Get started overview
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |

    Blazor lets you build interactive web UIs using C#, instead of JavaScript. 
    
    You'll create a tab app with Blazor and the latest version of Visual Studio.

    Your app will have a capability, which comes with its own UI and UX:

    :::image type="content" source="~/assets/images/teams-toolkit-v2/blazor/your-blazor-helloworld-app.png" alt-text="Diagram showing this app has two features, Tab and Bot." border="false":::

    > [!NOTE]
    > Currently, Teams Toolkit offers templates for a Tab app with Blazor. The Message Extension capability isn't available.

- title: Prerequisites
  durationInMinutes: 1
  content: |

    Here's a list of tools you'll need for building and deploying your app.

    | &nbsp;    | Install   | For using... |
    | --- | --- | --- |
    | **Required** | &nbsp; | &nbsp; |
    | &nbsp; | [Latest version of Visual Studio](https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=enterprise&ch=pre&rel=17), **ASP.NET and web development**, or **.NET Core cross-platform development** workload | .NET. Choose Visual Studio Enterprise 2022 Preview (version 17.2.0). |
    | &nbsp; | - Visual Studio Code Extensions | •  [Azure Functions Core Tools](/azure/azure-functions/functions-run-local): Backend components locally during a local debug run. It includes the authentication helpers required when running your services in Azure. It's installed within the project directory (using the npm `devDependencies`). </br> •  [.NET SDK](/dotnet/core/install/): Customized bindings for local debugging and Azure Functions app deployments. If you have not installed the .NET 3.1 (or later) SDK globally, the portable version can be installed. |
    | &nbsp; | [ngrok](https://ngrok.com/download) | Teams app features (conversational bot) require inbound connections. You can connect your development system to Teams through a tunnel. A tunnel is not required for apps that only include tabs. This package is installed within the project directory (using npm `devDependencies`). |
    | &nbsp; | [Developer Portal for Teams](https://dev.teams.microsoft.com/) | Web-based portal to configure, manage, and distribute your Teams app including to your organization or the Teams store. |
    | &nbsp; | [Microsoft Teams](https://www.microsoft.com/en-us/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, call - all in one place. |
    | &nbsp; | [Microsoft Edge](https://www.microsoft.com/edge) (recommended) or [Google Chrome](https://www.google.com/chrome/) | A browser with developer tools. |
    | **Optional** | &nbsp; | &nbsp; |
    | &nbsp; | [Azure Tools for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack) and [Azure CLI](/cli/azure/install-azure-cli) | Azure tools to access stored data or to deploy a cloud-based backend for your Teams app in Azure. |
    | &nbsp; | [Microsoft Graph Explorer](https://developer.microsoft.com/graph/graph-explorer) | Microsoft Graph Explorer, a browser-based tool that lets you run a query from Microsoft Graph data. |
    | &nbsp; | **Visual Studio Code Extensions** | &nbsp; |
    | &nbsp; | [Azure Functions Core Tools](/azure/azure-functions/functions-run-local) | It is used to run backend components locally during a local debug run. It includes the authentication helpers required when running your services in Azure. It's installed within the project directory (using the npm `devDependencies`). |
    | &nbsp; | [.NET SDK](/dotnet/core/install/) | Customized bindings for local debugging and Azure Functions app deployments. If you have not installed the .NET 3.1 (or later) SDK globally, the portable version can be installed. |
    |

    > [!TIP]
    > If you work with Microsoft Graph data, you should learn about and bookmark the Microsoft Graph Explorer. This browser-based tool allows you to query Microsoft Graph outside of an app.
    </details>

    ## Prepare development environment

    After you've installed the required tools, set up the development environment.

    ### Install Microsoft Teams Toolkit

    The Teams Toolkit helps simplify the development process with tools to provision and deploy cloud resources for your app, publish to the Teams store, and more. 
    You can use the toolkit with Visual Studio Code, Visual Studio, or as a CLI (called `teamsfx`). 
    
    # [Latest version of Visual Studio](#tab/vs)

    You can use the latest version of Visual Studio to develop Teams apps with Blazor Server in .NET.

    To install the Microsoft Teams Toolkit extension:

    1. Download latest version of Visual Studio.
    1. Choose Microsoft Teams development tools under ASP.NET and web development workload.
    1. Select Install.
    
    > [!IMPORTANT]
    > You may now choose the Microsoft Teams development tools component in the ASP.NET web development workload in the Visual Studio Installer.

    # [Command line](#tab/cli)

    To install the TeamsFx CLI, use the `npm` package manager:

    ``` bash
    npm install -g @microsoft/teamsfx-cli
    ```

    Depending on your configuration, you may need to use `sudo` to install the CLI:

    ``` bash
    sudo npm install -g --unsafe-perm @microsoft/teamsfx-cli
    ```

    This condition is more common on Linux and macOS systems.

    Ensure you add the npm global cache to your PATH. This step is normally done as part of the Node.js installer.  

    You can use the CLI with the `teamsfx` command. Verify that the command is working by running `teamsfx -h`.

    > [!CAUTION]
    > Before you can run TeamsFx in PowerShell terminals, you must enable the "remote signed" execution policy for PowerShell.

    ---

    ## Set up your Teams development tenant

    A **tenant** is like a space, or a container for your organization in Teams, where you chat, share files, and run meetings. This space is also where you sideload and test your app. Let's verify if you're ready to develop with the tenant.

    ### Enable sideloading option

    After creating the app, you must load your app in Teams without distributing it. This process is known as sideloading. Sign in to your Microsoft 365 account to view this option.
      
    Do you already have a tenant, and do you have the admin access? Let's check if you really do!

    Verify if you can sideload apps in Teams:

    1. In the Teams client, select **Store** icon.
    1. Select **Manage your apps**.
    1. Look for the option to **Upload a custom app**. If you see the option, sideloading apps is enabled.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png" alt-text="Illustration shows the option to upload a custom app in Teams.":::

        > [!NOTE]
        > If Teams doesn't show the option to upload a custom app, talk to your Teams administrator.

    ### Create a free Teams developer tenant (optional)

    If you don't have a Teams developer account, you can get it free. Join the Microsoft 365 developer program!

    1. Go to the [Microsoft 365 developer program](https://developer.microsoft.com/microsoft-365/dev-program).
    1. Select **Join Now** and follow the onscreen instructions.
    1. In the welcome screen, select **Set up E5 subscription**.
    1. Set up your administrator account. After you finish, the following screen appears.

        :::image type="content" source="../msteams-platform/assets/images/build-your-first-app/dev-program-subscription.png" alt-text="Example of what you see after signing up for the Microsoft 365 developer program.":::

    1. Sign in to Teams using the administrator account you just set up. Verify that you have the **Upload a custom app** option in Teams.

    ## Get a free Azure account

    If you wish to host your app or access resources in Azure, you must have an Azure subscription. [Create a free account](https://azure.microsoft.com/free/) before you begin.

    Now you've got all tools and set up your accounts. Next, let's set up your development environment and start building!

- title: Create project workspace for your tab app
  durationInMinutes: 1
  content: |
    Start Teams app development by creating your first app. This app uses the Tab capability.
    
    :::image type="content" source="~/assets/images/teams-toolkit-v2/first-tab/your-helloworld-app-tab.png" alt-text="Diagram showing this app has one feature. Tab is highlighted." border="false":::    

    This tutorial walks you through the steps to create, run, and deploy your first Teams app using .NET/Blazor.

    In this section, you'll learn:
    
    1. [How to set up a new tab project with Teams Toolkit](#create-your-project)
    1. [About the directory structure of your app](#take-a-tour-of-the-source-code)

    ## Create your project

    Use Teams Toolkit to create your first project. The toolkit takes you through a series of pages to create and configure your Teams app project:

    1. **Creating a new project** page: You select the project type.
    1. **Configure your new project** page: You enter the project details.
    1. **Create a new Teams application** page: You select the Teams app capabilities and the Microsoft 365 credentials.

    **To create your tab project workspace**

    1. Open the latest version of Visual Studio.

    1. Select **Create a new project**.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/blazor/vs-select-project.png" alt-text="Illustration shows the option to create a new project." border="false":::

        The **Create a new project** page appears.

    1. Select the project details.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/blazor/vs-select-teams-app.png" alt-text="Illustration shows the option to select a template." border="false":::

          Select the project type:

          1. Select **Microsoft Teams** from **All platforms** dropdown list.  
        
          1. Select **Microsoft Teams App** as the template.

          1. Select **Next**.
        
          The **Configure your new project** page appears.

    1.  Configure the new project details.     

          :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/blazor/vs-configure-project.png" alt-text="Illustration shows the options to configure new project." border="false":::

          Select the following project configuration:

          1. Enter a suitable name for your project.

              > [!NOTE] 
              > You'll note that the project name you enter is automatically filled in as the **Solution name** also. If you want, you can change the solution name with no affect on project name.

          1. Select the folder path where you want to create the project workspace.

          1. Enter a different solution name, if you want.

          1. Check the option to save the project and solution in the same folder, if you want. For this tutorial, you don't need this option.

          1. Select **Create**.

          The **Create a new Teams application** page appears.  

    1.  Select Teams app feature.       

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/blazor/vs-create-teams-tab-app.png" alt-text="Illustration shows the options to configure new project." border="false":::

        Select app feature and Microsoft 365 details: 

        1. Select the **Tab app** as the capability for your app.

        1. Ensure that the correct Microsoft 365 account is selected for registering your app with Developer Portal. 

        1. Select **Create**.

        Your Teams app is created in a few seconds.
        
        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/blazor/vs-tab-app.png" alt-text="Illustration shows the app project created in the Visual Studio." border="false":::

    <details>
    <summary>A quick recap of creating a Teams app.</summary>
    Watch this short recap for creating a Teams app.

    ![Create a Teams app](~/assets/videos/blazor-tab-app.gif)
    </details>

    ## Take a tour of the source code

    After project creation, you have the components to build a basic personal app. You can view the project directory structure in the **Solution Explorer** area of the latest Visual Studio.

    :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/blazor/blazor-app-solution-explorer.png" alt-text="Screenshot showing app project files for a personal app in the latest Visual Studio." border="false":::

    Teams Toolkit creates a scaffolding for your project based on the capabilities you selected. Among other files, Teams Toolkit maintains:

    | Folder name | Contents |
    | --- | --- |
    | App icons | The app icons are stored as PNG files in `color.png` and `outline.png`. |
    | Properties/`manifest.json` | The app manifest for publishing through the Developer Portal for Teams is stored in `Properties/manifest.json`. |
    | Controllers/`BackendController.cs` | A backend controller is provided in `Controllers/BackendController.cs` for assisting with authentication. |
    | `Pages/Tab.razor` | The app manifest for publishing through the Developer Portal for Teams is stored in `Properties/manifest.json`. |
    | `TeamsFx.cs` and `JS/src/index.js` | The content is used for initializing communications with the Teams host. |
    |

    You can add backend functionality by adding other ASP.NET Core controllers to your application.

- title: Build and run your first Teams tab app locally
  durationInMinutes: 1
  content: |
    After you set up your project workspace with Teams Toolkit, build your tab project.

    To build and run your app locally:

    1. Open the latest version of Visual Studio.
    1. Select **Debug** > **Start Debugging** or select **F5** to run your app in debug mode.
        <!-- markdownlint-disable MD033 -->
        <details>
        <summary>Learn what happens when you run your app locally in the debugger.</summary>

        When you select **F5**, the Teams Toolkit:

        1. Registers your application with Azure Active Directory.
        1. Registers your application for "sideloading" in Teams.
        1. Starts your application backend running locally.
        1. Starts your application front-end hosted locally.
        1. Starts Teams in a web browser with a command to instruct Teams to side load the application (the URL is registered inside the application manifest).

        </details>
    1. Install the self-signed SSL certificate for local debugging, if requested.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/ssl-prompt.png" alt-text="Screenshot showing how the prompt to install an SSL certificate to enable Teams to load your application from localhost.":::

        Teams is loaded in a web browser.
    1. Select **Add**, when prompted to install the app to Teams.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/blazor/blazor-add-app.png" alt-text="Screenshot showing how to add app to Teams web client.":::

        Your app will now be displayed:

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/blazor/blazor-tab-app.png" alt-text="Screenshot of the completed app":::

    1. Move through the page to view the user details.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/blazor/authorize-user-info.png" alt-text="Screenshot of the Authorize button to access user information":::

    1. Select **Authorize** to let your app retrieve user details using Microsoft Graph.

        The app requests permission to grant access for displaying user details.    

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/blazor/ms-graph-permission.png" alt-text="Screenshot showing how to accept permission to access user information":::

    1. Select **Accept** to let your app access user details.

        Your photograph and details appear in your personal tabs.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/blazor/tab-user-info.png" alt-text="Screenshot showing user information in the tab":::


        You can do normal debugging activities, such as setting breakpoints, as if it were any other web application. The app supports hot reloading.  If you change any file within the project, the page will be reloaded.

    <!-- markdownlint-disable MD033 -->
    <details>
    <summary>Learn how to troubleshoot if your app doesn't run locally.</summary>

    To run your app in Teams, you need a Microsoft 365 development account that allows app sideloading. You can learn more about it in the Prerequisites section.
    </details>

- title: Provision, Deploy, and Preview your first Teams tab app
  durationInMinutes: 1
  content: |

    You've learned to create, build, and run Teams app with Tab capability. The final step is to deploy your app on Azure and Preview on Teams.

    Let's deploy the first app with Tab capability on Azure using Teams Toolkit.

 
    1. From **Project**, navigate to **Teams Toolkit**, then select **Provision in the Cloud**

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/blazor/vs-build-provision.png" alt-text="Select the provision operation for the project" border="false":::

    1. Select the required subscription.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/blazor/select-subscription.png" alt-text="Select the subscription operation for the project" border="false":::

    1. The resource group is generated in Azure portal.

    1. From **Project**, navigate to **Teams Toolkit**, then select **Deploy to the Cloud**

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/blazor/vs-build-deploytocloud.png" alt-text="Select Azure as the publishing target" border="false":::

    1. After you complete the provision and deployment steps, select **Project**, navigate to **Teams Toolkit**, then  select **Preview Teams app**

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/blazor/vs-build-preview.png" alt-text="Select Azure App Service as the publishing target" border="false":::

     1. Select **Add**, when prompted to install the app to Teams.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/blazor/blazor-add-app1.png" alt-text="Screenshot showing how to add app to Teams web client.":::

        Your app will now be displayed:

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/blazor/blazor-tab-app-azure.png" alt-text="Screenshot of the completed app":::

    1. Move through the page to view the user details.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/blazor/authorize-azure.png" alt-text="Screenshot of the Authorize button to access user information":::

    1. Select **Authorize** to let your app retrieve user details using Microsoft Graph.

        The app requests permission to grant access for displaying user details.    

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/blazor/ms-graph-permission.png" alt-text="Screenshot showing how to accept permission to access user information":::

    1. Select **Accept** to let your app access user details.

        Your photograph and details appear in your personal tabs.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/blazor/tab-user-info.png" alt-text="Screenshot showing user information in the tab":::

