### YamlMime:Tutorial
title: Build your first message extension app using JavaScript
metadata:
  title: Hello World with JavaScript
  description: In this tutorial, you can learn to build Hello World app with JavaScript by setting up a new project with Teams Toolkit, build and deploy message extension app.
  audience: Developer
  level: Beginner
  ms.date: 05/26/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/get-started/get-started-overview.md
  nextTutorialTitle: Back to Get started overview
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |

   Start Microsoft Teams app development with your first Teams app using JavaScript.

   In this tutorial, you'll learn:

   - How to set up a new project with Teams Toolkit.
   - How to build a message extension app.
   - How to deploy your app.
   
   This step-by-step guide helps you to build a message extension Teams app with Teams Toolkit in Visual Studio Code. You'll see the following output after you complete this guide:

     :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2//first-msgext/app-added-mex-local-debug.png" alt-text="Screenshot shows that custom app uploaded in Teams." lightbox="../msteams-platform/assets/images/teams-toolkit-v2//first-msgext/app-added-mex-local-debug.png":::

- title: Prerequisites
  durationInMinutes: 1
  content: |

   Ensure you install the following tools for building and deploying your apps.

   | &nbsp; | Install | For using... |
   | --- | --- | --- |
   | **Required** | &nbsp; | &nbsp; |
   | &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript or TypeScript build environments. Use the latest version. |
   | &nbsp; | [Teams Toolkit](#install-teams-toolkit) | Microsoft Visual Studio Code extension that creates a project scaffolding for your app. Use the latest version.|
   | &nbsp; | [Node.js](https://nodejs.org/en/download/) | Backend JavaScript runtime environment. For more information, see [Node.js version compatibility table](~/toolkit/build-environments.md#nodejs-version-compatibility-table-for-project-type).|
   | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Collaborate with people you work with through apps for chats, meetings, and calls in one place.|
   | &nbsp; | [Microsoft&nbsp;Edge](https://www.microsoft.com/edge) (recommended) or [Google Chrome](https://www.google.com/chrome/) | A browser with developer tools essential for debugging and testing. |
   | &nbsp; | [Microsoft 365 developer account](/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | Access to Teams account with appropriate permissions to install a custom app. |
   | **Optional** | &nbsp; | &nbsp; |
   | &nbsp; | [Azure Tools for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack) and [Azure CLI](/cli/azure/install-azure-cli) | Azure tools to access stored data or to deploy a cloud-based backend for your Teams app in Azure. |
   | &nbsp; | [React Developer Tools for Chrome](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi) OR [React Developer Tools for Microsoft&nbsp;Edge](https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil) | A browser DevTools extension for the open-source React JavaScript library. |
   | &nbsp; | [Microsoft Graph Explorer](https://developer.microsoft.com/graph/graph-explorer) | A browser-based tool that lets you run a query from Microsoft Graph data. |
   | &nbsp; | [Developer Portal for Teams](https://dev.teams.microsoft.com/) | Web-based portal to configure, manage, and distribute your Teams apps in your organization or the Microsoft Teams Store. |


   > [!TIP]
   > If you work with Microsoft Graph data, you should learn about and bookmark the Microsoft Graph Explorer. This browser-based tool allows you to query Microsoft Graph outside of an app.

   [!INCLUDE [Set up prerequisites](includes/get-started/prepare-teams-toolkit.md)]

   ## Get a free Azure account

   If you want to host your app or access resources in Azure, you must have an Azure subscription. [Create a free account](https://azure.microsoft.com/free/) before you begin.

   Next, let's set up your development environment and build your first message extension app.

- title: Create project workspace for your message extension app
  durationInMinutes: 1
  content: |

   Now, let's create your first message extension app.

   The message extension capability lets you interact with a web service through buttons and forms. Use the message compose area, command box, or a message directly in Teams client to search and initiate actions in an external system. Message extensions rely on bots to provide a dialog between the user and your code.

      :::image type="content" source="~/assets/images/teams-toolkit-v2/first-msgext/your-helloworld-app-msgext.png" alt-text="Diagram showing this app has three features. message extension is highlighted.":::

   There are two types of Teams message extensions:

   - [Search commands](../msteams-platform/messaging-extensions/how-to/search-commands/define-search-command.md): You can search external systems and insert the results into a message in the form of a card.
   - [Action commands](../msteams-platform/messaging-extensions/how-to/action-commands/define-action-command.md): You can present your users with a modal pop-up to collect or display information. Then, you can process their interaction and send the information back to Teams.

   Let's create a message extension app with a search command. First, set up a new Teams project for creating the message extension app.

   In this tutorial, you'll learn:

   1. [How to set up a new message extension project with Teams Toolkit.](#create-your-message-extension-project-workspace)
   1. [About the directory structure of your app project.](#take-a-tour-of-the-message-extension-app-source-code)

   ## Create your message extension project workspace

   If the prerequisites are in place, let's begin!

   > [!NOTE]
   > The Visual Studio Code UI shown may differ for you depending on your operating system, Toolkit version, theme, and environment.

   # [Visual Studio Code](#tab/vsc)

   1. Open Visual Studio Code.
    
   1. Select the Teams Toolkit :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon in the Visual Studio Code activity bar.

   1. Select **Create a New App**.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/create-project.png" alt-text="Screen shows the location of the Create New Project link in the Teams Toolkit sidebar.":::

   1. Select **Message Extension**.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/create-new-app1.png" alt-text="Screenshot shows the Wizard start for Create New Project.":::

   1. Select **Custom Search Result**.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/select-capabilities-mex1.png" alt-text="Screenshot showing how to add capabilities to your new app.":::

   1. Select **Start with a Bot**.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/select-architecture-mex.png" alt-text="Screenshot shows the options for the architecture of the the message extension.":::

   1. Select **JavaScript**.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/select-language-tab.png" alt-text="Screenshot showing how to select the programming language.":::

   1. Select **Default folder** to store your project root folder in default location.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/select-default-location.png" alt-text="Screenshot shows the selection of default location.":::

        You can also change the default location by the following steps:

        1. Select **Browse**.

            :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/select-browse.png" alt-text="Screenshot shows the selection of browse location option.":::
            
        1. Select the location for project workspace.

        1. Select **Select Folder**.

            :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/select-folder.png" alt-text="Screenshot showing how to select the folder.":::

    1. Enter a suitable name for your app. Select **Enter**.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/enter-project-name.png" alt-text="Screenshot showing how to enter the app name.":::

        Teams Toolkit creates the app in a few seconds.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/app-created-mex.png" alt-text="Screenshot showing the app created." lightbox="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/app-created-mex.png":::

        After your app is created, Teams Toolkit displays the following message: 

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/preview-project-msg.png" alt-text="Screenshot shows the localdebug.":::

   # [Command line](#tab/cli)

   Use the `teamsfx` CLI to create your first project.
    
   1. Go to the folder where you want to create the project folder and open Command Prompt.

   1. Enter the following command to create a new Teams app:

        ``` bash
        teamsfx new
        ```

   CLI provides you with a series of options to choose from. Use arrow keys to select an option. After you make the choice, select Enter to confirm.

       1. Select **Message Extension** for **New Project**.
       1. Select **Custom Search Results** for **App Features Using a Message Extension**.
       1. Select **Start with a Bot** for **Architecture of Search Based Message Extension**.
       1. Select **JavaScript** for **Programming Language**.
       1. Select **Enter** to select the default workspace folder for your app.
       1. Enter a suitable name for your app. The name of the app must consist only of alphanumeric characters.

    CLI creates the project after you answer all the questions.

   ---

   ## Take a tour of the message extension app source code

   A message extension uses Bot Framework. You use it to interact with your service through a conversation. After scaffolding, view the project directories and files in EXPLORER.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/first-msgext/folder-structure-mex-app.png" alt-text="Screenshot shows the folder msg.":::

   | Folder / File | Contents |
   | --- | --- |
   | `teamsapp.yml` | Main project file describes your application configuration and defines the set of actions to run in each lifecycle stages. |
   | `teamsapp.local.yml` | This overrides `teamsapp.yml` with actions that enable local execution and debugging. |
   | `.vscode/` | VSCode files for local debug. |
   | `appPackage/` | Templates for the Teams application manifest. |
   | `infra/` | Templates for provisioning Azure resources. |
   | `index.js` | Application entry point and `restify` handler. |

   > [!Tip]
   > Familiarize yourself with bots and message extension outside of Teams before you integrate your app within Teams.

- title: Build and run your first message extension app
  durationInMinutes: 1
  content: |

   After you set up your project workspace with Teams Toolkit, it's time to build your project. You need to sign in to your Microsoft 365 account.

   ## Sign in to your Microsoft 365 account

   If you're using a Microsoft 365 developer program tenant, the admin account you set up while registering is your Microsoft 365 account.

   # [Visual Studio Code](#tab/vcode)

   1. Open Visual Studio Code.
    
   1. Select the Teams Toolkit  :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon in the activity bar.
 
   1. Select **Sign in to Microsoft 365** using your credentials. Your default web browser opens to let you sign in to the account.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/ttk-sign-in-m365-v4.png" alt-text="Screenshot shows where to sign in to Microsoft 365 and Azure.":::

   1. Close the browser after signing in using your credentials. Return to Teams Toolkit for Visual Studio Code.

   1. Return to Teams Toolkit within Visual Studio Code.

   The **ACCOUNTS** section of the sidebar shows your Microsoft 365 account name. If custom app upload is enabled for your Microsoft 365 account, Teams Toolkit displays **Sideloading enabled**.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-tab/m365-sideloading-enabled-msg.png" alt-text="Screenshot shows the user signed in to Microsoft 365 and the sideloading enabled message.":::

        Now you're ready to build the app and run it locally!

   # [Command line](#tab/cline)

   1. Go to the project folder of your message extension app and open Command Prompt.

   1. Sign in to Microsoft 365 with the following TeamsFx CLI command:

        ``` bash
        teamsfx account login m365
        ```

        Your default web browser opens to let you sign in to the account. Sign in to your Azure account using your credentials. Close the browser when you're prompted.

   ---

   ## Build and run your app in the local environment

   Now you can build and debug your first Teams message extension app locally. 
    
   ### Build and run your app locally

   1. Select the **F5** key in Visual Studio Code to run your application in debug mode.

        > [!NOTE]
        > If Teams Toolkit is unable to check a particular prerequisite, it prompts you to check.

        <!-- markdownlint-disable MD033 -->
        <details>
        <summary>Learn what happens when you run your app locally in the debugger.</summary>

        When you select **F5**, the Teams Toolkit:

        1. Checks all the following prerequisites:
          - You're signed in with a Microsoft 365 account.
          - Custom app upload is enabled for your Microsoft 365 account.
          - Supported Node.js version is installed.
          - Port required by bot app is available.

        2. Installs npm packages
        3. Starts Dev Tunnel to create an HTTP tunnel.
        4. Registers the app in Microsoft Entra ID and configures the app.
        5. Registers the bot app in Bot Framework and configures the app.
        6. Registers the app in Teams Developer Portal and configures the app.
        7. Starts the message extension app hosted locally.
        8. Starts Teams in a web browser and uploads the Teams app.
        
        </details>

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/f5-build-and-run-mex.png" alt-text="Screenshot shows the debug process of the message extension app." lightbox="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/f5-build-and-run-mex.png":::

        > [!NOTE]
        > When you run the app for the first time, Teams downloads the dependencies and builds the app. A browser window opens when the build is complete. This process can take three to five minutes to complete.

        Teams runs your app in a web browser.
        
   1. Sign in with your Microsoft 365 account, if prompted.

   1. Select **Add**.
    
        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/add-mex-app-local-debug-latest.png" alt-text="Screenshot shows the option to add the custom app in Teams." lightbox="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/add-mex-app-local-debug.png":::

        The message extension app is loaded in a chat bot app.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2//first-msgext/app-added-mex-local-debug.png" alt-text="Screenshot shows that custom app uploaded in Teams." lightbox="../msteams-platform/assets/images/teams-toolkit-v2//first-msgext/app-added-mex-local-debug.png":::

        As message extension apps rely on bots for enabling communication between the user and the web service, your app loads in to a chat feature of a bot.

        - If you created a bot app before you created the message extension app, it loads in the bot app you created. Previous chat messages of the bot app are visible.
        - If you created a message extension first, your app is loaded in the most recent chat that is open on Teams.

        > [!NOTE]
        > You can extend your app to Outlook and Microsoft 365. In Visual Studio Code, under **RUN AND DEBUG** dropdown in Visual Studio Code.

    ### Test your app

    The first time your app loads, the message extension app is open for you to test. This sample app lets you search open-source npm packages from the software registry.
    
    #### To run a search query

    1. Let's enter a search string in the search box, such as "cli". You'll get a list of the matching items:

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2//first-msgext/mex-search-string.png" alt-text="Screenshot shows how to use the app for search.":::

    1. Select one from the search results. It will be displayed in the compose area so you can send the result to the channel.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-search-result.png" alt-text="Screenshot shows the search result.":::

    1. Select the **Send** instructions.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-search-sent.png" alt-text="Screenshot shows the search result sent on chat.":::
    
        Now, you've learned how to build and run a basic message extension app!         

    ## Optional scenarios

    You've tested the search feature of a basic message extension app. Now, you can try out some other functionalities of this app. These are optional scenarios in this app.
    <br>
    <br>
    <details>
    <summary>To create a card</summary>

    1. Select **Create Card**.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/app-added-mex-local-debug.png" alt-text="Screenshot shows how to create a card." lightbox="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/app-added-mex-local-debug.png":::

    1. Enter the card details as shown, and select **Submit**.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-card-details.png" alt-text="Screenshot shows how to add the card details.":::

        Your card details appear in the compose area.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-card-added.png" alt-text="Screenshot shows how to add the card details." lightbox="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-card-added.png":::

    1. Select the **Send** icon from the compose area.

        The app sends the card on the bot chat.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-card-sent.png" alt-text="Screenshot shows that the card is sent." lightbox="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-card-sent.png":::
    </details>
    <br>
    <details>
    <summary>To open your app from compose area</summary>

    Choose one of the following ways to open your app.
    
    * **Using `@mention`:**
    
    1. Enter `@your-app-name` in the command area of your app.
        
        The app opens the search box and you can use it to run a query.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mention-mex-app.png" alt-text="Screenshot shows how to @mention the message extension app.":::

    1. Enter a search string, and select one from the search result.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/command-box-search.png" alt-text="Screenshot shows how to run a search using the message extension app.":::

        It displays in the command area as a card.

    1. Copy the card to paste it in the compose area.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/command-search-card.png" alt-text="Screenshot shows the search result in a card.":::
        
    1. Send the card using the compose area.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/command-search-card-sent.png" alt-text="Screenshot shows the search result in a chat.":::

    * **Using three-dot icon:**
    
    1. Launch the message extension from three dots at the bottom of the composing area.
    1. Select your message extension app.       

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/three-dot-mex.png" alt-text="Screenshot shows how to open the sample message extension app.":::

        The message extension app loads with the options to run a search and create adaptive cards.
    </details>
    <br>
    <details>
    <summary>Run the app from uploaded custom apps</summary>

    You can open an uploaded Teams app from the list of uploaded custom apps. 

    1. Select the **Store** icon from the Teams sidebar.
    1. Select the **Manage apps**.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/sideloaded-apps.png" alt-text="Screenshot shows the custom uploaded apps.":::

    1. Select the three dots icon for your app, and then select **View details**. You can also copy link to the app and use it to open the app.
    1. Select **Open** to load the app, and then select **Try it**. 
        
        The app loads in Teams.

    </details>
    <br>
    <!-- markdownlint-disable MD033 -->
    <details>
    <summary>Learn how to troubleshoot if your app doesn't run locally.</summary>

    To run your app in Teams, you must have a Microsoft 365 development account that allows custom app upload. You can learn more about custom app upload in the Prerequisites section.
    </details>

- title: Deploy your first Teams app
  durationInMinutes: 1
  content: |

    You've learned to create, build, and run Teams app with Message Extension capabilities. The final step is to deploy your app on Azure.

    Let's deploy the first message extension app on Azure using Teams Toolkit.

    ## Sign in to your Azure account

    Use this account to access the Microsoft Azure portal and to provision new cloud resources to support your app.

    # [Visual Studio Code](#tab/viscode)

    1. Open Visual Studio Code.
    1. Open the project folder in which you created the message extension app.
    1. Select the Teams Toolkit  :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon in the sidebar.
    1. Select **Sign in to Azure** using your credentials.

        > [!TIP]
        > If you have the AZURE ACCOUNT extension installed and are using the same account, you can skip this step. Use the same account as you're using in other extensions.

        Your default web browser opens to let you sign in to the account.
    1. Close the browser when prompted and return to Visual Studio Code.

        The **ACCOUNTS** section of the sidebar shows the two accounts separately. It also lists the number of usable Azure subscriptions available to you. Ensure you have at least one usable Azure subscription available. If not, sign out and use a different account.

        Congratulations, you have signed in your Azure account! 
        Now let's go ahead and learn how to deploy one of the apps to Azure using the Teams Toolkit.

    # [Command line](#tab/cline)

    1. Sign in to Microsoft 365 with the TeamsFx CLI:

        ``` bash
        teamsfx account login m365
        ```

        Your default web browser opens to let you sign in to the account. Sign in to your Azure account using your credentials. Close the browser when you're prompted.

    2. Sign in to Azure with the TeamsFx CLI:

        ``` bash
        teamsfx account login azure
        ```

        Your default web browser opens to let you sign in to the account. Sign in to your Azure account using your credentials. Close the browser when you're prompted.

        The account logins are shared between Visual Studio Code and the TeamsFx CLI.

        Congratulations, you have created a Teams app! 
        Now let's go ahead and learn how to deploy one of the apps to Azure using the Teams Toolkit.

    ---

      [!INCLUDE [Provision and Deploy your app on Azure](~/includes/get-started/azure-provisioning-instructions.md)]

      <!-- markdownlint-disable MD033 -->
      <details>
      <summary>Learn what happens when you deployed your app to Azure</summary>

      Before deployment, the application has been running locally:

      * The backend runs using **Azure Functions Core Tools**.
      * The application HTTP endpoint, where Microsoft Teams loads the application, runs locally.

      Deployment is a two-step process. You provision the resources on an active Azure subscription, and then deploy or upload the backend and frontend code for the application to Azure.

      * The backend, if configured, uses various Azure services, including Azure App Service and Azure Storage.
      * The frontend application is deployed to an Azure Storage account configured for static web hosting.

      </details>

- title: Congratulations!
  durationInMinutes: 1
  content: |

    You've done it!

    You've created a message extension app.

    Now that you've learned to create a basic app, you can move on to creating more complex apps. Follow the procedures to build and deploy the app, and your app has multiple capabilities. 

    You've completed the tutorial to build message extension app with JavaScript.
    
