### YamlMime:Tutorial
title: Teams App Test Tool
metadata:
  title: Teams App Test Tool
  description: With this learning module, you learn how to emulate the Teams experience for your bot in Teams App Test Tool.
  audience: Developer
  level: Advanced
  ms.date: 10/21/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: toolkit/debug-your-teams-app-test-tool.md
  nextTutorialTitle: Teams App Test Tool
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    > [!NOTE]
    >
    > Teams App Test Tool is available in the latest prerelease version of the Teams Toolkit. 
    
    Start Microsoft Teams app development with your first Teams app. 
    You can create a bot app with Teams using Javascript. 

    This step-by-step guide helps you to build AI chat bot with Teams Toolkit. You'll see the following output after you've completed this guide, where the user can access and use the AI chat bot:

    :::image type="content" source="~/assets/images/teams-toolkit-v2/debug/test-tool.png" lightbox="~/assets/images/teams-toolkit-v2/debug/test-tool.png" alt-text="Screenshot shows the bot open in Test Tool.":::
    
- title: Prerequisites
  durationInMinutes: 1
  content: |
   Ensure you install the following tools for building and deploying your apps.

   | Install | For using... |
   | --- | --- |
   | [Visual Studio Code](https://code.visualstudio.com/download) or  [Visual Studio](https://visualstudio.microsoft.com/downloads/) | JavaScript, TypeScript, or CSharp build environments. Use the latest version. |
   | [Teams Toolkit](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension) | Microsoft Visual Studio Code extension that creates a project scaffolding for your app. Use the latest version.|
   | [Node.js](https://nodejs.org/en/download/) | Back-end JavaScript runtime environment. For more information, see [Node.js version compatibility table for project type](~/toolkit/build-environments.md#nodejs-version-compatibility-table-for-project-type).|
   | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, and call-all in one place.|
   | [OpenAI](https://openai.com/api/) or  [Azure OpenAI](https://oai.azure.com/portal)| First create your OpenAI API key to use OpenAI's GPT. If you want to host your app or access resources in Azure, you must create an Azure OpenAI service.|
   | [Microsoft&nbsp;Edge](https://www.microsoft.com/edge) (recommended) or [Google Chrome](https://www.google.com/chrome/) | A browser with developer tools. |

   ## Prepare development environment

   After you've installed the required tools, set up the development environment.

   ### Install the Teams Toolkit

   The Teams Toolkit helps simplify the development process with tools to provision and deploy cloud resources for your app, publish to the Teams store, and more. 
    
   You can use the toolkit with Visual Studio Code, or CLI (command-line interface), called `TeamsFx`.

    # [Visual Studio Code](#tab/vscode)

    1. Open Visual Studio Code and select the **Extensions** view (**Ctrl+Shift+X** / **⌘⇧-X** or **View > Extensions**).

    1. In the search box, enter **Teams Toolkit**.

    1. Select **Install** next to the Teams Toolkit.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/install-toolkit-vscodeversion.png" alt-text="Illustration shows the Teams Toolkit extension installation." lightbox="~/assets\images\teams-toolkit-v2\prerequisites\install-toolkit-vscodeversion-1.png":::

        The Teams Toolkit  :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon appears in the Visual Studio Code **Activity Bar** after it's installed.

        You can also find the Teams Toolkit on the [Visual Studio Code Marketplace](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension).

    # [Command line](#tab/cli)

    To install the TeamsFx CLI, use the `npm` package manager:
    ``` bash
    npm install -g @microsoft/teamsfx-cli
    ```
    Depending on your configuration, you may need to use `sudo` to install the CLI:
    ``` bash
    sudo npm install -g --unsafe-perm @microsoft/teamsfx-cli
    ```
    This condition is more common on Linux and macOS systems.
    Ensure you add the npm global cache to your PATH. This step is normally done as part of the Node.js installer.  
    You can use the CLI with the `teamsfx` command. Verify that the command is working by running `teamsfx -h`.

    > [!CAUTION]
    >
    > Before you can run TeamsFx in PowerShell terminals, you must enable the remote signed execution policy for PowerShell.

    ---
   
- title: Create project workspace for your AI chat bot app
  durationInMinutes: 1
  content: |

    Let's create your first bot app.
    
    The bot capability of a Teams app creates a chatbot or a conversational bot. You use it to run simple and automated tasks, for example, providing customer service. A bot talks with a web service and helps you use its offerings. You can get weather forecast, make reservations, or any other service offered using a conversational bot.
    :::image type="content" source="~/assets/images/teams-toolkit-v2/first-bot/your-helloworld-app-bot.png" alt-text="Diagram showing this app has three features. Bot is highlighted.":::
    
    As you've already prepared for creating these apps, you can set up a new Teams project for creating the bot app.
    In this tutorial, you'll learn:
    1. [How to set up a new bot project with Teams Toolkit.](#create-your-bot-project-workspace)
    1. [About the directory structure of your app project.](#take-a-tour-of-the-bot-app-source-code)

    > [!IMPORTANT]
    > Bots are available in [Government Community Cloud (GCC), GCC-High, and Department of Defense (DOD)](~/concepts/app-fundamentals-overview.md#government-community-cloud) environments.

    ## Create your bot project workspace

    If the prerequisites are in place, let's begin!

    # [Visual Studio Code](#tab/vsc)

    1. Open Visual Studio Code.

    1. Select the Teams Toolkit :::image type="icon" source="~/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.PNG" border="false"::: icon in the Visual Studio Code **Activity Bar**.

    1. Select **Create a New App**.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/create-project.png" alt-text="Screenshot shows the location of the Create New Project link in the Teams Toolkit sidebar.":::

    1. Select **Bot**.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/first-bot/create-new-app1.png" alt-text="Screenshot shows the Teams Toolkit app templates.":::

    1. Select **AI Chat Bot**. If you need a different functionality for your bot, pick a different option.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/debug/ai-chat-bot.png" alt-text="Screenshot shows the app feature to add to your new app.":::

    1. Select **JavaScript**.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/first-bot/select-language-tab.png" alt-text="Screenshot shows the option to select the programming language.":::

    1. Select **Default folder**.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/first-bot/select-default-location.png" alt-text="Screenshot shows the selection of default location.":::

        To change the default location, follow these steps:

        1. Select **Browse**.

            :::image type="content" source="~/assets/images/teams-toolkit-v2/first-bot/select-browse.png" alt-text="Screenshot shows the selection of browse location option.":::

        1. Select the location for the project workspace.
        1. Select **Select Folder**.

            :::image type="content" source="~/assets/images/teams-toolkit-v2/select-folder.png" alt-text="Screenshot shows the folder to select.":::

        1. Enter a suitable name for your app and then select the **Enter** key.

            :::image type="content" source="~/assets/images/teams-toolkit-v2/first-bot/hello-bot.png" alt-text="Screenshot shows where to enter the app name.":::

            A dialog appears, where you need to choose yes or no to trust the authors of the files in this folder.

            :::image type="content" source="~/assets/images/teams-toolkit-v2/first-bot/vsc-trust-authors.png" alt-text="Screenshot shows the dialog to trust or not the authors of the files in this folder.":::

    # [Command line](#tab/cli)

    Use the `teamsfx` CLI to create your first project. Start from the folder where you want to create the project folder.

    ``` bash
    teamsfx new
    ```

    You can use the CLI to create a new Teams app. The CLI leads you through a series of questions. Every question includes an instruction on answering it.

    For example, use arrow keys to select an option. After you make the choice, select **Enter** to confirm it.

    1. Select **Create a new Teams app**.

    1. Select **Bot** and deselect **Tab**.

    1. Select **JavaScript** as the programming language.

    1. Select **Enter** to select the default workspace folder.

    1. Enter a suitable name for your app, like `HelloBot`. The name of the app must consist only of alphanumeric characters.

    After you've answered all questions, your project is created.

    ---

    ## Take a tour of the bot app source code

    After scaffolding is done, view the project directories and files in the Explorer area of Visual Studio Code.
    
    :::image type="content" source="../msteams-platform/assets/images/test-tool/source-code.png" alt-text="Screenshot shows the Teams Toolkit sample bot folder Structure.":::
    
    | Folder name | Contents |
    | --- | --- |
    | `env/.env.testtool.user` |Configuration file for local environment used by `teamsapp.testtool.yml` to customize the provisioning and deployment rules.  |
    | `appPackage` | App manifest template files and app icons (color.png and outline.png). |
    | `appPackage/manifest.json` | App manifest for running the app in local and remote environment.  |
    | `teamsapp.yml` |	This is the main Teams Toolkit project that defines properties and configuration stage definitions. |
    | `teamsapp.local.yml` |This overrides teamsapp.yml with actions that enable local execution and debugging. |
    | `teamsapp.testtool.yml` |This overrides teamsapp.local.yml with actions that enable local execution and debugging. |
    > [!Tip]
    > Familiarize yourself with bots outside Teams before you integrate your first bot within Teams.

- title: Build and run your first bot app
  durationInMinutes: 1
  content: |
    After you set up your project workspace with Teams Toolkit, build your bot project. Ensure that you've signed in to your Microsoft 365 account.

    ## Sign in to your Microsoft 365 account

    Use this account to sign in to Teams. If you're using a Microsoft 365 developer program tenant, the admin account you set up while registering is your Microsoft 365 account.

    # [Visual Studio Code](#tab/vsc)

        1. Open Visual Studio Code.

        1. Select the Teams Toolkit :::image type="icon" source="assets/icons/vsc-toolkit.png" border="false"::: icon in the sidebar.

        1. Select **Sign in to M365**. Your default web browser opens to let you sign in to the account.

        1. Sign in to your Microsoft 365 account using your credentials.

        1. Close the browser when prompted and return to Visual Studio Code.

        1. Return to Teams Toolkit within Visual Studio Code. Use this account to sign in to Teams. If you're using a Microsoft 365 developer program tenant, the admin account you set up while registering is your Microsoft 365 account.

            :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-tab/m365-sideloading-enabled.png" alt-text="Screenshot showing where to sign in to Microsoft 365 and Azure.":::

        Now you're ready to build the app and run it locally!

    # [Command line](#tab/cli)

        1. Sign in to Microsoft 365 with the TeamsFx CLI:

            ``` bash
            teamsfx account login m365
            ```
            Your default web browser opens to let you sign in to the account. Sign in to your Azure account using your credentials. Close the browser when you're prompted.

        2. Sign in to Azure with the TeamsFx CLI:

            ``` bash
            teamsfx account login azure
            ```

            Your default web browser opens to let you sign in to the account. Sign in to your Azure account using your credentials. Close the browser when you're prompted.

            The account logins are shared between Visual Studio Code and the TeamsFx CLI.

            Congratulations, you have signed in your Azure account!
            Now that the development environment is configured, you can create, build, and deploy your first Teams app.
    ---

    ## Create an app registration in Microsoft Entra ID

    Register a new app in Microsoft Entra ID and configure the tenancy and app's platform. You'll generate a new app ID that will be updated later in your Teams app manifest file.

    ### Register your new chat bot AI in Microsoft Entra ID

    1. Go to the [Azure portal](https://ms.portal.azure.com/).

    1. Select **create a resource** and search for Azure Open AI.

    1. Select Azure Open AI > select **Create**.

        :::image type="content" source="~/assets/images/test-tool/azure-open-ai.png" alt-text="Screenshot shows the Azure open AI in Azure portal.":::

    1. Fill the required details and select **Next**.

        :::image type="content" source="~/assets/images/test-tool/azure-open-ai-resource.png" lightbox="~/assets/images/test-tool/azure-open-ai-resource.png" alt-text="Screenshot shows you the Azure open AI subscription and resource group.":::

    1. Select **All network including the internet, can access this resource.** and then select **Next**.

        :::image type="content" source="~/assets/images/test-tool/azure-open-ai-network.png" lightbox="~/assets/images/test-tool/azure-open-ai-network.png" alt-text="Screenshot shows the Azure open AI network details.":::
    
    1. Fill the required details and select **Next**.

        :::image type="content" source="~/assets/images/test-tool/azure-open-ai-tags.png" alt-text="Screenshot shows the Azure open AI tags details.":::

    1. Select **Create**.

        :::image type="content" source="~/assets/images/test-tool/review-create.png" alt-text="Screenshot shows you to preview and create Azure open AI.":::

        Deployment is in progress.

        :::image type="content" source="~/assets/images/test-tool/deployment.png" alt-text="Screenshot shows you the deployment of the Azure open AI.":::

     ### Get Azure Open AI keys and endpoint

    1. Select **Go to resources**.
    1. Select **Keys and Endpoint** from the left pane and copy the **Key** and **Endpoint**.

        :::image type="content" source="~/assets/images/test-tool/key-endpoints.png" alt-text="Screenshot shows the keys and endpoints.":::

    1. Select **Model deployments** from the left pane and select **Manage deployments.

        :::image type="content" source="~/assets/images/test-tool/model-deployments.png" alt-text="Screenshot shows the model deployments for Azure open AI.":::
    
        Its opens Azure Open AI Studio.

    1. Select **+ Create new deployments**.

        :::image type="content" source="~/assets/images/test-tool/ai-studio.png" alt-text="Screenshot shows the model deployments for Azure open AI.":::

    1. Select the **gpt-35-turbo** from **Select a Model** dropdown list and **0301** for **Model version** from the dropdown list.

        :::image type="content" source="~/assets/images/test-tool/model-version.png" alt-text="Screenshot shows the model and version for Azure open AI deployment.":::

    1. Enter **Deployment name** and select **Create**.
    1. Copy Deployment name.

        :::image type="content" source="~/assets/images/test-tool/copy-deployment.png" alt-text="Screenshot shows the deployment name for Azure open AI deployment.":::

    ## Update Azure Open AI key and endpoints

    1. Open Visual Studio Code.

    1. Under **EXPLORER**, go to **env** > **.env.testtool.user** file.

    1. Enter your **SECRET_AZURE_OPENAI_API_KEY** and **SECRET_AZURE_OPENAI_ENDPOINT**.

        ```text
        ...
        SECRET_AZURE_OPENAI_API_KEY=<azure-openai-api-key>
        SECRET_AZURE_OPENAI_ENDPOINT=<azure-openai-endpoint>
        ```

    1. Go to **src** > **app.js** file.

    1. Comment the OpenAI code lines and uncomment the Azure OpenAI code lines.

        ```JavaScript
        ...
        // Use OpenAI
        // apiKey: config.openAIKey,
        // defaultModel: "gpt-3.5-turbo",

        azureApiKey: config.azureOpenAIKey,
        azureDefaultDeployment: "gpt-35-turbo",
        azureEndpoint: config.azureOpenAIEndpoint,
        ...
        ```


    1. Enter your Azure Open AI deployment name in `azureDefaultDeployment`.

    ## Debug and run your AI chat bot app

    1. From the left pane, select **Run and Debug** (`Ctrl+Shift+D`) and select **Debug in Test Tool (Preview)** in dropdown list.

       :::image type="content" source="~/assets/images/teams-toolkit-v2/debug/select-debug-in-test-tool.png" alt-text="Screenshot shows the option to select debug in test tool.":::
 
    1. Test Tool opens your AI chat bot in a webpage.

       :::image type="content" source="~/assets/images/teams-toolkit-v2/debug/test-tool.png" lightbox="~/assets/images/teams-toolkit-v2/debug/test-tool.png" alt-text="Screenshot shows the bot open in Test Tool.":::

- title: Activity triggers
  durationInMinutes: 1
  content: |

    You can mock an activity in Test Tool using activity triggers. There are two types of activity triggers:

    1. [Predefined activity triggers](#predefined-activity-triggers)
    1. [Custom activity triggers](#custom-activity-triggers)

    ### Predefined activity triggers

    Test Tool provides predefined activity triggers to test the functionalities of your bot.

      | Category | Activity | Handler |
      | --- | --- | --- |
      | Trigger Installation Update Activity | Install bot <br><br><br> Uninstall bot | `onInstallationUpdate` <br> `onInstallationUpdateAdded` <br><br> `onInstallationUpdate` <br> `onInstallationUpdateRemove`|
      | Trigger Conversation Update Activity | Add user <br><br> Add bot <br><br> Add channel | `onMembersAdded`<br><br> `onTeamsMembersAddedEvent` <br><br> `onTeamsChannelRenamedEvent` |
      | | Remove user <br><br><br> Remove bot <br><br><br> Remove channel <br><br> Remove team | `onMembersRemoved` <br> `onTeamsMembersRemovedEvent` <br><br> `onMembersRemoved` <br> `onTeamsMembersRemovedEvent` <br><br> `onTeamsChannelDeletedEvent` <br><br> `onTeamsTeamDeletedEvent` |
      | | Rename channel <br><br> Rename team | `onTeamsChannelRenamedEvent` <br><br> `onTeamsTeamRenamedEvent` |

    > [!NOTE]
    > All types of activities aren't available in all scopes. For example, you can't add or remove a channel in a personal chat or a group chat.

    Predefined activity triggers are available in the **Mock an Activity** menu in Test Tool.

    To mock an **Add user** activity, follow these steps:

    1. In Test Tool, go to **Mock an Activity** and select **Add user**.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/debug/add-user.png" alt-text="Screenshot shows the add user option under mock an activity.":::

        A pop-up window appears to preview the activity handler.

    1. Select **Send activity**.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/debug/add-a-user-request.png" alt-text="Screenshot shows the option to send activity for predefined mock activity add user.":::

        Bot sends a response.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/debug/add-a-user-response.png" alt-text="Screenshot shows the response of predefined mock activity add user.":::

    ### Custom activity triggers

    You can use **Custom activity** to customize activity triggers such as, `reactionsAdded`, to fit the requirements of your bot app. Test Tool automatically populates the required properties of the activity. You can also modify the activity type and add more properties.

    1. Select **Mock an Activity** > **Custom activity**.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/debug/mock-activity.png" alt-text="Screenshot shows the list of option under mock an activity.":::

    1. Add `messageReaction` to customize the activity under the property `type` and invoke the custom activity.

        ```json
        {
          "type": "messageReaction",
          "reactionsAdded": [
            {
              "type": "like"
            }
          ],
          "replyToId": "d60fd1cb-3e8f-44ef-849c-404806ba1b47"
        }
        ```

    1. Select **Send activity**.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/debug/custom-activity-request.png" alt-text="Screenshot shows the option to send activity after customization on mock activity.":::

        Bot sends an `onReactionsAdded` handler in response.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/debug/custom-activity-response.png" alt-text="Screenshot shows the response of custom mock activity.":::

- title: Congratulations!
  durationInMinutes: 1
  content: |
    You've successfully created a AI chat bot app. Now that you've learned to create a AI chat bot app.
