### YamlMime:Tutorial
title: Teams App Test Tool
metadata:
  title: Teams App Test Tool
  description: With this learning module, you learn how to emulate the Teams experience for your bot in Teams App Test Tool.
  audience: Developer
  level: Advanced
  ms.date: 10/21/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: toolkit/debug-your-teams-app-test-tool.md
  nextTutorialTitle: Teams App Test Tool
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    > [!NOTE]
    >
    > Teams App Test Tool is available in the latest prerelease version of the Teams Toolkit. 
    
    Start Microsoft Teams app development with your first Teams app. 
    You can create a bot app with Teams using Javascript. 

    This step-by-step guide helps you to build AI chat bot with Teams Toolkit. You'll see the following output after you've completed this guide, where the user can access and use the AI chat bot:

    :::image type="content" source="~/assets/images/teams-toolkit-v2/debug/test-tool.png" lightbox="~/assets/images/teams-toolkit-v2/debug/test-tool.png" alt-text="Screenshot shows the bot open in Test Tool.":::
    
- title: Prerequisites
  durationInMinutes: 1
  content: |
   Ensure you install the following tools for building and deploying your apps.

   | Install | For using... |
   | --- | --- |
   | [Teams Toolkit](#install-the-teams-toolkit) | A Microsoft Visual Studio Code extension that creates a project scaffolding for your app. Use the latest prerelease version. |
   | [Node.js](https://nodejs.org/) | Back-end JavaScript runtime environment. For more information, see [Node.js version compatibility table for project type](~/toolkit/build-environments.md#nodejs-version-compatibility-table-for-project-type).|
   | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript, TypeScript, or SharePoint Framework (SPFx) build environments. Use the latest version. |

   ## Prepare development environment
   After you've installed the required tools, set up the development environment.
   ### Install the Teams Toolkit
   The Teams Toolkit helps simplify the development process with tools to provision and deploy cloud resources for your app, publish to the Teams store, and more. 
    
   You can use the toolkit with Visual Studio Code, or CLI (command-line interface), called `TeamsFx`.

   # [Visual Studio Code](#tab/vscode)

   1. Open Visual Studio Code and select the **Extensions** view (**Ctrl+Shift+X** / **⌘⇧-X** or **View > Extensions**).
   1. In the search box, enter **Teams Toolkit**.
   1. Select **Install** next to the Teams Toolkit.
      :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/install-toolkit-vscodeversion.png" alt-text="Illustration shows the Teams Toolkit extension installation." lightbox="~/assets\images\teams-toolkit-v2\prerequisites\install-toolkit-vscodeversion-1.png":::

    The Teams Toolkit  :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon appears in the Visual Studio Code **Activity Bar** after it's installed.
   You can also find the Teams Toolkit on the [Visual Studio Code Marketplace](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension).

   # [Command line](#tab/cli)

   To install the TeamsFx CLI, use the `npm` package manager:
   ``` bash
   npm install -g @microsoft/teamsfx-cli
   ```
   Depending on your configuration, you may need to use `sudo` to install the CLI:
   ``` bash
   sudo npm install -g --unsafe-perm @microsoft/teamsfx-cli
   ```
   This condition is more common on Linux and macOS systems.
   Ensure you add the npm global cache to your PATH. This step is normally done as part of the Node.js installer.  
   You can use the CLI with the `teamsfx` command. Verify that the command is working by running `teamsfx -h`.

   > [!CAUTION]
   >
   > Before you can run TeamsFx in PowerShell terminals, you must enable the remote signed execution policy for PowerShell.

   ---
   
- title: Build and run your AI chat bot app
  durationInMinutes: 1
  content: |

    1. Open Visual Studio Code.

    1. Select the Teams Toolkit :::image type="icon" source="~/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.PNG" border="false"::: icon in the Visual Studio Code **Activity Bar**.

    1. Select **Create a New App**.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/create-project.png" alt-text="Screenshot shows the location of the Create New Project link in the Teams Toolkit sidebar.":::

    1. Select **Bot**.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/first-bot/create-new-app1.png" alt-text="Screenshot shows the Teams Toolkit app templates.":::

    1. Select **AI Chat Bot**. If you need a different functionality for your bot, pick a different option.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/debug/ai-chat-bot.png" alt-text="Screenshot shows the app feature to add to your new app.":::

    1. Select **JavaScript**.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/first-bot/select-language-tab.png" alt-text="Screenshot shows the option to select the programming language.":::

    1. Select **Default folder**.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/first-bot/select-default-location.png" alt-text="Screenshot shows the selection of default location.":::

        To change the default location, follow these steps:

        1. Select **Browse**.

            :::image type="content" source="~/assets/images/teams-toolkit-v2/first-bot/select-browse.png" alt-text="Screenshot shows the selection of browse location option.":::

        1. Select the location for the project workspace.
        1. Select **Select Folder**.

            :::image type="content" source="~/assets/images/teams-toolkit-v2/select-folder.png" alt-text="Screenshot shows the folder to select.":::

        1. Enter a suitable name for your app and then select the **Enter** key.

            :::image type="content" source="~/assets/images/teams-toolkit-v2/first-bot/hello-bot.png" alt-text="Screenshot shows where to enter the app name.":::

            A dialog appears, where you need to choose yes or no to trust the authors of the files in this folder.

            :::image type="content" source="~/assets/images/teams-toolkit-v2/first-bot/vsc-trust-authors.png" alt-text="Screenshot shows the dialog to trust or not the authors of the files in this folder.":::

    1. 

    1. From the left pane, select **Run and Debug** (`Ctrl+Shift+D`) and select **Debug in Test Tool** in dropdown list.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/debug/select-debug-in-test-tool.png" alt-text="Screenshot shows the option to select debug in test tool.":::

    1. Test Tool opens the bot in a webpage.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/debug/test-tool.png" lightbox="~/assets/images/teams-toolkit-v2/debug/test-tool.png" alt-text="Screenshot shows the bot open in Test Tool.":::


- title: Activity triggers
  durationInMinutes: 1
  content: |

    You can mock an activity in Test Tool using activity triggers. There are two types of activity triggers:

    1. [Predefined activity triggers](#predefined-activity-triggers)
    1. [Custom activity triggers](#custom-activity-triggers)

    ### Predefined activity triggers

    Test Tool provides predefined activity triggers to test the functionalities of your bot.

      | Category | Activity | Handler |
      | --- | --- | --- |
      | Trigger Installation Update Activity | Install bot <br><br><br> Uninstall bot | `onInstallationUpdate` <br> `onInstallationUpdateAdded` <br><br> `onInstallationUpdate` <br> `onInstallationUpdateRemove`|
      | Trigger Conversation Update Activity | Add user <br><br> Add bot <br><br> Add channel | `onMembersAdded`<br><br> `onTeamsMembersAddedEvent` <br><br> `onTeamsChannelRenamedEvent` |
      | | Remove user <br><br><br> Remove bot <br><br><br> Remove channel <br><br> Remove team | `onMembersRemoved` <br> `onTeamsMembersRemovedEvent` <br><br> `onMembersRemoved` <br> `onTeamsMembersRemovedEvent` <br><br> `onTeamsChannelDeletedEvent` <br><br> `onTeamsTeamDeletedEvent` |
      | | Rename channel <br><br> Rename team | `onTeamsChannelRenamedEvent` <br><br> `onTeamsTeamRenamedEvent` |

    > [!NOTE]
    > All types of activities aren't available in all scopes. For example, you can't add or remove a channel in a personal chat or a group chat.

    Predefined activity triggers are available in the **Mock an Activity** menu in Test Tool.

    To mock an **Add user** activity, follow these steps:

    1. In Test Tool, go to **Mock an Activity** and select **Add user**.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/debug/add-user.png" alt-text="Screenshot shows the add user option under mock an activity.":::

        A pop-up window appears to preview the activity handler.

    1. Select **Send activity**.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/debug/add-a-user-request.png" alt-text="Screenshot shows the option to send activity for predefined mock activity add user.":::

        Bot sends a response.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/debug/add-a-user-response.png" alt-text="Screenshot shows the response of predefined mock activity add user.":::

    ### Custom activity triggers

    You can use **Custom activity** to customize activity triggers such as, `reactionsAdded`, to fit the requirements of your bot app. Test Tool automatically populates the required properties of the activity. You can also modify the activity type and add more properties.

    1. Select **Mock an Activity** > **Custom activity**.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/debug/mock-activity.png" alt-text="Screenshot shows the list of option under mock an activity.":::

    1. Add `messageReaction` to customize the activity under the property `type` and invoke the custom activity.

        ```json
        {
          "type": "messageReaction",
          "reactionsAdded": [
            {
              "type": "like"
            }
          ],
          "replyToId": "d60fd1cb-3e8f-44ef-849c-404806ba1b47"
        }
        ```

    1. Select **Send activity**.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/debug/custom-activity-request.png" alt-text="Screenshot shows the option to send activity after customization on mock activity.":::

        Bot sends an `onReactionsAdded` handler in response.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/debug/custom-activity-response.png" alt-text="Screenshot shows the response of custom mock activity.":::

- title: Congratulations!
  durationInMinutes: 1
  content: |
    You've successfully created a AI chat bot app. Now that you've learned to create a AI chat bot app.
