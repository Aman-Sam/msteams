### YamlMime:Tutorial
title: Build search based message extension
metadata:
  title: Build search based message extension
  description: Learn how to build a search based message extension for Microsoft Teams, which allows users to search external systems.
  audience: Developer
  level: Beginner
  ms.date: 01/27/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: messaging-extensions/how-to/search-commands/define-search-command.md
  nextTutorialTitle: Read more on search commands
  ms.custom: mvc
  ms.localizationpriority: High
items:
- durationInMinutes: 1
  content: |
    Message extensions allow users to interact with web services in the Microsoft Teams client. They help to search in an external system from the compose message area, the command box, or directly from a message. 
    
    **Key features of search based message extension**

    * Allow users to search external systems.
    * Insert search results into a message in the form of a card.

    This step-by-step guide helps you to build a search based message extension. You'll see the following output:

    ![Final](~/assets/images/Teams-Messaging-Extensions-Search/final_output.png)

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure you install the following tools and set up your development environment:  

     | &nbsp; | Install | For using... |
     | --- | --- | --- |
     | **Required** | &nbsp; | &nbsp; |
     | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, call and all in one place.|
     | &nbsp; | [Visual Studio 2022 version 17.3](https://visualstudio.microsoft.com)<br> Install one of the following two workloads:<br> • **ASP.NET and web development** <br> • **.NET Core cross-platform development** | You can install the enterprise version in Visual Studio 2022, and install the workloads. |
     | &nbsp; | [.NET Core SDK version 3.1](https://dotnet.microsoft.com/en-us/download) | Customized bindings for local debugging and Azure Functions app deployments. If you haven't installed the .NET 3.1 (or later) SDK globally, the portable version can be installed. |
     | &nbsp; | [ngrok](https://ngrok.com/download) | Teams app features (conversational bots, message extensions, and incoming webhooks) require inbound connections. A tunnel connects your development system to Teams. It isn't required for apps that only include tabs. This package is installed within the project directory (using npm `devDependencies`). |

      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).


- title: Set up local environment
  durationInMinutes: 1
  content: |
   Clone `BotBuilder-Samples` repository to your local GitHub:  

    1. Open [BotBuilder Samples](https://github.com/microsoft/BotBuilder-Samples).
    1. Select **Code**.
    1. From the dropdown menu, select **Open with GitHub Desktop**.

       ![Clone repository](~/assets/images/Teams-Messaging-Extensions-Search/clonerepository_1.png)

    1. Select **Clone**. 

- title: Create and register your bot in Azure AD portal
  durationInMinutes: 5
  content: |
    To create and register your bot in Microsoft Azure Active Directory (Azure AD), perform the following steps:

    * Create Azure Bot resource to register bot with Azure Bot Service.
    * Create client secret to enable SSO authentication of the bot.
    * Add Microsoft Teams channel to deploy the bot to a Teams channel.
    * Use ngrok to create a tunnel to your web server's endpoints.
    * Add messaging endpoint to the ngrok tunnel you created.

    **To create Azure Bot resource**

    1. Go to the [Azure portal](https://portal.azure.com/).
    1. Select **Create a resource**.
    1. In the search box, enter **Azure Bot**.
    1. Select **Enter**.
    1. Select **Azure Bot**.

         :::image type="content" source="./assets/images/azure-bot_1.png" alt-text="Azure bot.":::

    1. Select **Create**.
    1. Enter required bot handle name in **Bot handle**.
    1. Select your **Subscription** from the dropdown list.
    1. Select your **Resource group** from the dropdown list.
    
        :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/review-plus-create_1.png" alt-text="review-plus-create"::: 
    
    1.  To create a new resource group, select the required location from **New resource group location** dropdown list.
        For more information, see [Create resource group](/azure/azure-resource-manager/management/manage-resource-groups-portal#create-resource-groups).

        ![New resource group location](~/assets/images/bots/newresource.png)

    1. Select **Type of App** as **MultiTenant**.

    1. In the **Microsoft App ID** section, by default **Create new Microsoft App ID** is selected. 
    
       You can also select **Use existing app registration** and enter existing **App ID**, **App tenant ID**, and **MSI resource ID**.

       > [!NOTE]
       > You can't create more than one bot with the same **Microsoft App ID**.

    1. Select **Review + create**.

        :::image type="content" source="./assets/images/meeting-token-generator/meeting-token-generator-appidcreate_1.png" alt-text="app id create":::

    1. If the validation passes, select **Create**. 

        It takes a few moments for your bot service to be provisioned. 

    1. Select **Go to resource**. 

        :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/botdeployment_1.png" alt-text="bot deployment":::

        Your Azure bot is created.

        :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/bot-page_1.png" alt-text="bot resource created":::

    **To create client secret**

      Perform the following steps if you've created a new **Microsoft App ID**:

    1. In the left panel, select **Configuration**. 

       > [!TIP]
       > Save the **Microsoft App ID** or **Client ID** for future reference.

    1. Next to **Microsoft App ID**, select **Manage**.

       :::image type="content" source="~/assets/images/manage-bot-label_1.png" alt-text="manage":::

    1. In the **Client secrets** section, select **New client secret**. 

        :::image type="content" source="~/assets/images/meetings-side-panel/newclientsecret_1.png" alt-text="New client secret":::
    
       The **Add a client secret** window appears.  

    1. Enter **Description**.
    
    1. Select **Add**.

        :::image type="content" source="~/assets/images/Teams-Messaging-Extensions-Search/clientsecret_1.png" alt-text="Add client secret to app":::

    1. In the **Value** column, select **Copy to clipboard**.

         :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/clientvalue_1.png" alt-text="Value of client secret":::
       
       > [!TIP]
       > Save the **Client secrets** value or app password for future reference.

    **To add the Teams channel**

    1. Select **Home**.

        :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/gotohome_1.png" alt-text="Go to Home":::

    1. Select your bot from **Recent resources**.

    1. Select **Channels** in the left pane and select **Microsoft Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>.

        :::image type="content" source="~/assets/images/adaptive-cards/channel-teams.png" alt-text="Select Teams in channels":::

    1. Select the checkbox to accept the **Terms of Service**.
    
    1. Select **Agree**.

          :::image type="content" source="./assets/images/meetings-side-panel/terms_1.png" alt-text="terms":::

    1. Select **Apply**.

          :::image type="content" source="./assets/images/sbs-messagingextension-action/configure-msteams_1.png" alt-text="configure msteams"::: 
    
    **To create tunnel for local web server**

    Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

     ```bash
     ngrok http --host-header=localhost 3978
     ```

    > [!TIP]
    > If you encounter **ERR_NGROK_4018**, follow the steps provided in the command prompt to sign-up and authenticate ngrok. Then run the `ngrok http --host-header=localhost 3978` command.

    **To add messaging endpoint**

    1. From ngrok, copy the HTTPS URL (https to io).

       :::image type="content" source="../msteams-platform/assets/images/ngrok-url_1.png" alt-text="ngrok HTTPS URL":::

        > [!NOTE]
        > The HTTPS URL in your ngrok is your fully qualified domain name.
        > The `WebAppDomain` is a fully qualified domain name that doesn't include `https://` in it.

    1. In **Settings** for the Azure bot that you created, select **Configuration**.

    1. In **Messaging endpoint**, use the HTTPS URL available from ngrok and at the end of the URL add **/api/messages**.

        :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/messaging-endpoint_1.png" alt-text="messaging endpoint":::

    1. Select **Apply**.

        You have successfully set up a bot in Azure Bot Service.


- title: Update the Azure AD app registration
  durationInMinutes: 1
  content: |
    1. Go to the [Microsoft Azure portal](https://portal.azure.com/).

    1. Select **Azure Active Directory**.

    1. In the left navigation panel, select **App Registrations**.

    1. Select your bot.

       :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/appregister_1.png" alt-text="App registration":::

    1. Under **Manage**, select **Expose an API**.

    1. Select **Set**.

       :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/exposeanapi_1.png" alt-text="Expose an API":::

    1. Set the **Application ID URI** in the form of `api://WebAppDomain/{AppID}`.

       :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/setlink_1.png" alt-text="Set link":::
        
       The following image shows the domain name:
        
        :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/appIDuri_1.png" alt-text="App ID URI":::

        > [!NOTE]
        > If you're using a tunneling service such as ngrok, ensure you update the value whenever your ngrok subdomain changes.
        > `For example: api://f631****.ngrok.io/92c11075-c629-4a1e-ab58-02b4fd4204c2`, where `f631****.ngrok.io` is the new ngrok subdomain name.

    1. Select **Add a scope**. 

       :::image type="content" source="~/assets/images/meetings-side-panel/selectscope_1.png" alt-text="Select scope":::
    
    1. In the panel that appears, enter `access_as_user` as the **Scope name**.
  
    1. Set **Who can consent?** to `Admins and users`.
  
    1. To configure the admin and user consent prompts with appropriate values for `access_as_user` scope, provide the following information in the fields:</br>
    
         * Enter `Teams can access the user’s profile` as **Admin consent display name**.

         * Enter `Allows Teams to call the app’s web APIs as the current user` as **Admin consent description**.

         * Enter `Teams can access the user profile and make requests on the user’s behalf` as **User consent display name**.

         * Enter `Enable Teams to call this app’s APIs with the same rights as the user` as **User consent description**.
  
    1. Ensure that **State** is set to **Enabled**.
  
    1. Select **Add scope** to save.

        :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/addascope_1.png" alt-text="Add a scope":::

        > [!NOTE]
        > The **Scope name** should match with the **Application ID** URI with `/access_as_user` appended at the end.</br>
           `api://9179****.ngrok.io/00000000-0000-0000-0000-000000000000/access_as_user`

        :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/scopes_1.png" alt-text="Scopes"::: 
  
    1. In the **Authorized client applications** section, identify the applications that you want to authorize for your app’s web application. 
    
    1. Select **Add a client application**. 

        :::image type="content" source="~/assets/images/meetings-side-panel/selectclientapp_1.png" alt-text="Select client application"::: 

    1. Enter **Client ID**: `1fec8e78-bce4-4aaf-ab1b-5451cc387264` for Teams mobile or desktop application. 

        ![Add client application 1](~/assets/images/meetings-side-panel/addclientapplication1.png) 

       You can enter **Client ID**: `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` for Teams web application.

        ![Add client application 2](~/assets/images/meetings-side-panel/addclientapplication2.png) 

    1. Select **Authorized scopes**.

        :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/authorizedscope_1.png" alt-text="Authorized scopes"::: 

       The following image displays the client IDs:

        ![Client applications](~/assets/images/meetings-side-panel/clientapps.png) 
  
    1. In the left panel, select **API Permissions**. 

       > [!NOTE]
       > Users need to consent to the API permissions only if the Azure AD app is registered in a different tenant.

    1. Select **Add a permission**.

        :::image type="content" source="~/assets/images/meetings-side-panel/add-permission_1.png" alt-text="Add permission":::

    1. Select **Microsoft Graph**.

    1. Select **Delegated permissions**.

    1. Add the following permissions:</br>
         * **email**
         * **offline_access**
         * **OpenId**
         * **profile**
         * **User.Read**

    1. Select **Add permissions**.

         :::image type="content" source="~/assets/images/meetings-side-panel/other-permissions_1.png" alt-text="Other permissions":::

    1. From the left panel, select **Authentication** to set a redirect URI. 

       > [!NOTE]
       > If an app isn't granted IT admin consent, users must provide consent the first time they use an app.
               
         1. Select **Add a platform**.
         1. Select **Web**.

            :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/webauth_1.png" alt-text="Web":::

         1. Enter the redirect URI for your app by appending `auth-end` to fully qualified domain name:</br> 
           `https://9179****.ngrok.io/auth-end`. </br>

         1. Enable **Implicit grant and hybrid flows** by selecting the following checkboxes:
             * **ID tokens**
             * **Access tokens**
   
         1. Select **Configure**.

            :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/authend_1.png" alt-text="Auth-end":::

- title: Set up app settings and manifest files
  durationInMinutes: 1
  content: |
    1. Go to **appsettings.json** in cloned repository.

        :::image type="content" source="~/assets/images/Teams-Messaging-Extensions-Search/appsettingslocation_1.png" alt-text="App settings location":::

    1. Open **appsettings.json** in latest version of Visual Studio and update the following information:  

         * Set `"MicrosoftAppType"` to **MultiTenant**.
         * Set `"MicrosoftAppId"` to bot's **Microsoft App ID**.
         * Set `"MicrosoftAppPassword"` to **Value** of **Client secret**.
         * Set `"MicrosoftAppTenantId"` as blank.
         * Set `"BaseUrl"` to the fully qualified domain name (https to io).

        :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/appsettings_1.png" alt-text="App settings":::

    1. Go to `manifest.json` in cloned repository.

        :::image type="content" source="~/assets/images/Teams-Messaging-Extensions-Search/manifestlocation_1.png" alt-text="Manifest file location":::
    
    1. Open `manifest.json` in latest version of Visual Studio and make the following changes:

         * Replace `<<YOUR-BASE-URL-DOMAIN>>` with `WebAppDomain` name.
         * Replace all occurrences of `<<YOUR-MICROSOFT-APP-ID>>` with bot's **Microsoft App ID**.

        :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/manifest_1.png" alt-text="Manifest":::

- title: Build and run the service
  durationInMinutes: 1
  content: |
    **To build and run the service using latest version of Visual Studio or Command line**

    # [Latest version of Visual Studio](#tab/latestversionofvisualstudio)

       1. Launch the latest version of Visual Studio.
       1. Go to **File** > **Open** > **Project/Solution**.
    
          :::image type="content" source="./assets/images/meeting-token-generator/meeting-token-generator-VSopenfile_1.png" alt-text="Open file":::

       1. Select **TeamsMessagingExtensionsSearch.csproj** file from **50.teams-messaging-extensions-search** folder.

          :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/fileready_1.png" alt-text="cs proj file":::

       1. Open **Solution Explorer** from **View**.

          :::image type="content" source="./assets/images/Teams-task-module/solutionexplorer_1.png" alt-text="Solution Explorer":::

       1. Right-click to select **TeamsMessagingExtensionsSearch**.

       1. Select **Set as Startup Project**.

          :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/startup_1.png" alt-text="startup":::

       1. Press **F5** to run the project.
    
       1. Select **Yes** if the following dialog appears:

          :::image type="content" source="~/assets/images/sbs-messagingextension-action/certificate_1.png" alt-text="Trust Certificate":::

          A webpage opens with a message **Your bot is ready!**.

          ![App ready](~/assets/images/Teams-Messaging-Extensions-Search/appisready.png) 

        
    # [Command line](#tab/cli)

    Go to **BotBuilder-Samples > samples > csharp_dotnetcore > 50.teams-messaging-extensions-search** in Command Prompt window and enter the following command:

    ```bash
    dotnet run
    ```
   
    ![Dotnet](~/assets/images/Teams-Messaging-Extensions-Search/dotnetruncmd.png)

- title: Add Search Message Extension app
  durationInMinutes: 1
  content: |
    1. In your cloned repository, go to **csharp_dotnetcore > 50.teams-messaging-extensions-search > TeamsAppManifest**.

    1. Create a .zip with the following files that are present in the **TeamsAppManifest** folder: 
       * manifest.json
       * icon-outline.png
       * icon-color.png

       :::image type="content" source="~/assets/images/Teams-Messaging-Extensions-Search/zipfile_1.png" alt-text="Zip file"::: 

    1. Go to **Microsoft Teams**.

    1. In the left panel, select **Apps** > **Manage your apps**.

       :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/AppStore_1.png" alt-text="App store":::
   
    1. Select **Upload a custom app**. 

       :::image type="content" source="./assets/images/Teams-task-module/upload-app_1.png" alt-text="Upload app":::

    1. Select **Open** to upload the .zip file that you created in the **TeamsAppManifest** folder.

       :::image type="content" source="~/assets/images/Teams-Messaging-Extensions-Search/selectzipopen_1.png" alt-text="Select zip file":::

    1. Select **Add**.

       :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/addapp_1.png" alt-text="Add the app":::

       A pop-up opens in a chat.

       ![Chat](~/assets/images/Teams-Messaging-Extensions-Search/popup.png)
   
- title: Interact with the app in Teams
  durationInMinutes: 1
  content: |
    1. Select any option from the pop-up.

    1. Enter text and select **send**.

       ![Option](~/assets/images/Teams-Messaging-Extensions-Search/option1.png)

       1. Select **Nuget Package**.

          ![Nuget](~/assets/images/Teams-Messaging-Extensions-Search/nuget.png)

       1. Select **Project**.

          ![Project](~/assets/images/Teams-Messaging-Extensions-Search/project.png)


- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

    ![Final](~/assets/images/Teams-Messaging-Extensions-Search/final_output.png)

- content: |
    You've completed the tutorial to get started with Teams message extensions search!

