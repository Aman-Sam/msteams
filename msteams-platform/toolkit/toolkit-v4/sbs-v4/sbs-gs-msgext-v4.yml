### YamlMime:Tutorial
title: Build your first message extension app using JavaScript
metadata:
  title: Hello World with JavaScript
  description: In this tutorial, you'll learn to build and deploy a message extension app with JavaScript using Teams Toolkit.
  audience: Developer
  level: Beginner
  ms.date: 05/26/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/toolkit/toolkit-v4/teams-toolkit-tutorial-v4.md
  nextTutorialTitle: Back to Teams app tutorials
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
   Start Microsoft Teams app development with your first Teams app using JavaScript. 
   
   In this tutorial, you'll learn:

   - How to set up a new project with Teams Toolkit.
   - How to build a message extension app.
   - How to deploy your app.

   This step-by-step guide helps you to build a message extension Teams app with Teams Toolkit in Visual Studio Code. You'll see the following output after you complete this guide:
    
   :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/your-helloworld-app-v4.png" alt-text="Screenshot shows the final output of the message extension app in Teams.":::

- title: Prerequisites
  durationInMinutes: 1
  content: |

   Install the following tools for building and deploying your message extension app:

   | &nbsp; | Install | For using... |
   | --- | --- | --- |
   | **Required** | &nbsp; | &nbsp; |
   | &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript or TypeScript, build environments. Use latest version. |
   | &nbsp; | [Teams Toolkit](#install-the-teams-toolkit) | A Microsoft Visual Studio Code extension that creates a project scaffolding for your app. Use version 4.2.1. |
   | &nbsp; | [Node.js](https://nodejs.org/en/download/) | Back-end JavaScript runtime environment. For more information, see [Node.js version compatibility table for project type](~/toolkit/build-environments.md#nodejs-version-compatibility-table-for-project-type). |
   | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chats, meetings, and calls in one place. |
   | &nbsp; | [Microsoft Edge](https://www.microsoft.com/edge) (recommended) or [Google Chrome](https://www.google.com/chrome/) | A browser with developer tools. |
   | &nbsp; | [Microsoft 365 developer account](/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | Access to Teams account with the appropriate permissions to install an app. |
   | **Optional** | &nbsp; | &nbsp; |
   | &nbsp; | [Azure Tools for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack) and [Azure CLI](/cli/azure/install-azure-cli) | Azure tools to access stored data or to deploy a cloud-based backend for your Teams app in Azure. |
   | &nbsp; | [React Developer Tools for Chrome](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi) OR [React Developer Tools for Microsoft Edge](https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil) | A browser DevTools extension for the open-source React JavaScript library. |
   | &nbsp; | [Microsoft Graph Explorer](https://developer.microsoft.com/graph/graph-explorer) | Microsoft Graph Explorer, a browser-based tool that lets you run a query from Microsoft Graph data. |
   | &nbsp; | [Developer Portal for Teams](https://dev.teams.microsoft.com/) | Web-based portal to configure, manage, and distribute your Teams app including to your organization or the Microsoft Teams Store. |

   > [!TIP]
   > If you work with Microsoft Graph data, you should learn about and bookmark the Microsoft Graph Explorer. This browser-based tool allows you to query Microsoft Graph outside of an app.

   ## Prepare development environment

   After you install the required tools, set up the development environment.

   ### Install the Teams Toolkit

   The Teams Toolkit helps simplify the development process with tools to provision and deploy cloud resources for your app and publish to the Teams Store. 
    
   You can use the toolkit with Visual Studio Code or TeamsFx Command Line Interface (CLI).

   # [Visual Studio Code](#tab/vsc0)

   1. Open Visual Studio Code and select **Extensions** (**Ctrl+Shift+X** or **View > Extensions**).
   1. In the search box, enter **Teams Toolkit**.
   1. Select **Install**.

      :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/install-toolkit-vscodeversion-v4.png" alt-text="Screenshot shows the Teams Toolkit extension installation.":::

      The Teams Toolkit :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/teams-toolkit-sidebar-icon-v4.PNG" alt-text="Screenshot shows the Teams Toolkit icon in Visual Studio Code activity bar."::: icon appears in the activity bar after it's installed.

   You can also find the Teams Toolkit on the [Visual Studio Code Marketplace](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension).

   # [Command Line](#tab/cli0)

   To install the TeamsFx CLI, use the `npm` package manager and enter the following command in Command Prompt:

   ``` bash
   npm install -g @microsoft/teamsfx-cli
   ```

   Depending on your configuration, you may need to use `sudo` to install the CLI:

   ``` bash
   sudo npm install -g --unsafe-perm @microsoft/teamsfx-cli
   ```

   This condition is more common on Linux and macOS systems.

   Ensure you add the npm global cache to your PATH. This step is normally done as part of the Node.js installer.  

   You can use the CLI with the `teamsfx` command. Verify that the command is working by running `teamsfx -h`.

   > [!CAUTION]
   > If you want to run TeamsFx in PowerShell terminals, you must enable the "remote signed" execution policy for PowerShell.

   ---

   ## Setup your Teams development tenant

   A tenant is a secure space for your organization in Teams where you chat, share files, and attend meetings. This space is also where your upload and test your message extension app. Before setting up your tenant, let's verify if you can upload custom apps.

   ### Check if you can upload a custom app to Teams

   After creating your custom app, you must upload your app to Teams. Sign in to your Microsoft 365 account to view this option.

    > [!NOTE]
    > Custom app upload is necessary for previewing and testing apps in Teams local environment. If it isn't enabled, you won't be able to preview and test your app in Teams locally.

   Verify if you can upload a custom app in Teams:

    1. In the Teams client, select **Apps**.
    1. Select **Manage your **Apps**.
    1. Select **Upload an app**.
    1. Look for the option to **Upload a custom app**. If the option is visible, you've enabled custom app upload.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/upload-custom-app-v4.png" alt-text="Screenshot shows the option to upload a custom app in Teams.":::

        > [!NOTE]
        > If you don't have the option to upload a custom app, talk to your Teams administrator.

   ### Create a free Teams developer tenant (optional)

   If you don't have a Teams developer account, join the Microsoft 365 developer program.

   1. Go to the [Microsoft 365 developer program](https://developer.microsoft.com/microsoft-365/dev-program).
   1. Select **Join Now** and follow the onscreen instructions.
   1. In the welcome screen, select **Set up E5 subscription**.
   1. Set up your administrator account. After you finish, the following screen appears.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/microsoft-365-v4.png" alt-text="Screenshot shows the Microsoft 365 developer account subscription.":::

   1. Sign in to Teams using the administrator account you just set up. Verify that you have the **Upload a custom app** option in Teams.

   ## Get a free Azure account

   If you wish to host your app or access resources in Azure, you must have an Azure subscription. [Create a free account](https://azure.microsoft.com/free/) before you begin.

   Next, let's set up your development environment and start building your first message extension app.


- title: Create project workspace for your message extension app
  durationInMinutes: 1
  content: |

   Now, let's create your first message extension app.

   The message extension capability lets you interact with a web service through buttons and forms. Use the message compose area, command box, or a message directly in Teams client to search and initiate actions in an external system. Message extensions rely on bots to provide a dialog between the user and your code.

      :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/your-helloworld-app-msgext-v4.png" alt-text="Screenshot shows the different types of app features and message extension is highlighted.":::

   There are two types of Teams message extensions:

   - [Search commands](~/messaging-extensions/how-to/search-commands/define-search-command.md): You can search external systems and insert its results into a message in the form of a card.
   - [Action commands](~/messaging-extensions/how-to/action-commands/define-action-command.md): You can present your users with a modal pop-up to collect or display information. Then, you can process their interaction and send information back to Teams.

   Let's create a message extension app with a search command. First, set up a new Teams project for creating the message extension app.

   In this tutorial, you learn:

   1. [How to set up a new message extension project with Teams Toolkit.](#create-your-message-extension-project-workspace)
   1. [About the directory structure of your app project.](#take-a-tour-of-the-message-extension-app-source-code)

   ## Create your message extension project workspace

   If the prerequisites are in place, let's begin!

   > [!NOTE]
   > The Visual Studio Code UI shown may differ for you depending on your operating system, Toolkit version, theme, and environment.

   # [Visual Studio Code](#tab/vsc1)

   1. Open Visual Studio Code.
   
   1. Select the Teams Toolkit :::image type="icon" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/teams-toolkit-sidebar-icon-v4.PNG"::: icon in the activity bar.

   1. Select **Create a new app**.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/create-project-v4.png" alt-text="Screenshot shows the option to create a new app from the Teams Toolkit sidebar.":::

   1. Select **Create a new Teams app**.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/create-new-app1-v4.png" alt-text="Screenshot shows the option to create a new Teams app.":::

   1. Select **Message extension**.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/select-capabilities-mex1-v4.png" alt-text="Screenshot shows the option to select the capabilities of a new app.":::

   1. Select **JavaScript**.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/select-language-tab-v4.png" alt-text="Screenshot shows the option to select the programming language.":::

   1. Select **Default folder** to store your project root folder in default location.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/select-default-location-v4.png" alt-text="Screenshot shows the selection of default location.":::

        You can change the default location by the following steps:

        1. Select **Browse**.

            :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/select-browse-v4.png" alt-text="Screenshot shows the browse option.":::
            
        1. Select the location for project workspace.

        1. Select **Select Folder**.

            :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/select-folder-v4.png" alt-text="Screenshot shows how to select the location for the project workspace folder.":::

   1. Enter a suitable name for your app. Select **Enter**.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/enter-project-name-v4.png" alt-text="Screenshot shows how to enter the app name.":::

        Teams Toolkit creates the app in a few seconds.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/app-created-mex-v4.png" alt-text="Screenshot shows the newly created message extension app.":::

        After your app is created, the Teams Toolkit displays the following message: 

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/preview-project-v4.png" alt-text="Screenshot shows a dialog saying that the message extension app is created.":::

   # [Command Line](#tab/cli1)

   Use the `teamsfx` CLI to create your first project.
   
   1. Go to the folder where you want to create the project folder and open Command Prompt.

   1. Enter the following command to create a new Teams app:

    ``` bash
    teamsfx new
    ```

   CLI provides you with a series of options to choose from. Use arrow keys to select an option. After you make the choice, select **Enter** to confirm.
    
     1. Select **Message Extension** for **New Project**.
     1. Select **Custom Search Results** for **App Features Using a Message Extension**.
     1. Select **Start with a Bot** for **Architecture of Search Based Message Extension**.
     1. Select **JavaScript** for **Programming Language**.
     1. Select **Enter** to select the default workspace folder for your app.
     1. Enter a suitable name for your app. The name of the app must consist only of alphanumeric characters.

   CLI creates the project after you answer all the questions.

   ---

   ## Take a tour of the message extension app source code

   A message extension uses Bot Framework. You use it to interact with your service through a conversation. After scaffolding, view the project directories and files in **EXPLORER**.

   :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/folder-structure-mex-app-v4.png" alt-text="Screenshot shows the explorer with the files of the message extension app.":::

   | Folder name | Contents |
   | --- | --- |
   | `.fx/configs` | Configuration files that the user can customize for the Teams app. |
   | `.fx/configs/config.<envName>.json` | Configuration file for every environment. |
   | `.fx/configs/azure.parameters.<envName>.json` | Parameters file for Azure BICEP provision for every environment. |
   | `.fx/configs/projectSettings.json` | Global project settings that apply to all environments. |
   | `.fx/configs/ngrok.yml` | ngrok settings. |
   | `.fx/states` | Provision output that is generated by the Teams Toolkit. The toolkit creates this folder after you provision resources for your app. |
   | `.fx/states/state.<envName>.json` | Provision output file for every environment. |
   | `.fx/states/<env>.userdata` | Sensitive user data for the provision output for every environment. |
   | `bot` | Code for the bot needed at runtime. |
   | `bot/messageExtensionBot.js` | Main entry point for the message extension app. |
   | `templates/appPackage` | App manifest template files and the app icons. |
   | `templates/appPackage/manifest.template.json` | App manifest for running the app in local and remote environment.  |
   | `templates/azure` | BICEP template files. |

   > [!Tip]
   > Familiarize yourself with bots and message extension outside of Teams before you integrate your app within Teams.

- title: Build and run your first message extension app
  durationInMinutes: 1
  content: |

   After you set up your project workspace with Teams Toolkit, it's time to build your project. You need to sign in to your Microsoft 365 account.

   ## Sign in to your Microsoft 365 account

   If you're using a Microsoft 365 developer program tenant, the admin account you set up while registering is your Microsoft 365 account.

   # [Visual Studio Code](#tab/vsc2)

   1. Open Visual Studio Code.

   1. Select the Teams Toolkit  :::image type="icon" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/teams-toolkit-sidebar-icon-v4.png"::: icon in the activity bar.
    
   1. Select **Sign in to Microsoft 365**. Your default web browser opens to let you sign in to the account.

      :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/ttk-sign-in-m365-v4.png" alt-text="Screenshot shows where to sign in to Microsoft 365 and Azure.":::

   1. Close the browser after signing in using your credentials. Return to Teams Toolkit for Visual Studio Code.

        The **ACCOUNTS** section of the sidebar shows your Microsoft 365 account name. If custom app upload is enabled for your Microsoft 365 account, Teams Toolkit displays **Sideloading enabled**.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/m365-sideloading-enabled.png" alt-text="Screenshot shows the user signed in to Microsoft 365 and the sideloading enabled message.":::

        Now you're ready to build the app and run it locally!

   # [Command Line](#tab/cli2)

   1. Go to the project folder of your message extension app and open Command Prompt.

   1. Sign in to Microsoft 365 with the following TeamsFx CLI command:

        ``` bash
        teamsfx account login m365
        ```

   1. Your default web browser opens to let you sign in to the account. Sign in to your Microsoft 365 account using your credentials. Close the browser when you're prompted.

   ---

   ## Build and run your app in the local environment

   Now you can build and debug your first Teams message extension app locally. 
    
   ### Build and run your app locally

   1. Select the **F5** key in Visual Studio Code to run your application in debug mode.

        > [!NOTE]
        > If Teams Toolkit is unable to check a particular prerequisite, it prompts you to check.

        <!-- markdownlint-disable MD033 -->
        <details>
        <summary>Learn what happens when you run your app locally in the debugger.</summary>

        When you select **F5**, the Teams Toolkit:

        1. Checks all the following prerequisites:
          - You're signed in with a Microsoft 365 account.
          - Custom app upload is enabled for your Microsoft 365 account.
          - Supported Node.js version is installed.
          - Ngrok is installed.
          - Port required by bot app is available.

        2. Installs npm packages
        3. Starts ngrok to create an HTTP tunnel.
        4. Registers the app in Microsoft Entra ID and configures the app.
        5. Registers the bot app in Bot Framework and configures the app.
        6. Registers the app in Teams Developer Portal and configures the app.
        7. Starts the message extension app hosted locally.
        8. Starts Teams in a web browser and uploads the Teams app.
        
        </details>

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/f5-build-and-run-mex-v4.png" alt-text="Screenshot shows the debug process of the message extension app.":::

        > [!NOTE]
        > When you run the app for the first time, Teams Toolkit downloads all the dependencies and builds the app. A browser window opens when the build is complete. This process can take three to five minutes to complete.

   Teams runs your app in a web browser.
        
   1. Sign in with your Microsoft 365 account, if prompted.
   
   1. Select **Add**.
    
        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/add-mex-app-local-debug-v4.png" alt-text="Screenshot shows the option to add the custom app in Teams.":::

        Teams loads the message extension app in a chat bot app.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/app-added-mex-local-debug-v4.png" alt-text="Screenshot that shows custom app uploaded in Teams":::

        As message extension apps rely on bots for enabling communication between the user and the web service, your app loads in to a chat feature of a bot.

        - If you created a bot app before you created the message extension app, it loads in the bot app you created. Previous chat messages of the bot app are visible.
        - If you created a message extension first, your app is loaded in the most recent chat that is open on Teams.

   ### Test your app

   The first time your app loads, the message extension app is open for you to test. This sample app lets you search open-source npm packages from the software registry.
    
   #### To run a search query

   1. Enter a search string in the search box, such as **cli**. A list of the matching items appears.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/mex-search-string-v4.png" alt-text="Screenshot that shows how to use the app for search":::

   1. Select one of the search results. The app creates a card with the result in the message compose area so you can send it in the channel.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/mex-search-result-v4.png" alt-text="Screenshot that shows the search result":::

   1. Select **Enter**. The message extension app sends the card with the search result in the channel.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/mex-search-sent-v4.png" alt-text="Screenshot that shows the search result sent on chat":::

   #### To run a search query

   1. Select **Create Card**.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/create-card.png" alt-text="Screenshot that shows how to create a card":::

   1. Enter the card details and select **Submit**.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/mex-card-details-v4.png" alt-text="Screenshot that shows how to add a card details":::

        Your card appears in the message compose area.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/mex-card-added-v4.png" alt-text="Screenshot that shows how to add a card details":::

   1. Select **Send**. The app sends the card in the chat.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/mex-card-sent-v4.png" alt-text="Screenshot that shows the card sent":::

   ### How to invoke your message extension app

   You tested the search feature of the message extension app and learned how to create a card in the previous steps. Now, learn the different ways to open the message extension app.

   <br>
   <br>
   <details>
   <summary>Open your app from command box</summary>

   1. Enter **/** followed by your message extension app's name in the command box.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/mention-mex-app-v4.png" alt-text="Screenshot that shows how to @mention the message extension app.":::

        The app opens in the command box and you can use it to run a query.

        > [!NOTE]
        > Using **/** to open your message extension app from the command box only works in the new Teams client.
        > Use **@** to open your message extension app from the command box in the classic Teams client.

   1. Enter a search string and select one of the search results.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/command-box-search-v4.png" alt-text="Screenshot shows how to run a search using the message extension app.":::

        The message extension displays the search result as a card in the command box.

   1. Copy the card to paste it in the message compose area.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/command-search-card-send.png" alt-text="Screenshot shows search result in a card.":::
 
   1. Select Enter. The message extension app sends the card with the search result in the most recent chat.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/command-search-card-sent-v4.png" alt-text="Screenshot shows search result in a chat.":::

   </details>

   <br>
   <details>
   <summary>Open your app from message compose area</summary>

   1. Select the three dots at the bottom of the message compose area.
   
   1. Select your message extension app.      

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/three-dot-mex-v4.png" alt-text="Screenshot that shows how to open the sample message extension app":::

        The message extension app loads with the options to run a search and create cards.

   </details>

   <br>
   <details>
   <summary>Run the app from uploaded custom apps</summary> 

   1. Select the **Apps** > **Manage your apps**.

   1. Select the dropdown for your app from the list of apps and select **Personal app**.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/sideloaded-apps-v4.png" alt-text="Screenshot that shows uploaded custom apps":::

   1. A dialog box appears suggesting you to try out your app. Select **Try it**.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/mex-try-it.png" alt-text="Screenshot shows the message to try the message extension app now or later.":::

   1. A list of your message extension apps appears in your most recent Teams chat. Select your message extension app from the list.

   </details>

   ### Learn how to troubleshoot if your app doesn't run locally

   To run your app in Teams, you must have a Microsoft 365 development account that allows custom app upload. You can learn more about custom app upload in the prerequisites section.

- title: Deploy your first Teams app
  durationInMinutes: 1
  content: |

   Let's deploy your first message extension app on Azure using Teams Toolkit.

   ## Sign in to your Azure account

   Sign in to your Azure account to access the Microsoft Azure portal and provision new cloud resources to support your app.

   # [Visual Studio Code](#tab/vsc3)

   1. Open Visual Studio Code.
   
   1. Open the project folder in which you created the message extension app.
   
   1. Select the Teams Toolkit  :::image type="icon" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/teams-toolkit-sidebar-icon-v4.png"::: icon in the activity bar.
   
   1. Select **Sign in to Azure**. Your default web browser opens to let you sign in to the account.

        > [!TIP]
        > If you have the AZURE ACCOUNT extension installed and are using the same account, you can skip this step. Use the same account as you're using in other extensions.

   1. Close the browser after signing in using your credentials and return to Visual Studio Code.

   The **ACCOUNTS** section of the sidebar lists the number of usable Azure subscriptions available to you. Ensure you have at least one usable Azure subscription available. If not, sign out and use a different account.

   Congratulations, you signed in to your Azure account! Let's learn how to deploy the app to Azure using the Teams Toolkit.

   # [Command Line](#tab/cli3)

   1. Go to the project folder of your message extension app and open Command Prompt.   

   1. Sign in to Azure with the following TeamsFx CLI command:

        ``` bash
        teamsfx account login azure
        ```

   1. Your default web browser opens to let you sign in to the account. Sign in to your Azure account using your credentials. Close the browser when you're prompted.

   Now, let's learn how to deploy the app to Azure using the Teams Toolkit.

   ---

   [!INCLUDE [Provision and Deploy your app on Azure](~/includes/get-started/azure-provisioning-instructions.md)]

   <!-- markdownlint-disable MD033 -->
   <details>
   <summary>Learn what happens when you deployed your app to Azure</summary>

   Before deployment, the app runs locally.

      * The backend runs using Azure Functions Core Tools.
      * The application HTTP endpoint, where Microsoft Teams loads the app, runs locally.

   Deployment is a two-step process. You provision the resources on an active Azure subscription, and then deploy or upload the backend and frontend code of the app to Azure.

      * The backend, if configured, uses various Azure services, including Azure App Service and Azure Storage.
      * The frontend app is deployed to an Azure Storage account configured for static web hosting.

   </details>

- title: Congratulations!
  durationInMinutes: 1
  content: |

   You completed the tutorial to build a message extension app with JavaScript!

   Did you come up with something like this?

   :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-msgext/your-helloworld-app-v4.png" alt-text="Screenshot shows the different types of app features.":::