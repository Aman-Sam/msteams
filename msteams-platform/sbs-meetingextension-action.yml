### YamlMime:Tutorial
title: Build action based message extension
metadata:
  title: Build action based message extension
  description: With this learning module, learn how to set up action message extension for Teams to initiate actions from compose message and message area.
  audience: Developer
  level: Beginner
  ms.date: 24/02/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: messaging-extensions/how-to/action-commands/define-action-command.md
  nextTutorialTitle: Read more to enable message extension action commands
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    Message extensions allow users to interact with web services in the Microsoft Teams client. They help to initiate actions in an external system from the compose message area, the command box, or directly from a message.

    **Key features of action based message extension**

    * Presents the user with a modal pop-up to collect or display information.
    * Triggers the action commands from the compose message area, the command box, or from a message. 

    This step-by-step guide helps you to build Teams action-based message extension to initiate actions from compose message and message area. You'll see the following output:
       
      :::image type="content" source="./assets/images/sbs-messagingextension-action/sharemessageoutput1.png" alt-text="output.":::
    

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure you install the following tools and set up your development environment:

     | &nbsp; | Install | For using... |
     | --- | --- | --- |
     | **Required** | &nbsp; | &nbsp; |
     | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, call and all in one place.|
     | &nbsp; | [Visual Studio 2022 version 17.3](https://visualstudio.microsoft.com)<br> Install one of the following two workloads:<br> • **ASP.NET and web development** <br> • **.NET Core cross-platform development** | You can install the enterprise version in Visual Studio 2022, and install the workloads. |
     | &nbsp; | [.NET Core SDK version 3.1](https://dotnet.microsoft.com/en-us/download) | Customized bindings for local debugging and Azure Functions app deployments. If you haven't installed the .NET 3.1 (or later) SDK globally, the portable version can be installed. |
     | &nbsp; | [ngrok](https://ngrok.com/download) | Teams app features (conversational bots, message extensions, and incoming webhooks) require inbound connections. A tunnel connects your development system to Teams. It isn't required for apps that only include tabs. This package is installed within the project directory (using npm `devDependencies`). |
    
      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).
    
- title: Set up local environment
  durationInMinutes: 1
  content: |
   Clone `BotBuilder-Samples` repository to your local GitHub:  

    1. Open [BotBuilder-Samples](https://github.com/Microsoft/BotBuilder-Samples).
    1. Select **Code**.
    1. From the dropdown menu, select **Open with GitHub Desktop**.

       :::image type="content" source="~/assets/images/Teams-task-module/clonerepository_1.png" alt-text="Clone repository":::


    1. Select **Clone**. 

- title: Create and register your bot in Azure AD portal
  durationInMinutes: 5
  content: |
    To create and register your bot in Microsoft Azure Active Directory (Azure AD), create a tunnel using ngrok, add messaging endpoint, and then perform the following steps:

    * Create Azure Bot resource to register bot with Azure Bot Service.
    * Create client secret to enable SSO authentication of the bot.
    * Add Teams channel to deploy the bot to a Teams channel.
    * Use ngrok to create a tunnel to your web server's endpoints.
    * Add messaging endpoint to the ngrok tunnel you created.

    **To create Azure Bot resource**

    1. Go to the [Microsoft Azure portal](https://portal.azure.com/).
    1. Select **Create a resource**.
    1. In the search box, enter **Azure Bot**.
    1. Select **Enter**.
    1. Select **Azure Bot**.

         :::image type="content" source="./assets/images/azure-bot_1.png" alt-text="Azure bot.":::

    1. Select **Create**.
    1. Enter required bot handle name in **Bot handle**.
    1. Select your **Subscription** and **Resource group** from the respective dropdown list.
        
         :::image type="content" source="./assets/images/sbs-messagingextension-action/create-azurebot_1.png" alt-text="Select resource Azure bot.":::
    
       You can also create a new resource group. Select **Create new** > enter resource name > select **OK**. Select the required location from **New resource group location** dropdown list.
        
        :::image type="content" source="~/assets/images/bots/newresource.png" alt-text="Screenshot showing the new resource group location.":::
       
    1. Select **Type of App** as **Multi Tenant**.
    
    1. In the **Microsoft App ID** section, by default **Create new Microsoft App ID** is selected. 
    
       You can also select **Use existing app registration** and enter **App ID**, **App tenant ID**, and **MSI resource ID**.

       > [!NOTE]
       > You can't create more than one bot with the same **Microsoft App ID**.

    1. Select **Review + create**.

       :::image type="content" source="~/assets/images/Teams-link-unfurling/register-bot-2_1.png" alt-text="Screenshot showing the creation of Microsoft App ID.":::

    1. Once the validation is passed, select **Create**.

        It takes a few moments for your bot service to be provisioned. 

    1. Select **Go to resource**. 

        :::image type="content" source="./assets/images/sbs-messagingextension-action/created-azure-bot_1.png" alt-text="Azure bot resource created.":::
   
        Your Azure bot is created and you can see the **Resource group** and **Subscription ID** in the Azure bot.

        :::image type="content" source="./assets/images/sbs-messagingextension-action/created-azure-bot_2.png" alt-text="Azure bot resource created2.":::

    **To create client secret**

      Perform the following steps if you've created a new **Microsoft App ID**:

    1. In the left pane, select **Configuration**. 

       > [!TIP]
       > Save the **Microsoft App ID** or **Client ID** for future reference.

    1. Next to **Microsoft App ID**, select **Manage**.

       :::image type="content" source="~/assets/images/sbs-messagingextension-action/manage-bot-label.png" alt-text="manage":::

    1. In the **Client secrets** section, select **New client secret**. 

       :::image type="content" source="~/assets/images/meetings-side-panel/newclientsecret_1.png" alt-text="Screenshot showing the selection of new client secret.":::
    
       The **Add a client secret** window appears.  

    1. Enter **Description** to the client secret.
    
    1. Select **Add**.

       :::image type="content" source="./assets/images/sbs-messagingextension-action/add-a-clientsecret_1.png" alt-text="Add client secret to app.":::

    1. In the **Value** column, select **Copy to clipboard**.

         :::image type="content" source="./assets/images/sbs-messagingextension-action/client-secret_1.png" alt-text="Value of client secret.":::

       
       > [!TIP]
       > Save the **Client secrets** value or app password for future reference.

    **To add the Teams channel**

    1. Select **Home**.

        :::image type="content" source="./assets/images/sbs-messagingextension-action/select-home_1.png" alt-text="Home page.":::

    1. Select your bot from **Recent resources**.

    1. Select **Channels** in the left pane and select **Microsoft Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>.

       :::image type="content" source="./assets/images/sbs-messagingextension-action/teams 1.png" alt-text="Select Teams.":::

    1. Select the checkbox to accept the **Terms of Service**.
    
    1. Select **Agree**.

       :::image type="content" source="~/assets/images/Teams-link-unfurling/terms.png" alt-text="Terms of service":::

    1. Select **Apply**.

       :::image type="content" source="~/assets/images/Teams-link-unfurling/apply.png" alt-text="Screenshot showing the selection of Teams.":::

    
    **To create tunnel for local web server**

    Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

     ```bash
     ngrok http --host-header=localhost 3978
     ```

    > [!TIP]
    > If you encounter **ERR_NGROK_4018**, follow the steps provided in the command prompt to sign-up and authenticate ngrok. Then run the `ngrok http --host-header=localhost 3978` command.

    **To add messaging endpoint**

    1. From ngrok, copy the HTTPS URL (https to io).

       :::image type="content" source="../msteams-platform/assets/images/sbs-messagingextension-action/ngrok-url.png" alt-text="ngrok HTTPS URL":::

        > [!NOTE]
        > The HTTPS URL in your ngrok is your fully qualified domain name.
        > The `WebAppDomain` is a fully qualified domain name that doesn't include `https://` in it.

    1. In **Settings**, select **Configuration**.

    1. In **Messaging endpoint**, use the HTTPS URL available from ngrok and at the end of the URL add **/api/messages**.

        :::image type="content" source="./assets/images/sbs-messagingextension-action/appuri_1.png" alt-text="App uri.":::

    1. Select **Apply**.

        You have successfully set up a bot in Azure Bot Service.


- title: Update the Azure AD app registration
  durationInMinutes: 1
  content: |
    1. Go to the [Azure portal](https://portal.azure.com/).

    1. Select **Azure Active Directory**.

    1. In the left navigation pane, select **App Registrations**.

    1. Select your bot.

       :::image type="content" source="./assets/images/sbs-messagingextension-action/app-registerations_1.png" alt-text="App registration.":::

    1. Under **Manage**, select **Expose an API**.

    1. Select **Set**.

       :::image type="content" source="./assets/images/sbs-messagingextension-action/set-exposeanapi_2.png" alt-text="Expose an API.":::

    1. Set the **Application ID URI** in the form of `api://{AppID}`.

       :::image type="content" source="./assets/images/sbs-messagingextension-action/set-link_1.png" alt-text="set link.":::

    1. Insert the `WebAppDomain` value between `api://` and `/{AppID}`.</br>
        `api://2bb1****.ngrok.io/{AppID}`</br>
        
       The following image shows the domain name:
        
        :::image type="content" source="./assets/images/sbs-messagingextension-action/exposeanapi_1.png" alt-text="Expose.":::

        > [!NOTE]
        > If you're using a tunneling service such as ngrok, ensure you update the value whenever your ngrok subdomain changes.
        > `For example: api://f631****.ngrok.io/92c11075-c629-4a1e-ab58-02b4fd4204c2`, where `f631****.ngrok.io` is the new ngrok subdomain name.

    1. Select **Add a scope**. 

        :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/selectscope_1.png" alt-text="Select scope":::

       The **Add a scope** window appears.
    
    1. Enter the following details to configure scope:
    
         * Enter `access_as_user` as the **Scope name**.
  
         * Set **Who can consent?** to `Admins and users`.
  
    1. To configure the admin and user consent prompts with appropriate values for `access_as_user` scope, provide the following information in the fields:</br>
    
         * Enter `Teams can access the user’s profile` as **Admin consent display name**.

         * Enter `Allows Teams to call the app’s web APIs as the current user` as **Admin consent description**.

         * Enter `Teams can access the user profile and make requests on the user’s behalf` as **User consent display name**.

         * Enter `Enable Teams to call this app’s APIs with the same rights as the user` as **User consent description**.
  
    1. Ensure that **State** is set to **Enabled**.
  
    1. Select **Add scope** to save.

        :::image type="content" source="./assets/images/sbs-messagingextension-action/addascopeuser_1.png" alt-text="Add a scope.":::

        > [!NOTE]
        > The **Scope name** should match with the **Application ID** URI with `/access_as_user` appended at the end.</br>
           `api://2bb1****.ngrok.io/00000000-0000-0000-0000-000000000000/access_as_user`

       :::image type="content" source="./assets/images/sbs-messagingextension-action/scopes_1.png" alt-text="scopes."::: 
  
    1. In the **Authorized client applications** section, identify the applications that you want to authorize for your app’s web application. 
    
    1. Select **Add a client application**. 

       :::image type="content" source="../msteams-platform/assets/images/meetings-side-panel/selectclientapp_1.png" alt-text="Screenshot showing the selection of client application.":::

    1. Enter **Client ID**: `1fec8e78-bce4-4aaf-ab1b-5451cc387264` for Teams mobile or desktop application. 

       :::image type="content" source="../msteams-platform/assets/images/meetings-side-panel/addclientapplication1.png" alt-text="Screenshot showing addition of client application":::

       You can enter **Client ID**: `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` for Teams web application.

       :::image type="content" source="../msteams-platform/assets/images/meetings-side-panel/addclientapplication2.png" alt-text="Screenshot of adding client ID.":::

    1. Select **Authorized scopes**.

        :::image type="content" source="./assets/images/sbs-messagingextension-action/authorizedscope_1.png" alt-text="Add client application 2.":::

       The following image displays the client IDs:

       :::image type="content" source="../msteams-platform/assets/images/meetings-side-panel/clientapps.png" alt-text="Screenshot showing the client app."::: 
  
    1. In the left pane, select **API Permissions**. 

       > [!NOTE]
       > Users need to consent to these permissions only if the Azure AD app is registered in a different tenant.

    1. Select **Add a permission**.

    1. Select **Microsoft Graph** > **Delegated permissions**. 

        :::image type="content" source="./assets/images/sbs-messagingextension-action/add-permission_2.png" alt-text="Add permission.":::

    1. Add the following permissions:</br>
         * **email**
         * **offline_access**
         * **OpenId**
         * **profile**
         * **User.Read**

    1. Select **Add permissions**.

         :::image type="content" source="./assets/images/sbs-messagingextension-action/other-permissions.png" alt-text="other permissions.":::

    1. From the left pane, select **Authentication** to set a redirect URI. 

       > [!NOTE]
       > If an app isn't granted IT admin consent, users must provide consent the first time they use an app.
               
         1. Select **Add a platform**.
         1. Select **Web**.

            :::image type="content" source="./assets/images/sbs-messagingextension-action/web_1.png" alt-text="web.":::

         1. Enter the redirect URI for your app by appending `auth-end` to fully qualified domain name:</br> 
           `https://2bb1****.ngrok.io/auth-end`. </br>

         1. Enable **Implicit grant and hybrid flows** by selecting the following checkboxes:
             * **ID tokens**
             * **Access tokens**
   
         1. Select **Configure**.

            :::image type="content" source="./assets/images/sbs-messagingextension-action/authend_1.png" alt-text="auth end.":::


- title: Set up app settings and manifest files
  durationInMinutes: 1
  content: |
    1. Go to **appsettings.json** in the cloned repository.

        :::image type="content" source="./assets/images/sbs-messagingextension-action/appsettingslocation_1.png" alt-text="location.":::

    1. Open **appsettings.json** in the latest version of Visual Studio and update the following information:  

         * Set `"MicrosoftAppType"` to **MultiTenant**.
         * Set `"MicrosoftAppId"` to your bot's **Microsoft App ID**.
         * Set `"MicrosoftAppPassword"` to your bot's **Value** of the **Client Secret ID**.
         * Leave `"MicrosoftAppTenantId"` blank for MultiTenant bot.
         * Set `"BaseUrl"` to the fully qualified domain name.

        :::image type="content" source="./assets/images/sbs-messagingextension-action/json-file_1.png" alt-text="Json file.":::

    1. Go to **manifest.json** in the cloned repository.

        :::image type="content" source="./assets/images/sbs-messagingextension-action/manifest location.png" alt-text="manifest location.":::
    
    1. Open **manifest.json** in latest version of Visual Studio and make the following changes:

         * Replace the `<<validDomains>>` with your fully qualified domain name.
         * Replace all occurrences of `<<Microsoft-App-ID>>` with your bot's **Microsoft App ID**.

        :::image type="content" source="./assets/images/sbs-messagingextension-action/manifest_1.png" alt-text="manifest file.":::


- title: Build and run the service
  durationInMinutes: 1
  content: |
    **To build and run the service using the latest version of Visual Studio or Command line**

    # [Latest version of Visual Studio](#tab/latestversionofvisualstudio)

       1. Launch the latest version of Visual Studio.
       1. Go to **File** > **Open** > **Project/Solution**.
    
          :::image type="content" source="./assets/images/sbs-messagingextension-action/VSopenfile_1.png" alt-text="open file.":::

       1. Select **TeamsMessagingExtensionsAction.csproj** file from **csharp_dotnet** folder.

          :::image type="content" source="./assets/images/sbs-messagingextension-action/openproject_1.png" alt-text="open project.":::

       1. Press **F5** to run the project.
    
       1. Select **Yes** if the following dialog appears:

          :::image type="content" source="./assets/images/sbs-messagingextension-action/certificate_1.png" alt-text="certificate.":::

          A webpage opens with a message **Your bot is ready!**.

          :::image type="content" source="./assets/images/sbs-messagingextension-action/appisready.png" alt-text="App ready."::: 

        
    # [Command line](#tab/cli)

    Go to **samples > csharp_dotnetcore > 51.teams-messaging-extensions-action** in Command Prompt window and enter the following command:

    ```bash
    dotnet run
    ```
   
    ![Dotnet](~/assets/images/sbs-messagingextension-action/dotnetruncmd.png)
      
- title: Add Action Message Extension app to Teams
  durationInMinutes: 1
  content: |
    1. In your cloned repository, go to **csharp_dotnetcore > 51.teams-messaging-extensions-action > TeamsAppManifest**.

    1. Create a .zip with the following files that are present in the **Manifest** folder: 
       * manifest.json
       * icon-outline.png
       * icon-color.png

    1. Go to **Microsoft Teams**.
    
    1. Select **Apps** > **Manage your apps** > **Upload an app** > **Upload a custom app**.

       :::image type="content" source="../msteams-platform/assets/images/sbs-messagingextension-action/uploadapp_1.png" alt-text="Zip file":::
   
    1. Select **Open** to upload the .zip file that you created in the **Manifest** folder.

       :::image type="content" source="./assets/images/sbs-messagingextension-action/openzipfile_1.png" alt-text="select zip.":::

    1. Select **Add**.

       :::image type="content" source="./assets/images/sbs-messagingextension-action/add_1.png" alt-text="Add the app.":::
    
                    
- title: Interact with the app in Teams
  durationInMinutes: 1
  content: |
    1. Select **Create Card** command from the compose box command list.

       :::image type="content" source="./assets/images/sbs-messagingextension-action/create-card.png" alt-text="create card.":::

    1. Enter your information in the modal pop-up.

       :::image type="content" source="./assets/images/sbs-messagingextension-action/output-card.png" alt-text="information.":::

    1. Select **Submit**.

       :::image type="content" source="./assets/images/sbs-messagingextension-action/submit.png" alt-text="information card.":::

    1. Right-click the card.
       
    1. Go to **More actions** > **Share Message**.

       :::image type="content" source="./assets/images/sbs-messagingextension-action/sharemessage.png" alt-text="Share card.":::

    1. Select the checkbox if you need to include image and submit.

       :::image type="content" source="./assets/images/sbs-messagingextension-action/sharemessageoutput.png" alt-text="Submit output.":::


- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

       :::image type="content" source="./assets/images/sbs-messagingextension-action/sharemessageoutput1.png" alt-text="Output.":::


- content: |
    You've completed the tutorial to get started with a **Action Message Extension** app!


