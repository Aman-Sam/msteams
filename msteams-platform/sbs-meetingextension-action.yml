### YamlMime:Tutorial
title: Build action based message extension
metadata:
  title: Build action based message extension
  description: With this learning module, learn how to set up action message extension for Teams to initiate actions from compose message and message area.
  audience: Developer
  level: Beginner
  ms.date: 24/02/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: messaging-extensions/how-to/action-commands/define-action-command.md
  nextTutorialTitle: Read more to enable message extension action commands
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    Message extensions allow users to interact with web services in the Microsoft Teams client. They help to initiate actions in an external system from the compose message area, the command box, or directly from a message.

    **Key features of action based message extension**

    * Presents the user with a modal pop-up to collect or display information.
    * Triggers the action commands from the compose message area, the command box, or from a message. 

    This step-by-step guide helps you to build Teams action-based message extension to initiate actions from compose message and message area. You'll see the following output:
       
      ![output](~/assets/images/sbs-messagingextension-action/sharemessageoutput1.png)
    

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure you install the following tools and set up your development environment:  

    * [Microsoft Teams](https://teams.microsoft.com/) with valid account
    * [.NET Core SDK](https://dotnet.microsoft.com/download) version 3.1
    * [Latest version of Visual Studio](https://visualstudio.microsoft.com/downloads/)
    * [ngrok](https://ngrok.com/download) latest version (only for devbox testing) or any equivalent tunneling solution
    
      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).
    
- title: Set up local environment
  durationInMinutes: 1
  content: |
   Clone `BotBuilder-Samples` repository to your local GitHub:  

    1. Open [BotBuilder-Samples](https://github.com/Microsoft/BotBuilder-Samples).
    1. Select **Code**.
    1. From the dropdown menu, select **Open with GitHub Desktop**.

       ![Clone repository](~/assets/images/sbs-messagingextension-action/botbuilder-sample.png)

    1. Select **Clone**. 

- title: Create and register your bot in Azure AD portal
  durationInMinutes: 5
  content: |
    To create and register your bot in Microsoft Azure Active Directory (Azure AD), create a tunnel using ngrok, add messaging endpoint, and then perform the following steps:

    * Create Azure Bot resource to register bot with Azure Bot Service.
    * Create client secret to enable SSO authentication of the bot.
    * Add Teams channel to deploy the bot to a Teams channel.
    * Use ngrok to create a tunnel to your web server's endpoints.
    * Add messaging endpoint to the ngrok tunnel you created.

    **To create Azure Bot resource**

    1. Go to the [Microsoft Azure portal](https://portal.azure.com/).
    1. Select **Create a resource**.
    1. In the search box, enter **Azure Bot**.
    1. Select **Enter**.
    1. Select **Azure Bot**.

         :::image type="content" source="./assets/images/azure-bot.png" alt-text="Azure bot.":::

    1. Select **Create**.
    1. Enter required bot handle name in **Bot handle**.
    1. Select your **Subscription** from the dropdown list.
    1. Select your **Resource group** from the dropdown list. 
    
        ![Select resource Azure bot](~/assets/images/sbs-messagingextension-action/create-azurebot.png) 
    
       You can also create a new resource group (select **Create new** > enter resource name > select **OK**).
    
    1. In the **Microsoft App ID** section, by default **Create new Microsoft App ID** is selected. 
     
       You can either select **Use existing app registration** and enter **Existing app ID** and **Existing app password**, or select **Create new Microsoft App ID**.

       > [!NOTE]
       > You can't create more than one bot with the same **Microsoft App ID**.

    1. Select **MultiTenant** under **Bot Type**.

        ![Bot type](~/assets/images/Teams-Messaging-Extensions-Search/bot-type.png) 

    1. Select **Review + create**.

        ![Create Microsoft App ID](~/assets/images/sbs-messagingextension-action/review-create.png)

    1. If the validation passes, select **Create**. 

        It takes a few moments for your bot service to be provisioned. 

    1. Select **Go to resource**. 

        ![Deploy App](~/assets/images/sbs-messagingextension-action/resource-file.png)

        Your Azure bot is created.

        ![Azure bot resource created](assets/images/sbs-messagingextension-action/created-azure-bot.png)

    **To create client secret**

      Perform the following steps if you've created a new **Microsoft App ID**:

    1. In the left panel, select **Configuration**. 

       > [!TIP]
       > Save the **Microsoft App ID** or **Client ID** for future reference.

    1. Next to **Microsoft App ID**, select **Manage**.

       :::image type="content" source="~/assets/images/manage-bot-label.png" alt-text="manage":::

    1. In the **Client secrets** section, select **New client secret**. 

        ![New client secret](~/assets/images/sbs-messagingextension-action/adding-client-secret.png)
    
       The **Add a client secret** window appears.  

    1. Enter **Description**.
    
    1. Select **Add**.

        ![Add client secret to app](~/assets/images/sbs-messagingextension-action/add-a-clientsecret.png)

    1. In the **Value** column, select **Copy to clipboard**.

         ![Value of client secret](~/assets/images/sbs-messagingextension-action/client-secret.png)
       
       > [!TIP]
       > Save the **Client secrets** value or app password for future reference.

    **To add the Teams channel**

    1. Select **Home**.

        ![Home page](~/assets/images/sbs-messagingextension-action/select-home.png)

    1. Select your bot from **Recent resources**.

    1. Select **Channels** in the left pane and select **Microsoft Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>.

       :::image type="content" source="./assets/images/adaptive-cards/channel-teams.png" alt-text="Select Teams.":::

    1. Select the checkbox to accept the **Terms of Service**.
    
    1. Select **Agree**.

          ![Terms of service](~/assets/images/sbs-messagingextension-action/agree.png)

    1. Select **Save**.

          ![Select Teams](~/assets/images/sbs-messagingextension-action/configure-msteams.png)   
    
    **To create tunnel for local web server**

    Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

     ```bash
     ngrok http -host-header=localhost 3978
     ```

    > [!TIP]
    > If you encounter **ERR_NGROK_4018**, follow the steps provided in the command prompt to sign-up and authenticate ngrok. Then run the `ngrok http -host-header=localhost 3978` command.

    **To add messaging endpoint**

    1. From ngrok, copy the HTTPS URL (https to io).

       :::image type="content" source="../msteams-platform/assets/images/ngrok-url.png" alt-text="ngrok HTTPS URL":::

        > [!NOTE]
        > The HTTPS URL in your ngrok is your fully qualified domain name.
        > The `WebAppDomain` is a fully qualified domain name that doesn't include `https://` in it.

    1. In **Settings** for the Azure bot that you created, select **Configuration**.

    1. In **Messaging endpoint**, use the HTTPS URL available from ngrok and at the end of the URL add **/api/messages**.

        ![App URI](~/assets/images/sbs-messagingextension-action/appuri.png)

    1. Select **Apply**.

        You have successfully set up a bot in Azure Bot Service.


- title: Update the Azure AD app registration
  durationInMinutes: 1
  content: |
    1. Go to the [Azure portal](https://portal.azure.com/).

    1. Select **Azure Active Directory**.

    1. In the left navigation panel, select **App Registrations**.

    1. Select your bot.

       ![App registration](~/assets/images/sbs-messagingextension-action/app.-registerations.png)

    1. Under **Manage**, select **Expose an API**.

    1. Select **Set**.

       ![Expose an API](~/assets/images/sbs-messagingextension-action/set-exposeanapi.png)

    1. Set the **Application ID URI** in the form of `api://{AppID}`.

       ![Set link](~/assets/images/sbs-messagingextension-action/set-link.png)

    1. Insert the `WebAppDomain` value between `api://` and `/{AppID}`.</br>
        `api://2bb1****.ngrok.io/{AppID}`</br>
        
       The following image shows the domain name:
        
        ![Expose](~/assets/images/sbs-messagingextension-action/exposeanapi.png)

        > [!NOTE]
        > If you're using a tunneling service such as ngrok, ensure you update the value whenever your ngrok subdomain changes.
        > `For example: api://f631****.ngrok.io/92c11075-c629-4a1e-ab58-02b4fd4204c2`, where `f631****.ngrok.io` is the new ngrok subdomain name.

    1. Select **Add a scope**. 

       ![Select scope](~/assets/images/sbs-messagingextension-action/addascope.png)
    
    1. In the panel that appears, enter `access_as_user` as the **Scope name**.
  
    1. Set **Who can consent?** to `Admins and users`.
  
    1. To configure the admin and user consent prompts with appropriate values for `access_as_user` scope, provide the following information in the fields:</br>
    
         * Enter `Teams can access the user’s profile` as **Admin consent display name**.

         * Enter `Allows Teams to call the app’s web APIs as the current user` as **Admin consent description**.

         * Enter `Teams can access the user profile and make requests on the user’s behalf` as **User consent display name**.

         * Enter `Enable Teams to call this app’s APIs with the same rights as the user` as **User consent description**.
  
    1. Ensure that **State** is set to **Enabled**.
  
    1. Select **Add scope** to save.

        ![Add a scope](~/assets/images/sbs-messagingextension-action/addascopeuser.png)

        > [!NOTE]
        > The **Scope name** should match with the **Application ID** URI with `/access_as_user` appended at the end.</br>
           `api://2bb1****.ngrok.io/00000000-0000-0000-0000-000000000000/access_as_user`

        ![Scopes](~/assets/images/sbs-messagingextension-action/scopes.png) 
  
    1. In the **Authorized client applications** section, identify the applications that you want to authorize for your app’s web application. 
    
    1. Select **Add a client application**. 

        ![Select client application](~/assets/images/sbs-messagingextension-action/clientapps.png) 

    1. Enter **Client ID**: `1fec8e78-bce4-4aaf-ab1b-5451cc387264` for Teams mobile or desktop application. 

        ![Add client application 1](~/assets/images/sbs-messagingextension-action/addclientapplication1.png) 

       You can enter **Client ID**: `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` for Teams web application.

        ![Add client application 2](~/assets/images/sbs-messagingextension-action/addclientapplication2.png) 

    1. Select **Authorized scopes**.

        ![Add client application 2](~/assets/images/sbs-messagingextension-action/authorizedscope.png) 

       The following image displays the client IDs:

        ![Client applications](~/assets/images/sbs-messagingextension-action/clientapp.png) 
  
    1. In the left panel, select **API Permissions**. 

       > [!NOTE]
       > Users need to consent to these permissions only if the Azure AD app is registered in a different tenant.

    1. Select **Add a permission**.

        ![Add permission](~/assets/images/meetings-side-panel/addpermission.png)


    1. Select **Microsoft Graph**.

    1. Select **Delegated permissions**.

    1. Add the following permissions:</br>
         * **email**
         * **offline_access**
         * **OpenId**
         * **profile**
         * **User.Read**

    1. Select **Add permissions**.

         ![Other permissions](~/assets/images/sbs-messagingextension-action/other-permissions.png)

    1. From the left panel, select **Authentication** to set a redirect URI. 

       > [!NOTE]
       > If an app isn't granted IT admin consent, users must provide consent the first time they use an app.
               
         1. Select **Add a platform**.
         1. Select **Web**.

            ![Web](~/assets/images/sbs-messagingextension-action/web.png)

         1. Enter the redirect URI for your app by appending `auth-end` to fully qualified domain name:</br> 
           `https://2bb1****.ngrok.io/auth-end`. </br>

         1. Enable **Implicit grant and hybrid flows** by selecting the following checkboxes:
             * **ID tokens**
             * **Access tokens**
   
         1. Select **Configure**.

            ![Auth-end](~/assets/images/sbs-messagingextension-action/authend.png)


- title: Set up app settings and manifest files
  durationInMinutes: 1
  content: |
    1. Navigate to **appsettings.json** in cloned repository.

        ![App settings location](~/assets/images/sbs-messagingextension-action/appsettingslocation.png)

    1. Open **appsettings.json** in latest version of Visual Studio and update the following information:  

         * Set `"MicrosoftAppType"` to **MultiTenant**.
         * Set `"MicrosoftAppId"` to your bot's **Microsoft App ID**.
         * Set `"MicrosoftAppPassword"` to your bot's **Value** of the **Client Secret ID**.
         * Leave `"MicrosoftAppTenantId"` blank for MultiTenant bot.
         * Set `"BaseUrl"` to the fully qualified domain name.

        ![App settings](~/assets/images/sbs-messagingextension-action/json-file.png)

    1. Navigate to `manifest.json` in cloned repository.

        ![Manifest file location](~/assets/images/sbs-messagingextension-action/manifestlocation.png)
    
    1. Open `manifest.json` in latest version of Visual Studio and make the following changes:

         * Replace the `<<validDomains>>` with your fully qualified domain name.
         * Replace all occurrences of `<<Microsoft-App-ID>>` with your bot's **Microsoft App ID**.

        ![Manifest image2](~/assets/images/sbs-messagingextension-action/botid1.png)

- title: Build and run the service
  durationInMinutes: 1
  content: |
    **To build and run the service using latest version of Visual Studio or Command line**

    # [Latest version of Visual Studio](#tab/latestversionofvisualstudio)

       1. Launch the latest version of Visual Studio.
       1. Navigate to **File** > **Open** > **Project/Solution**.
    
          ![Open file](~/assets/images/sbs-messagingextension-action/VSopenfile.png)

       1. Select **TeamsMessagingExtensionsAction.csproj** file from **csharp_dotnet** folder.

          ![Solution File](~/assets/images/sbs-messagingextension-action/openproject.png)

       1. Press **F5** to run the project.
    
       1. Select **Yes** if the following dialog appears:

          ![Trust Certificate](~/assets/images/sbs-messagingextension-action/certificate.png)

          A webpage opens with a message **Your bot is ready!**.

          ![App ready](~/assets/images/sbs-messagingextension-action/appisready.png) 

        
    # [Command line](#tab/cli)

    Navigate to **samples > csharp_dotnetcore > 51.teams-messaging-extensions-action** in Command Prompt window and enter the following command:

    ```bash
    dotnet run
    ```
   
    ![Dotnet](~/assets/images/sbs-messagingextension-action/dotnetruncmd.png)
      
- title: Add Action Message Extension app to Teams
  durationInMinutes: 1
  content: |
    1. In your cloned repository, navigate to **csharp_dotnetcore > 51.teams-messaging-extensions-action > TeamsAppManifest**.

    1. Create a .zip with the following files that are present in the **Manifest** folder: 
       * manifest.json
       * icon-outline.png
       * icon-color.png

       ![Zip file](~/assets/images/sbs-messagingextension-action/zipfile.png) 

    1. Go to **Microsoft Teams**.
    
    1. Select **Apps**.

    1. Select **Manage your apps**.
    
    1. Select **Upload a custom app**.
   
       ![Upload](~/assets/images/sbs-messagingextension-action/uploadacustomapp1.png)

    1. Select **Open** to upload the .zip file that you created in the **Manifest** folder.

       ![Select zip file](~/assets/images/sbs-messagingextension-action/openzipfile.png)

    1. Select **Add**.

       ![Add the app](~/assets/images/sbs-messagingextension-action/add.png)
    
                    
- title: Interact with the app in Teams
  durationInMinutes: 1
  content: |
    1. Select **Create Card** command from the compose box command list.

       ![card](~/assets/images/sbs-messagingextension-action/create-card.png)

    1. Enter your information in the modal pop-up.

       ![information](~/assets/images/sbs-messagingextension-action/output-card.png)

    1. Select **Submit**.

       ![submit](~/assets/images/sbs-messagingextension-action/submit.png)

    1. Select (...) from the overflow menu.
       
    1. Navigate to **More actions**.

    1. Select **Share Message**.

       ![Share card](~/assets/images/sbs-messagingextension-action/sharemessage.png)

    1. Select the checkbox if you need to include image and submit.

       ![output](~/assets/images/sbs-messagingextension-action/sharemessageoutput.png)

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

       ![Output](~/assets/images/sbs-messagingextension-action/sharemessageoutput1.png)


- content: |
    You've completed the tutorial to get started with a **Action Message Extension** app!


