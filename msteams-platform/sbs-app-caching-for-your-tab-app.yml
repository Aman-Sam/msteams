### YamlMime:Tutorial
title: App caching for your tab app in Teams meeting
metadata:
  title: App caching for your tab app in Teams meeting
  description: With this learning module, you'll learn how to enable app caching for your tab app in Teams meeting.
  audience: Developer
  level: Beginner
  ms.date: 05/17/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: apps-in-teams-meetings/build-tabs-for-meeting.md
  nextTutorialTitle: Read more on Build tabs for meeting
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
   App caching helps you to improve subsequent launch time of the apps that are loaded in the meeting side panel. You can enable app caching for your tab app in Teams meeting.
  
   This step-by-step guide helps you to create a sample app with app caching. After you complete this guide, you'll see the app cached in the meeting side panel as shown in the following video:

      :::image type="content" source="~/assets/images/app-caching/app-caching.gif" alt-text="The gif shows the app caching experience when you navigate into different instance in Teams meeting.":::
    
- title: Prerequisites
  durationInMinutes: 1
  content: |

    Ensure you install the following tools and set up your development environment:
 
    * [Microsoft Teams](https://www.microsoft.com/microsoft-teams/log-in) with a valid account
    * [Latest version of Visual Studio Code](https://code.visualstudio.com/download)
    * [Latest version of nodejs](https://nodejs.org/en/download/)
    * [Latest version of ngrok](https://ngrok.com/download) or equivalent tunneling solution
      
      > [!NOTE]
      > If you're downloading ngrok for the first time, sign up and install [authtoken](https://ngrok.com/download).

    ### Set up your Teams development tenant

       A **tenant** is like a space, or a container for your organization in Teams, where you chat, share files, and run meetings. This space is also where your sideload and test your app. Let's verify if you're ready to develop with the tenant.

    #### Check for sideloading option

       After creating the app, you must load your app in Teams without distributing it. This process is known as sideloading. Sign in to your Microsoft 365 account to view this option.

       > [!NOTE]
       > Sideloading is necessary for previewing and testing apps in Teams local environment. If it isn't enabled, you won't be able to preview and test your app in Teams locally.

      Do you already have a tenant, and do you have the admin access? Let's check if you really do!

      Verify if you can sideload apps in Teams:

       1. In the Teams client, select the **Store** icon.
       1. Select **Manage your apps**.
       1. Select **Publish an app**.
       1. Look for the option to **Upload a custom app**. If you see the option, sideloading apps is enabled.

           :::image type="content" source="~/assets/images/teams-toolkit-v2/spfx-custom-new1.png" alt-text="bot home":::

           >  [!NOTE]
           > If you don't have the option to upload a custom app, talk to your Teams administrator.

- title: Set up local environment
  durationInMinutes: 1
  content: |

    1. Open [Microsoft Teams Samples](https://github.com/OfficeDev/Microsoft-Teams-Samples).

    1. Select **Code**. From the dropdown menu, select **Open with GitHub Desktop**.

       :::image type="content" source="../msteams-platform/assets/images/tab-device-permission/cloner-epository-tab-device_1.png" alt-text="cloning the repository":::

    1. Select **Clone**.

       The sample app is cloned on your GitHub desktop. Ensure that you note the sample app location for later use.

- title: Build and run the sample app with app caching
  durationInMinutes: 1
  content: |

    1. Open Visual Studio Code, and then open a terminal window.

    1. Run the following command to go to the app cache sample app folder:

        ```
        cd samples\app-cache-meetings\nodejs
        ```
        
    1. Run the following command to install the dependency package:

        ```
        npm install
        ```
        
    1. Run the following command to start the client and the local server:

        ```
        npm start
        ```

       A new browser tab opens the localhost window. The port 3978 is used for this code sample.

       :::image type="content" source="~/assets/images/app-caching/app-caching-local-host.png" alt-text="Screenshot shows you the local host 3978 running in the browser.":::

    1. Open a new ngrok terminal window to create a tunnel and deploy your app locally.

    1. Run the following command to create a tunnel. The sample app uses the port 3978:

        ```
        ngrok http -host-header=rewrite 3978
        ```
        The ngrok tunnel is created.
        
        :::image type="content" source="~/assets/images/app-caching/app-caching-ngrok.png" alt-text="Screenshot shows you the ngrok tunnel running.":::

        You've successfully created the ngrok tunnel. Ensure that you note the https endpoint for later use.

- title: Set up manifest file and sideload your app
  durationInMinutes: 1
  content: |
   You need to set up the manifest file and upload the manifest.zip package to Teams.

     1. Open your code sample in Visual Studio Code.
     
     1. Go to `appPackage` > `manifest.json`.
       
     1. Replace `id` with GUID. You can use [GUID generator](https://guidgenerator.com/) to generate GUID.
       
     1. Replace `<<Valid_Domain>>` without your https endpoint from ngrok. Use the endpoint that you saved after creating the ngrok tunnel.
      
     1. Zip the contents of the **manifest** folder to create `manifest.zip`.

        The `manifest.zip` is your app package. Ensure the package contains only the `manifest.json` source file, `color` icon, and  the `outline` icon.
     
        You've successfully created the app package for your app. You can use this app package to sideload your app into Teams.

     ## Sideload your app to the Teams meeting

      1. Open **Microsoft Teams**.

      1. Schedule a meeting using the calendar in Teams. Ensure that you have invited atleast one attendee for the meeting.

      1. Join the meeting.

      1. In the meeting window, select **+ Apps** > **Manage apps**.

         :::image type="content" source="~/assets/images/app-caching/app-caching-manage-apps.png" alt-text="Screenshot shows you the manage apps button to add apps.":::

      1. Select **Upload a custom app**.

         The **Open** dialog appears.

      1. Select the `manifest.zip` file and upload it.

      1. Select **Add** to add the app to the meeting.

         :::image type="content" source="~/assets/images/app-caching/app-caching-add-app.png" alt-text="Screenshot shows you the add app to your meeting.":::
         
      1. Select **+ Apps**, and then select **App Caching In Meeting**.

         :::image type="content" source="~/assets/images/app-caching/app-caching-add-app-meeting.png" alt-text="Screenshot shows how to add apps to your meeting tab.":::

      1. Select **Save**.

         :::image type="content" source="~/assets/images/app-caching/add-app-save.png" alt-text="Screenshot shows how to add apps to your meeting tab with Save button.":::
         
         The sample app is added to the Teams meeting side panel.

         :::image type="content" source="~/assets/images/app-caching/app-cached-in-meeting.png" alt-text="Screenshot shows app cached in Teams meeting side panel.":::

- title: Test your app
  durationInMinutes: 1
  content: |
   Go to any other tab and come back to the app caching tab. You can see that your app is cached in the meeting side panel.

   :::image type="content" source="~/assets/images/app-caching/app-caching.gif" alt-text="The gif shows the app caching experience when you navigate into different instance in meeting.":::
    
- title: Complete challenge
  durationInMinutes: 1
  content: |

    Did you come up with something like this?
    
    :::image type="content" source="~/assets/images/app-caching/app-cached-in-meeting.png" alt-text="Screenshot shows app cached in meeting side panel.":::

- content: |
    You've completed the tutorial to build sample apps with app caching.

