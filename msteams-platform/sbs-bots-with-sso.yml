### YamlMime:Tutorial
title: Build a bot with SSO authentication
metadata:
  title: Build a bot with SSO authentication
  description: In this tutorial, you'll learn to build a bot with SSO authentication.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/how-to/authentication/auth-aad-sso-bots.md
  nextTutorialTitle: Read more on bot authentication
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    Teams bots are conversational bots that run repetitive automated tasks done by the users, such as customer service. The user needs to sign in multiple times without single sign-on (SSO) authentication. With SSO authentication methods, the users don't need to sign-in to the bot multiple times.
    
    A bot behaves differently depending on the conversation it's involved in:

    * Bots in channel and group chat conversations require the users to @mention the bot.
    * Bots in a one-to-one conversation don't require an @mention. All messages sent by the user routes to the bot.
    
    This step-by-step guide helps you to build a bot with SSO authentication. You'll see the following output:

     :::image type="content" source="~/assets/images/bots/sbs-desktop-mobile.png" alt-text="Mobile signed in to bot":::

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure you install the following tools and set up your development environment:  

     | &nbsp; | Install | For using... |
     | --- | --- | --- |
     | **Required** | &nbsp; | &nbsp; |
     | &nbsp; | [Microsoft Teams with an account (not a guest account)](https://www.microsoft.com/microsoft-teams/download-app) |  Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, call and all in one place. |
     | &nbsp; | [Visual Studio 2022 version 17.3](https://visualstudio.microsoft.com)<br> Install one of the following two workloads:<br> • **ASP.NET and web development** <br> • **.NET Core cross-platform development** | You can install the enterprise version in Visual Studio 2022, and install the workloads. |
     | &nbsp; | [Microsoft 365 developer account](/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | Access to Teams account with the appropriate permissions to install an app. |
     | &nbsp; | [ngrok](https://ngrok.com/download) | Teams app features (conversational bots, message extensions, and incoming webhooks) require inbound connections. A tunnel connects your development system to Teams. It isn't required for apps that only include tabs. This package is installed within the project directory (using npm `devDependencies`). |

      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).

    ## Set up your Teams development tenant

       A **tenant** is like a space or a container where you chat, share files, and run meetings for your organization in Teams. You can also sideload and test the app.

    ### Check for sideloading option

        After creating the app, you must load your app in Teams without distributing it. This loading is known as sideloading. Sign-in to your Microsoft 365 account to view this option.

       > [!NOTE]
       > Sideloading is necessary for previewing and testing apps in Teams local environment. Enable Sideloading to preview and test your app in Teams locally.

        Do you already have a tenant, and do you have the admin access? Let's check if you really do!

    To verify sideload apps in Teams:

    1. In the Teams client, select **Apps**.
    1. Select **Manage your apps** > **Upload an app**.
    1. Look for the option to **Upload a custom app**. If you see the option, sideloading apps is enabled.

        :::image type="content" source="~/assets/images/bots/upload-custom-app1_1.png" alt-text="Illustration shows the option to upload a custom app in Teams.":::

        > [!NOTE]
        > If you don't have the option to upload a custom app, contact Teams administrator.

    ### Create a free Teams developer tenant (optional)

    If you don't have a Teams developer account, you can get it free. Join the Microsoft 365 developer program!

    1. Go to the [Microsoft 365 developer program](https://developer.microsoft.com/microsoft-365/dev-program).
    1. Select **Join Now** and follow the onscreen instructions.
    1. Select **Setup E5 subscription** from the welcome screen.
    1. Set up administrator account. After you finish, the following screen displays.

          :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png" alt-text="Microsoft":::

    1. Sign-in to Teams using the new administrator account. Now you should have the **Upload a custom app** option.

- title: Create and register your bot
  durationInMinutes: 5
  content: |
    The following steps help you to create and register your bot in Azure portal:

    1. Create Azure Bot resource to register bot with Azure Bot Service.
    1. Create client secret to enable SSO authentication of the bot.
    1. Add Teams channel to deploy the bot.
    1. Use ngrok to create a tunnel to your web server's endpoints.
    1. Add messaging endpoint to the ngrok tunnel you created.

    **To create Azure Bot resource**

    1. Go to the [Azure portal](https://portal.azure.com/).

    1. Select **Create a resource**.

        :::image type="content" source="~/assets/images/bots/Createaresource_1.png" alt-text="Create Resource":::

    1. In the search box, enter **Azure bot**.

        :::image type="content" source="~/assets/images/bots/searchazurebot_1.png" alt-text="Create Resource":::

    1. Select **Enter**.

    1. Select **Azure Bot**.

        :::image type="content" source="~/assets/images/bots/selectazurebot_1.png" alt-text="Select Azure Bot":::

    1. Select **Create**.

        :::image type="content" source="./assets/images/bots/azure-bot_1.png" alt-text="Azure bot.":::

       The **Create an Azure Bot** window appears.

        :::image type="content" source="~/assets/images/bots/azurebotpage.png" alt-text="Screenshot showing the Azure bot page.":::

    1. Enter the following details to create Azure bot.

        1. Enter required bot handle name in **Bot handle**.
    
        1. Select your **Subscription** and **Resource group** from the dropdown list.

             :::image type="content" source="~/assets/images/bots/Azurebotcreate.png" alt-text="Screenshot showing the details while creating resource Azure bot.":::
      
        1. To create a new resource group, select the required location from **New resource group location** dropdown list.
           For more information, see [Create resource group](/azure/azure-resource-manager/management/manage-resource-groups-portal#create-resource-groups).
        
             :::image type="content" source="~/assets/images/bots/newresource.png" alt-text="Screenshot showing the new resource group location":::
        
        1. Select **Type of App** as **Multi Tenant**. 

        1. In the **Microsoft App ID** section, by default **Create new Microsoft App ID** is selected.
    
           You can also select **Use existing app registration** and enter existing **App ID**, **App tenant ID**, and **MSI resource ID**.

             :::image type="content" source="~/assets/images/bots/Review-Create.png" alt-text="Screenshot showing the selection of multi tenant option. ":::

           > [!NOTE]
           > You can't create more than one bot with the same **Microsoft App ID**.

        1. Select **Review + create**.
    
    1. After the validation is passed, select **Create**.

         :::image type="content" source="~/assets/images/bots/validationpass.png" alt-text="Screenshot showing the validation Pass.":::
  
       It takes a few moments for your bot service to be provisioned and the following page appears.

         :::image type="content" source="~/assets/images/bots/provisionpage_1.png" alt-text="Provision Page":::

    1. Select **Go to resource**.

        :::image type="content" source="~/assets/images/bots/gotoresource_1.png" alt-text="Resource":::

       Your Azure bot is created. You can see the **Resource group** and **Subscription ID** details in the Azure bot.

         :::image type="content" source="~/assets/images/bots/Azurebotresource_1.png" alt-text="Azure bot resource created":::

    **To create client secret**

     Perform the following steps to create client secret:

    1. In the left pane, select **Configuration**.

        :::image type="content" source="~/assets/images/bots/selectconfigure_1.png" alt-text="Select Configure":::

       > [!Tip]
       > Save the **Microsoft App ID** or **Client ID** for future reference.
    
    1. Next to **Microsoft App ID**, select **Manage**.

       :::image type="content" source="~/assets/images/manage-bot-label_1.png" alt-text="manage bot":::

    1. In the **Client secrets** section, select **New client secret**.

          :::image type="content" source="~/assets/images/bots/newclientsecret.png" alt-text="Screenshot showing the selection of new client secret.":::

       The **Add a client secret** window appears.

    1. Enter **Description**.
    
    1. Select **Add**.
 
        :::image type="content" source="~/assets/images/bots/addclientsecret.png" alt-text="Screenshot showing adding client secret to app.":::

    1. In the **Value** column, select copy to clipboard icon to copy the value details. 

        :::image type="content" source="~/assets/images/bots/valueclientsecret.png" alt-text="Screenshot showing the value of client secret copied to clipboard.":::

       > [!Tip]
       > Save the **Client secrets** value or app password for future reference.
       
    **Add bot to the Teams channel**

    1. Select **Home**.

        :::image type="content" source="~/assets/images/bots/selecthome_1.png" alt-text="Home page":::

    1. Select your bot from **Recent resources**.

        :::image type="content" source="~/assets/images/bots/select-recent-resources_1.png" alt-text="Select recent resources":::

    1. Select **Channels** in the left pane. 
  
        :::image type="content" source="~/assets/images/bots/selectchannel_1.png" alt-text="Select recent":::

    1. Select **Microsoft Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>. 
    
        :::image type="content" source="~/assets/images/bots/select-microsoft-teams_1.png" alt-text="Select Microsoft Teams":::

    1. Select the checkbox to accept the **Terms of Service**.
    
    1. Select **Agree**.

        :::image type="content" source="~/assets/images/bots/Terms-of-service_1.png" alt-text="Terms":::

    1. Select **Apply**.

        :::image type="content" source="~/assets/images/bots/apply.png" alt-text="Screenshot showing the option apply":::
    
    **To create tunnel for local web server**

    Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

       ```bash
       ngrok http --host-header=localhost 3978
       ```
       > [!TIP]
       > If you encounter **ERR_NGROK_4018**, follow the steps, as displayed in the command prompt to sign up and authenticate ngrok. Then run the `ngrok http --host-header=localhost 3978` command.

    **To add messaging endpoint**

    1. From ngrok, copy the HTTPS URL.

       :::image type="content" source="../msteams-platform/assets/images/ngrok-url.png" alt-text="ngrok HTTPS URL":::

        > [!NOTE]
        > The HTTPS URL in your ngrok is your fully qualified domain name.
        > The `WebAppDomain` is a fully qualified domain name that doesn't include `https://` in it.

    1. Go back to the Azure portal.

    1. In **Settings** for the Azure bot that you created, select **Configuration**.

        :::image type="content" source="~/assets/images/bots/select-configuration_1.png" alt-text="Select Configuration":::

    1. In **Messaging endpoint**, use the HTTPS URL available from ngrok and at the end of the URL add **/api/messages**.

        :::image type="content" source="~/assets/images/bots/messagingURL_1.png" alt-text="Messaging endpoint":::

    1. Select **Apply**.

        You have successfully set up a bot in Azure Bot Service.

- title: Configure SSO for your bot
  durationInMinutes: 5
  content: |
    **To add Redirect URI to the Azure bot resource**

    1. Select **Home** > **Azure Active Directory**.

    1. From the left pane, select **App registrations**.

    1. Select your bot.

    1. From the left pane, select **Authentication** to set a redirect URI.

         :::image type="content" source="~/assets/images/bots/select-authentication_1.png" alt-text="Select Authentication":::

    1. In **Platform configurations**, select **Add a platform** to choose the platform on which you want to host the bot app. 

    1. For this tutorial, Select **Web**.

        :::image type="content" source="~/assets/images/bots/select-web_1.png" alt-text="Screenshot showing the selection of web.":::
        
    1. Enter **Redirect URIs** as `https://token.botframework.com/.auth/web/redirect` and this URI on which Azure AD will send response for user authentication.

    1. Enable **Implicit grant and hybrid flows** by selecting the following checkboxes:

        * **ID tokens**
        * **Access tokens**
    
    1. Select **Configure**.

        :::image type="content" source="~/assets/images/bots/select-implict-grant_1.png" alt-text="Screenshot showing the selection of configure.":::
 
        The Redirect URI is added to the Azure bot resource.

        :::image type="content" source="~/assets/images/bots/redirectURIadded.png" alt-text="Screenshot showing redirect URI added to bot resource.":::

    **To expose API endpoint**

    1. From the left pane, select **Expose an API**.

        :::image type="content" source="~/assets/images/bots/expose-an-api_1.png" alt-text="Expose an API":::

    1. Select **Set**.

        :::image type="content" source="~/assets/images/bots/appidURI.png" alt-text="Screenshot showing the set option.":::

    1. Set the Application ID URI in the form of `api://botid-{your AppID}`.

    1. Select **Save**.

        :::image type="content" source="~/assets/images/bots/exposeAPI_1.png" alt-text="Screenshot showing save option.":::
    
       > [!NOTE]
       > If you're using a tunneling service such as ngrok, ensure you update the value whenever your ngrok subdomain changes.
       > `For example: api://f631****.ngrok.io/92c11075-c629-4a1e-ab58-02b4fd4204c2`, where `f631****.ngrok.io` is the new ngrok subdomain name.

    1. Select **Add a scope**.

        :::image type="content" source="~/assets/images/bots/Addascope.png" alt-text="Screenshot showing adding a scope.":::

       The **Add a scope** window appears.

    1. Enter the details to configure scope.    

          1. Enter `access_as_user` as the **Scope Name**.

             > [!NOTE]
             > The **Scope name** should match with the **Application ID** URI with `/access_as_user` appended at the end.

          1. Set **Who can consent?** to `Admins and users`.

          1. To configure the admin and user consent prompts with appropriate values for `access_as_user` scope, provide the following information in the fields:</br>
    
              * Enter `Teams can access the user’s profile` as **Admin consent display name**.

              * Enter `Allows Teams to call the app’s web APIs as the current user` as **Admin consent description**.

              * Enter `Teams can access the user profile and make requests on the user’s behalf` as **User consent display name**.

              * Enter `Enable Teams to call this app’s APIs with the same rights as you have` as **User consent description**.

          1. Ensure that **State** is set to **Enabled**.

          1. Select **Add scope** to save.

         :::image type="content" source="~/assets/images/bots/addscope.png" alt-text="Screenshot showing configuring scope.":::

       Your Application ID URI is created with **Scope name**.

        :::image type="content" source="~/assets/images/bots/ExposeAPI_2.png" alt-text="Screenshot showing API exposed and scope added.":::

    1. In the **Authorized client applications** section, identify the applications that you want to authorize for your app’s web application.
    
    1. Select **Add a client application**.

        :::image type="content" source="~/assets/images/bots/addaclientapplication.png" alt-text="Screenshot showing adding a client application.":::

       The **Add a client application** window appears.

    1. Enter the Client ID for desktop and web application separately that you want to authorize. It's the application ID of client application that you want to authorize.
       
       |**Client ID**|**For authorizing**|
       |--------|-------------|
       | `1fec8e78-bce4-4aaf-ab1b-5451cc387264` | Teams desktop or mobile application |
       | `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` | Teams web application |

    1. Select **Authorized scopes** to determine which type of token will be returned by the service.

        :::image type="content" source="~/assets/images/bots/add-desktop-app.png" alt-text="Screenshot showing the selection of authorized scopes.":::
       
    1. Select **Add application**.

        The following image displays the Client ID:

          :::image type="content" source="~/assets/images/bots/clientapps.png" alt-text="Screenshot showing the addition of client ID.":::

    **Configure Graph permissions**

    1. In the left pane, select **API Permissions**.

          :::image type="content" source="~/assets/images/bots/select-api-permissions_1.png" alt-text="Select API Permissions":::

       > [!NOTE]
       > Users need to consent to the API permissions only if the bot app is registered in a different tenant.

    1. Select **Add a permission**.

       Request API permission page appears:

    1. Select **Microsoft Graph**.
        
        :::image type="content" source="~/assets/images/bots/select-microsoft-graph_1.png" alt-text="Screenshot showing the Selection of Microsoft Graph.":::

    1. Select **Delegated permissions**.

        :::image type="content" source="~/assets/images/bots/select-graph-permissions.png" alt-text="Screenshot showing the selection of delegated Permissions.":::

    1. Select **User.Read** permission from the **User** dropdown.

    1. Select **Add permissions**.

        :::image type="content" source="~/assets/images/bots/userread.png" alt-text="Screenshot showing the selection of User Read.":::

    **To update manifest**

    1. From the left pane, select **Manifest**.

         :::image type="content" source="~/assets/images/bots/select-manifest_1.png" alt-text="Select Manifest":::

    1. Ensure the config item is set to **"accessTokenAcceptedVersion": 2**. If not, change its value to **2** and select **Save**.
    
       > [!NOTE]
       > If you're already in testing your bot in Teams, you must sign out from this app and Teams. Then sign in again to see this change.</br>
        
          :::image type="content" source="~/assets/images/bots/update-manifest.png" alt-text="Screenshot showing the updating of manifest.":::

    **To set up Bot service connection**

    1. In **Configuration page**, select **Add OAuth Connection Settings**.

        :::image type="content" source="~/assets/images/bots/select-configuration_2.png" alt-text="Select configuration1":::

       The **New Connection Setting** window appears.

         :::image type="content" source="~/assets/images/bots/botserviceconnection.png" alt-text="Screenshot showing the bot Service connection.":::

    1. In **New Connection Setting** page, enter the following details:

        | Field | Value or description |
        | ----- | ----- |
        | Name | Enter name for your new connection setting. You can use the name in the settings of your bot service code. |
        | Service Provider | Select **Azure Active Directory V2**. |
        | Client ID | Saved previously as your **Microsoft App ID**. |
        | Client secret | Saved previously as **Value** of the client secret ID. |
        | Token Exchange URL | Use the **Application ID URL** obtained previously while exposing API endpoint. |
        | Tenant ID | Enter **common**. |
        | Scopes | Enter **User.Read** and also add all the **Scopes** required while specifying permissions to downstream APIs. |

    1. Select **Save** > **Apply**.

       You have now configured SSO for your bot.

- title: Configure and run your bot sample
  durationInMinutes: 1
  content: |
    1. Open **Visual Studio**.

    1. Select **Clone a repository**.

    1. In the **Repository location**, enter `https://github.com/OfficeDev/Microsoft-Teams-Samples.git`. Ensure that you note the **Path** where the repository is cloned.
    
    1. Go to **File** > **Open** > **Project/Solution**.

        :::image type="content" source="~/assets/images/bots/project-solution_1.png" alt-text="Screenshot showing the navigation to project/solution.":::

    1. Select **BotSSOCSharp.csproj** file from **csharp_dotnetcore** folder.

        :::image type="content" source="~/assets/images/bots/filepath.png" alt-text="Screenshot showing the folder path.":::

    1. Open the **appsettings.json** file.

    1. Update the **appsettings.json** configuration for the bot to use the `MicrosoftAppId` and `MicrosoftAppPassword`. Use the OAuth connection name as the **Connection Name**.

        > [!NOTE]
        > You can obtain the `MicrosoftAppId` from the bot's Configuration page. The `MicrosoftAppPassword` is the Value for client secret ID that you saved previously in the Azure.

         :::image type="content" source="~/assets/images/bots/appsettingsjson.png" alt-text="Sceenshot showing the appsettings json option.":::

    1. Select **F5**  to run the project.

    1. Select **Yes** if the following dialog appears:

        :::image type="content" source="~/assets/images/bots/certificate.png" alt-text="Screenshot showing to select option Yes when the dialog appears.":::

       A webpage opens with a message **Bot is Ready**.

        :::image type="content" source="~/assets/images/bots/yourbot.png" alt-text="Screenshot showing the webpage saying bot is ready.":::
        
        <br>

        <details>

        <summary><b>Troubleshooting</b></summary>

        If you get the **Unable to find package** error, follow these steps:

        1.  Go to **Tools** > **NuGet Package Manager** > **Package Manager Settings**.
        1.	In the **Options** window that appears, select **NuGet Package Manager** > **Package Sources**.
        1.	Select **Add**.
        1.	In **Name**, enter `nuget.org` and in **Source**, enter `https://api.nuget.org/v3/index.json`.
        1.	Select **Update** and **OK**.
        1.	Rebuild your project.
        <br>

        </details>


- title: Configure and run the Teams app
  durationInMinutes: 2
  content: |
    1. In Visual Studio, open **appPackage** folder.

    1. Open the **manifest.json** file.

    1. Replace all occurrences of **{TODO: MicrosoftAppId}** with your bot's **Microsoft App ID**.
    
    1. In your cloned repository, go to **bot-conversation-sso-quickstart > csharp_dotnetcore > appPackage** folder.
    
    1. Create a .zip with the following files that are present in the **Manifest** folder: 
       * manifest.json
       * icon-outline.png
       * icon-color.png

        :::image type="content" source="~/assets/images/bots/manifest.png" alt-text="Screenshot showing how to zip a manifest folder":::

    1. Go to Teams client.
    1. Select **Store**.
    1. Select **Manage your apps**.

        :::image type="content" source="~/assets/images/bots/manage-your-app.png" alt-text="Screenshot showing the selection of manage your app.":::

    1. Select **Upload a custom app**.
    
        :::image type="content" source="~/assets/images/bots/upload-custom-app.png" alt-text="Screenshot showing the upload custom app.":::

    1. Select **Open** to upload the .zip file that you've created in the **Manifest** folder.

        :::image type="content" source="~/assets/images/bots/open-app.png" alt-text="Open app":::

    1. Select **Add** to add the conversation bot to your chat.

        :::image type="content" source="~/assets/images/bots/add-conversation-bot.png" alt-text="Screenshot showing the option add conversation bot.":::

        You can interact with the bot by sending it a message. The bot exchanges an SSO token and calls the Graph API on your behalf. It keeps you signed in unless you send a message to **sign-out**.

    1. Send a message to the bot. The conversation bot asks for consent for the first time.

    1. Select **Continue** to give permissions to Teams client for accessing the bot.

         :::image type="content" source="~/assets/images/bots/sbsdesktop-mobile-consent-request1.png" alt-text="Screenshot showing the the selection of give permissions to bot":::
        
        > [!NOTE]
        > Now you have configured SSO with your bot app and it's the only time you'll have to give consent.

    1. For mobile device, select **Accept** for **Permissions requested**.

        > [!NOTE]
        > Now you have configured SSO with your bot app in mobile, and this is the only time you'll have to give consent.

        :::image type="content" source="~/assets/images/bots/sbsdesktop-mobile-consent-request.png" alt-text="Screenshot showing the mobile signed in to bot.":::

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

     :::image type="content" source="~/assets/images/bots/sbs-desktop-mobile.png" alt-text="Screenshot showing the final output.":::
    
- content: |
    You've completed the tutorial to get started with build a bot with SSO authentication.

