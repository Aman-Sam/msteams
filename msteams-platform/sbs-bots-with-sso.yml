### YamlMime:Tutorial
title: Build a bot with SSO authentication
metadata:
  title: Build a bot with SSO authentication
  description: In this tutorial, you'll learn to build a bot with SSO authentication.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/how-to/authentication/auth-aad-sso-bots.md
  nextTutorialTitle: Read more on bot authentication
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    Teams bots are conversational bots that run repetitive automated tasks done by the users, such as customer service. The user needs to sign in multiple times without Single sign-on (SSO) authentication. With SSO authentication methods, the users don't need to sign-in to the bot multiple times.
    
    A bot behaves differently depending on the conversation it's involved in:

    * Bots in channel and group chat conversations require the users to @mention the bot.
    * Bots in a one-to-one conversation don't require an @mention. All messages sent by the user routes to the bot.
    
    This step-by-step guide helps you to build a bot with SSO authentication. You'll see the following output:

     :::image type="content" source="~/assets/images/bots/sbs-desktop-mobile.png" alt-text="Mobile signed in to bot":::

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure you install the following tools and set up your development environment:  

    * [Latest version of ngrok](https://ngrok.com/download) or any equivalent tunneling solution

      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).

    * [Latest version of Visual Studio](https://visualstudio.microsoft.com/downloads/)

    Ensure you have the following accounts and set up your development environment: 

    * [Microsoft](https://teams.microsoft.com/) account

      > [!TIP]
      > Ensure the Microsoft Teams account isn't a guest account.

    * [Microsoft 365 developer account](https://developer.microsoft.com/en-us/microsoft-365/dev-program) or access to Teams account with the appropriate permissions to install an app  

    ## Set up your Teams development tenant

       A **tenant** is like a space or a container where you chat, share files, and run meetings for your organization in Teams. You can also sideload and test the app.

    ### Check for sideloading option

       After creating the app, you must load your app in Teams without distributing it. This is known as sideloading. Sign-in to your Microsoft 365 account to view this option.

       > [!NOTE]
       > Sideloading is necessary for previewing and testing apps in Teams local environment. Enable Sideloading to preview and test your app in Teams locally.

       Do you already have a tenant, and do you have the admin access? Let's check if you really do!

    To verify sideload apps in Teams:

    1. In the Teams client, select **Store**.
    1. Select **Manage your apps**.
    1. Select **Publish an app**.
    1. Look for the option to **Upload a custom app**. If you see the option, sideloading apps is enabled.

        :::image type="content" source="~/assets/images/bots/upload-custom-app1.png" alt-text="Illustration shows the option to upload a custom app in Teams.":::

        > [!NOTE]
        > Contact Teams administrator, if you don't have the option to upload a custom app.

    ### Create a free Teams developer tenant (optional)

    If you don't have a Teams developer account, you can get it free. Join the Microsoft 365 developer program!

    1. Go to the [Microsoft 365 developer program](https://developer.microsoft.com/microsoft-365/dev-program).
    1. Select **Join Now** and follow the onscreen instructions.
    1. Select **Set up E5 subscription** from the welcome screen.
    1. Set up administrator account. After you finish, the following screen displays.

          :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png" alt-text="Microsoft":::

    1. Sign-in to Teams using the new administrator account. Now you should have the **Upload a custom app** option.

- title: Create and register your bot
  durationInMinutes: 5
  content: |
    The following steps help you to create and register your bot in Azure portal:

    1. Create Azure Bot resource to register bot with Azure Bot Service.
    1. Create client secret to enable SSO authentication of the bot.
    1. Add Teams channel to deploy the bot.
    1. Use ngrok to create a tunnel to your web server's endpoints.
    1. Add messaging endpoint to the ngrok tunnel you created.

    **To create Azure Bot resource**

    1. Go to the [Azure portal](https://portal.azure.com/). It may request you to sign in with your Microsoft account credentials.

    1. Select **Create a resource**.

       :::image type="content" source="~/assets/images/bots/Createaresource.png" alt-text="Create Resource":::

    1. In the search box, enter **Azure bot**.

       :::image type="content" source="~/assets/images/bots/searchazurebot.png" alt-text="Create Resource":::

    1. Select **Enter**.

    1. Select **Azure Bot**.

        :::image type="content" source="~/assets/images/bots/selectazurebot.png" alt-text="Select Azure Bot":::

    1. Select **Create**.

        :::image type="content" source="./assets/images/azure-bot.png" alt-text="Azure bot.":::

       Create an Azure Bot page appears.

        :::image type="content" source="~/assets/images/bots/azurebotpage.png" alt-text="Azure bot page":::

    1. Enter the following details to create Azure bot.

        :::image type="content" source="~/assets/images/bots/Azurebotcreate.png" alt-text="Create resource Azure bot":::

        1. Enter required bot handle name in **Bot handle** and it's a unique identifier for your bot.

        1. Select your **Subscription** from the dropdown list.
    
        1. Select your **Resource group** from the dropdown list that you want to provision for your bot app.
        
         
           You can also create a new resource group by the following steps:

              1. To create new resource group, select **Create new** > enter resource name > select **OK**.

                   :::image type="content" source="~/assets/images/bots/newresourcecreation.png" alt-text="New resource creation":::

              1. If you've created a new resource group, select the required location from **New resource group location** dropdown list.
        
                   :::image type="content" source="~/assets/images/bots/newresource.png" alt-text="New resource":::

        1. Select **Type of App** as **Multi Tenant**.

            :::image type="content" source="~/assets/images/bots/Review-Create.png" alt-text="Review Create":::

        1. In the **Microsoft App ID** section, by default **Create new Microsoft App ID** is selected.
    
           You can either select **Use existing app registration** and enter **Existing app ID** and **Existing app password**, or select **Create new Microsoft App ID**.

           > [!NOTE]
           > You can't create more than one bot with the same **Microsoft App ID**.

        1. Select **Review + create**.
    
    1. After the validation passed, select **Create**.

         :::image type="content" source="~/assets/images/bots/validationpass.png" alt-text="Validation Pass":::
  
       It takes a few moments for your bot service to be provisioned and the following page appears:

         :::image type="content" source="~/assets/images/bots/provisionpage.png" alt-text="Provision Page":::

    1. Select **Go to resource**.

        :::image type="content" source="~/assets/images/bots/gotoresource.png" alt-text="Resource":::

       Your Azure bot is created and you can see the **Resource group** and **Subscription ID** in the Azure bot.

         :::image type="content" source="~/assets/images/bots/Azurebotresource.png" alt-text="Azure bot resource created":::

    **To create client secret**

     Perform the following steps to create client secret:

    1. In the left panel, select **Configuration**.

        :::image type="content" source="~/assets/images/bots/selectconfigure.png" alt-text="Select Configure":::

       > [!Important]
       > Save the **Microsoft App ID** or **Client ID** for future reference.
    
    1. Next to **Microsoft App ID**, select **Manage**.

       :::image type="content" source="~/assets/images/manage-bot-label.png" alt-text="manage bot":::

    1. In the **Client secrets** section, select **New client secret**.

          :::image type="content" source="~/assets/images/bots/newclientsecret.png" alt-text="New Client Secret":::

       The **Add a client secret** window appears.

    1. Enter **Description**.
    
    1. Select **Add**.
 
        :::image type="content" source="~/assets/images/bots/addclientsecret.png" alt-text="Add client secret to app":::

    1. In the **Value** column, select **Copy to clipboard**. 

        :::image type="content" source="~/assets/images/bots/valueclientsecret.png" alt-text="Value of client secret":::

       > [!Important]
       > Save the **Client secrets** value or app password for future reference.
       
    **Add bot to the Teams channel**

    1. Select **Home**.

        :::image type="content" source="~/assets/images/bots/selecthome.png" alt-text="Home page":::

    1. Select your bot from **Recent resources**.

        :::image type="content" source="~/assets/images/bots/selectrecentresources.png" alt-text="Select recent resources":::

    1. Select **Channels** in the left pane and select **Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>. 

        :::image type="content" source="~/assets/images/adaptive-cards/channel-teams.png" alt-text="Select Teams in channels":::
    
        :::image type="content" source="~/assets/images/bots/selectchannel.png" alt-text="Select recent":::

    1. Select **Microsoft Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>. 
    
        :::image type="content" source="~/assets/images/bots/selectmicrosoftteams.png" alt-text="Select Microsoft Teams":::

    1. Select the checkbox to accept the **Terms of Service**.
    
    1. Select **Agree**.

        :::image type="content" source="~/assets/images/bots/Terms-of-service.png" alt-text="Terms":::

    1. Select **Apply**.

        :::image type="content" source="~/assets/images/bots/apply.png" alt-text="Apply":::
    
    **To create tunnel for local web server**

    Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

       ```bash
       ngrok http --host-header=localhost 3978
       ```
       > [!TIP]
       > If you encounter **ERR_NGROK_4018**, follow the steps, as displayed in the command prompt to sign up and authenticate ngrok. Then run the `ngrok http --host-header=localhost 3978` command.

    **To add messaging endpoint**

    1. From ngrok, copy the HTTPS URL.

       :::image type="content" source="../msteams-platform/assets/images/ngrok-url.png" alt-text="ngrok HTTPS URL":::

        > [!NOTE]
        > The HTTPS URL in your ngrok is your fully qualified domain name.
        > The `WebAppDomain` is a fully qualified domain name that doesn't include `https://` in it.

    1. Go back to the Azure portal.

    1. In **Settings** for the Azure bot that you created, select **Configuration**.

        :::image type="content" source="~/assets/images/bots/selectconfiguration.png" alt-text="Select Configuration":::

    1. In **Messaging endpoint**, use the HTTPS URL available from ngrok and at the end of the URL add **/api/messages**.

        :::image type="content" source="~/assets/images/bots/messagingURL.png" alt-text="Messaging endpoint":::

    1. Select **Apply**.

        You have successfully set up a bot in Azure Bot Service.

- title: Configure SSO for your bot
  durationInMinutes: 5
  content: |
    **To add Redirect URI to the Azure bot resource**

    1. Select **Manage**.

       :::image type="content" source="~/assets/images/manage-bot-label.png" alt-text="manage bot":::

    1. From the left pane, select **Authentication**.

         :::image type="content" source="~/assets/images/bots/selectauthentication.png" alt-text="Select Authentication":::

    1. In **Platform configurations**, select **Add a platform** to choose the platform on which you want to host the bot app. 

        :::image type="content" source="~/assets/images/bots/addaplatform.png" alt-text="Add a Platform":::

    1. For this tutorial, Select **Web**.

        :::image type="content" source="~/assets/images/bots/selectweb.png" alt-text="Select Web":::
        
    1. Enter **Redirect URIs** as `https://token.botframework.com/.auth/web/redirect` and this is the URI on which Azure AD will send response for user authentication.

        :::image type="content" source="~/assets/images/bots/redirectURI1.png" alt-text="Redirect URI 1":::

    1. Enable **Implicit grant and hybrid flows** by selecting the following checkboxes:

        * **ID tokens**
        * **Access tokens**
    
    1. Select **Configure**.

        :::image type="content" source="~/assets/images/bots/selectimplictgrant.png" alt-text="Select Implict Grant":::
 
        The Redirect URI is added to the Azure bot resource.

        :::image type="content" source="~/assets/images/bots/redirectURIadded.png" alt-text="Redirect URI added to bot resource":::

    **To expose API endpoint**

    1. From the left pane, select **Expose an API**.

        :::image type="content" source="~/assets/images/bots/exposeanapi.png" alt-text="Expose an API":::

    1. Select **Set**.

        :::image type="content" source="~/assets/images/bots/appidURI.png" alt-text="Application ID URI":::

    1. Use the Application ID URI shown and append **api://botid-** at the beginning of the URI.

    1. Select **Save**.

        :::image type="content" source="~/assets/images/bots/exposeAPI.png" alt-text="Expose an API":::
    
       > [!Important]
       > Save the **Application ID URI** for future reference.

    1. Select **Add a scope**.

        :::image type="content" source="~/assets/images/bots/Addascope.png" alt-text="Expose an API":::

       Add a scope panel appears.

    1. Enter the details for configuring scope.    

         :::image type="content" source="~/assets/images/bots/addscope.png" alt-text="Add a scope to app":::

          1. Enter `access_as_user` as the **Scope Name**.

             > [!NOTE]
             > The **Scope name** should match with the **Application ID** URI with `/access_as_user` appended at the end.

          1. Set **Who can consent?** to `Admins and users`.

          1. To configure the admin and user consent prompts with appropriate values for `access_as_user` scope, provide the following information in the fields:</br>
    
              * Enter `Teams can access the user’s profile` as **Admin consent display name**.

              * Enter `Allows Teams to call the app’s web APIs as the current user` as **Admin consent description**.

              * Enter `Teams can access the user profile and make requests on the user’s behalf` as **User consent display name**.

              * Enter `Enable Teams to call this app’s APIs with the same rights as you have` as **User consent description**.

          1. Ensure that **State** is set to **Enabled**.

    1. Select **Add scope** to save.

       Your Application ID URI is created with **Scope name**.

          :::image type="content" source="~/assets/images/bots/ExposeAPIandaddscope.png" alt-text="API exposed and scope added":::

    1. In the **Authorized client applications** section, identify the applications that you want to authorize for your app’s web application.
    
    1. Select **Add a client application**.

        :::image type="content" source="~/assets/images/bots/addaclientapplication.png" alt-text="Add a Client Application":::

       Add a client application panel appears.

    1. Enter the Client ID for desktop and web application separately that you want to authorize. It's the application ID of client application that you want to authorize.
       
       |**Client ID**|**For authorizing**|
       |--------|-------------|
       | `1fec8e78-bce4-4aaf-ab1b-5451cc387264` | Teams desktop or mobile application |
       | `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` | Teams web application |

    1. Select **Authorized scopes** to determine which type of token will be returned by the service.

        :::image type="content" source="~/assets/images/bots/add-desktop-app.png" alt-text="Add client application to app":::
       
    1. Select **Add application**.

        The following image displays the Client Id:

          :::image type="content" source="~/assets/images/bots/clientapps.png" alt-text="Client Apps":::

    **Configure Graph permissions**

    1. In the left panel, select **API Permissions**.

          :::image type="content" source="~/assets/images/bots/selectapipermissions.png" alt-text="Select API Permissions":::

       > [!NOTE]
       > Users need to consent to the API permissions only if the bot app is registered in a different tenant.

    1. Select **Add a permission**.

        :::image type="content" source="~/assets/images/bots/configure-permission.png" alt-text="API user permissions":::

       Request API permission page appears:

    1. Select **Microsoft Graph**.
        
        :::image type="content" source="~/assets/images/bots/selectmicrosoftgraph.png" alt-text="Select Microsoft Graph":::

    1. Select **Delegated permissions**.

        :::image type="content" source="~/assets/images/bots/select-graph-permissions.png" alt-text="Select Graph Permissions":::

    1. Select **User.Read** permission from the **User** dropdown.

    1. Select **Add permissions**.

        :::image type="content" source="~/assets/images/bots/userread.png" alt-text="User Read":::

    **To update manifest**

    1. From the left pane, select **Manifest**.

         :::image type="content" source="~/assets/images/bots/selectmanifest.png" alt-text="Select Manifest":::

    1. Ensure the config item is set to **"accessTokenAcceptedVersion": 2**. If not, change its value to **2** and select **Save**.
    
       > [!NOTE]
       > If you're already in testing your bot in Teams, you must sign out from this app and Teams. Then sign in again to see this change.</br>
        
          :::image type="content" source="~/assets/images/bots/update-manifest.png" alt-text="Update manifest":::

    **To set up Bot service connection**

    1. In **Configuration page**, select **Add OAuth Connection Settings**.

        :::image type="content" source="~/assets/images/bots/selectconfiguration1.png" alt-text="Select configuration1":::

        :::image type="content" source="~/assets/images/bots/botserviceconnection.png" alt-text="Bot Service connection":::

    1. In **New Connection Setting** page, enter the following details:

        | Field | Value or description |
        | ----- | ----- |
        | Name | Enter name for your new connection setting. You can use the name in the settings of your bot service code. |
        | Service Provider | Select **Azure Active Directory V2**. |
        | Client id | Saved previously as your **Microsoft App ID**. |
        | Client secret | Saved previously as **Value** of the client secret ID. |
        | Token Exchange URL | Use the **Application ID URL** obtained previously while exposing API endpoint. |
        | Tenant ID | Enter **common**. |
        | Scopes | Enter **User.Read** and also add all the **Scopes** required while specifying permissions to downstream APIs. |

    1. Select **Save**.

    1. Select **Apply**.

       You have now configured SSO for your bot.

- title: Configure and run your bot sample
  durationInMinutes: 1
  content: |
    1. Open **Visual Studio**.

    1. Select **Clone a repository**.

    1. In the **Repository location**, enter `https://github.com/OfficeDev/Microsoft-Teams-Samples.git`. Ensure that you note the **Path** where the repository is cloned.
    
    1. Navigate to **File** > **Open** > **Project/Solution**.

        :::image type="content" source="~/assets/images/bots/project-solution.png" alt-text="Bot Service connection":::

    1. Select **BotSSOCSharp.csproj** file from **csharp_dotnetcore** folder.

        :::image type="content" source="~/assets/images/bots/filepath.png" alt-text="File Path":::

    1. Open the **appsettings.json** file.

    1. Update the **appsettings.json** configuration for the bot to use the `MicrosoftAppId` and `MicrosoftAppPassword`. Use the OAuth connection name as the **Connection Name**.

        > [!NOTE]
        > You can obtain the `MicrosoftAppId` from the bot's Configuration page. The `MicrosoftAppPassword` is the Value for client secret ID that you saved previously in the Azure.

         :::image type="content" source="~/assets/images/bots/appsettingsjson.png" alt-text="Appsettings json":::

    1. Select **F5**  to run the project.

    1. Select **Yes** if the following dialog appears:

        :::image type="content" source="~/assets/images/bots/certificate.png" alt-text="Ca":::

       A webpage opens with a message **Bot is Ready**.

        :::image type="content" source="~/assets/images/bots/yourbot.png" alt-text="Ca":::
        
        <br>

        <details>

        <summary><b>Troubleshooting</b></summary>

        If you get the **Unable to find package** error, follow these steps:

        1.  Go to **Tools** > **NuGet Package Manager** > **Package Manager Settings**.
        1.	In the **Options** window that appears, select **NuGet Package Manager** > **Package Sources**.
        1.	Select **Add**.
        1.	In **Name**, enter `nuget.org` and in **Source**, enter `https://api.nuget.org/v3/index.json`.
        1.	Select **Update** and **OK**.
        1.	Rebuild your project.
        <br>

        </details>


- title: Configure and run the Teams app
  durationInMinutes: 2
  content: |
    1. In Visual Studio, open **appPackage** folder.

    1. Open the **manifest.json** file.

    1. Replace all occurances of **{TODO: MicrosoftAppId}** with your bot's **Microsoft App ID**.
    
    1. In your cloned repository, navigate to **bot-conversation-sso-quickstart > csharp_dotnetcore > appPackage** folder.
    
    1. Create a .zip with the following files that are present in the **Manifest** folder: 
       * manifest.json
       * icon-outline.png
       * icon-color.png

        :::image type="content" source="~/assets/images/bots/manifest.png" alt-text="Manifest":::

    1. Go to Teams client.
    1. Select **Store**.
    1. Select **Manage your apps**.

        :::image type="content" source="~/assets/images/bots/manage-your-app.png" alt-text="Manage your app":::

    1. Select **Upload a custom app**.
    
        :::image type="content" source="~/assets/images/bots/upload-custom-app.png" alt-text="Upload custom app":::

    1. Select **Open** to upload the .zip file that you've created in the **Manifest** folder.

        :::image type="content" source="~/assets/images/bots/open-app.png" alt-text="Open app":::

    1. Select **Add** to add the conversation bot to your chat.

        :::image type="content" source="~/assets/images/bots/add-conversation-bot.png" alt-text="Add conversation Bot":::

        You can interact with the bot by sending it a message. The bot exchanges an SSO token and calls the Graph API on your behalf. It keeps you signed in unless you send a message to **sign-out**.

    1. Send a message to the bot. The conversation bot asks for consent for the first time.

    1. Select **Continue** to give permissions to Teams client for accessing the bot.

         :::image type="content" source="~/assets/images/bots/sbsdesktop-mobile-consent-request1.png" alt-text="Permissions to bot":::
        
        > [!NOTE]
        > Now you have configured SSO with your bot app and it's the only time you'll have to give consent.

    1. For mobile device, select **Accept** for **Permissions requested**.

        > [!NOTE]
        > Now you have configured SSO with your bot app in mobile and it's the only time you'll have to give consent.

        :::image type="content" source="~/assets/images/bots/sbsdesktop-mobile-consent-request.png" alt-text="Mobile signed in to bot":::

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

     :::image type="content" source="~/assets/images/bots/sbs-desktop-mobile.png" alt-text="Mobile signed in to bot":::
    
- content: |
    You've completed the tutorial to get started with build a bot with SSO authentication.

