### YamlMime:Tutorial
title: Teams Bot with Single sign-on
metadata:
  title: Teams Bot with SSO
  description: In this tutorial, you'll learn to set up SSO in a bot for Teams.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/how-to/authentication/auth-aad-sso-bots.md
  nextTutorialTitle: Read more on bot authentication
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    Teams bots are conversational bots that run repetitive automated tasks done by the users, such as customer service. The user needs to sign in with their credentials multiple times for performing repetitive tasks. The Single sign-on (SSO) authentication method in Azure Active Directory silently refreshes the authentication token. This results in reduction of the number of times users need to enter their sign-in credentials. 
    
    A bot behaves differently depending on the conversation it's involved in:

    * Bots in channel and group chat conversations require the user to @mention the bot.
    * Bots in a one-to-one conversation don't require an @mention. All messages sent by the user routes to the bot.
    
    This step-by-step guide helps you to create a bot with SSO authentication enabled. You'll see the following output:

    ![Mobile signed in to bot](~/assets/images/bots/sbs-desktop-mobile.png)

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure that you install the following tools and set up your development environment:  

    * Active Microsoft Teams account with profile picture

      > [!TIP]
      > Ensure the Microsoft Teams account is not a guest account.

    * [ngrok](https://ngrok.com/) or equivalent tunneling solution

      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).

    * Visual Studio 2019 or the latest version
    * [Microsoft 365 developer account](concepts/build-and-test/prepare-your-o365-tenant.md) or access to Teams account with the appropriate permissions to install an app

- title: Set up bot in Azure Bot Service
  durationInMinutes: 5
  content: |
    To authenticate the bot with SSO, you can set up bot in Azure Bot Service. Register bot with Azure Bot Service when you develop and host it in Azure. Perform the following steps:

    * Use ngrok to create a tunnel to your web server's endpoints.
    * Create Azure Bot resource to register bot with Azure Bot Service.
    * Create client secret that enables SSO authentication of the bot.
    * Add Microsoft Teams channel to deploy the bot to a Teams channel.
    * Add messaging endpoint to the ngrok tunnel you created.

    Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

    ```bash
    ngrok http -host-header=rewrite 3978
    ```

    **To create Azure Bot resource**

    1. Go to the [Microsoft Azure portal](https://portal.azure.com/).
    1. Select **Create a resource**.
    1. In the search box, enter **Azure bot** and select the Enter key.
    1. Select **Azure Bot**.

        ![Create Azure bot card](~/assets/images/bots/createazurebot.png)

    1. Select **Create**.
    1. Enter required bot handle name in **Bot handle**.
    1. From the **Subscription** dropdown list, select the subscription.
    1. From the **Resource group** dropdown list, select the resource group.
        
        To create a new resource, select **Create new**, enter resource name, select **OK**, and select required location from **New resource group location** dropdown list.

        > [!NOTE]
        > In the Microsoft App ID section, **Create new Microsoft App ID** is already selected. You can select **Use existing app registration**, enter **Existing app id**, and enter **Existing app password**.

    1. Select **Review + create**.

        <img src="~/assets/images/bots/Azurebotcreate.png" alt="Create resource Azure bot" width="700"/>

    1. If the validation passes, select **Create**.

        It takes a few moments for your bot service to be provisioned.

    1. Select **Go to resource**. The bot and the related resources are listed in the resource group.

        Now your Azure bot has been created.

        ![Azure bot resource created](~/assets/images/bots/Azurebotresource.png)

    **To create client secret**

    1. In **Settings**, select **Configuration**.

       > [!TIP]
       > Save the **Microsoft App ID** or **Client ID** for future reference.

    1. Select **MultiTenant** under **Bot Type**.

         ![Bot Type](~/assets/images/bots/bot-type.png)
    
    1. Next to **Microsoft App ID**, select **Manage**.

         ![Microsoft App ID](~/assets/images/bots/MicrosoftAppID.png)

    1. In the **Client secrets** section, select **New client secret**. The **Add a client secret** window appears.  

    1. Enter **Description** and select **Add**.
 
        <img src="~/assets/images/bots/addclientsecret.png" alt="Add client secret to app" width="500"/>

    1. In the **Value** column, select **Copy to clipboard** and save the client secret ID for future reference.

         ![Value of client secret](~/assets/images/bots/valueclientsecret.png)
       
    **To add the Microsoft Teams channel**

    1. Go to **Home**.

        <img src="~/assets/images/bots/homepage.png" alt="Home page" width="600"/>

    1. Open your bot, which is listed in the **Recent resources** section.
    1. Select **Channels** in the left pane and select **Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>.    
          ![Open Teams from channels](~/assets/images/bots/channel-teams.png)    
          ![Select Teams](~/assets/images/bots/select-teams.png)    
    1. Select **Save**.
    1. Select the checkbox to accept the terms of service and select **Agree**.</br>
          ![Terms of service](~/assets/images/bots/select-terms-of-service.png)

    **To add messaging endpoint**

    1. In **Settings** for the Azure bot that you created, select **Configuration**.
    1. Go to ngrok.
    1. Copy the HTTPS URL (https to io) as shown in the following image:

        ![ngrok HTTPS URL](~/assets/images/bots/ngrokURL.png)

    1. In **Messaging endpoint**, use the HTTPS URL available from ngrok and at the end of the URL add **/api/messages**.

        <img src="~/assets/images/bots/messagingURL.png" alt="Messaging endpoint" width="600"/>

    1. Select **Apply**.

        You have successfully set up a bot in Azure Bot Service and now you need to set up bot service connection.

- title: Configure SSO for your bot
  durationInMinutes: 5
  content: |
    To ensure that the Bot Service enables user to sign in and access the bot, you must configure SSO for your bot. To do so, perform the following steps:
    
    * Add Redirect URI to the Azure bot resource.
    * Expose API endpoint to specify the location from where the resources can be accessed.
    * Authorize client applications.
    * Add any necessary API permissions for downstream calls.
    * Enable implicit grant.
    * Update manifest.
    * Set up Bot Service connection.

    **To add Redirect URI to the Azure bot resource**

    1. Adjacent to **Microsoft App ID**, select **Manage**.</br>
        ![Manage app ID](~/assets/images/bots/select-manage.png)
    1. From the left pane of your bot resource, select **Authentication**.
    1. In **Platform configurations**, select **Add a platform**.
    1. Select **Web**.

    1. Enter **Redirect URIs** as **https://token.botframework.com/.auth/web/redirect** and select **Configure**.

        <img src="~/assets/images/bots/redirectURI.png" alt="Configure Redirect URI" width="600"/>

        The Redirect URI is added to the Azure bot resource.

        ![Redirect URI added to bot resource](~/assets/images/bots/redirectURIadded.png)

    **To expose API endpoint**

    1. From the left pane, select **Expose an API**.
    1. Select **Set** for the Application ID URI.
    1. Use the Application ID URI shown and append **api://botid-** at the beginning of the URI.

        <img src="~/assets/images/bots/exposeAPI.png" alt="Expose an API" width="500"/>

    1. Select **Save**. Save the **Application ID URI** for future reference.
    1. Select **Add a scope**.
    1. In **Scope name**, enter **access_as_user**.
    1. In **Who can consent?**, switch to **Admins and users**.
    1. Enter the following values in the boxes:

        | Field | Value |
        | ----- | ----- |
        | Admin consent display name | Teams can access the user’s profile |
        | Admin consent description | Allows Teams to call the app’s web APIs as the current user. |
        | User consent display name | Teams can access your user profile and make requests on your behalf |
        | User consent description | Enable Teams to call this app’s APIs with the same rights that you have. |

    1. Ensure that **State** is set to **Enabled**.

        <img src="~/assets/images/bots/addscope.png" alt="Add a scope to app" width="500"/>

    1. Select **Add scope**. The scope name automatically matches the Application ID URI, with **/access_as_user** added to the end.

        ![API exposed and scope added](~/assets/images/bots/ExposeAPIandaddscope.png)

    **To authorize client applications**

    Add the following IDs as **Authorized client applications** and also select the check box for **Authorized scopes**:      
    * 1fec8e78-bce4-4aaf-ab1b-5451cc387264 (Teams mobile or desktop application)            
    * 5e3ce6c0-2b1f-4285-8d4b-75ee78787346 (Teams web application)</br>     
        ![Add client application to app](~/assets/images/bots/addclientapplication1.png)        
    
    **To add any necessary API permissions for downstream calls**

    1. Select **API permissions** from the left pane.
    1. Add any user delegated permissions that your app requires to downstream APIs, for example, User.Read.</br>
        ![API user permissions](~/assets/images/bots/APIpermissions.png)

    **To enable implicit grant**
    
    1. Select **Authentication** from the left pane.
    1. Select the **Access tokens** and **ID tokens** checkboxes.</br>
        ![Authentication check boxes for the app](~/assets/images/bots/authenticationcheckboxes.png)
    1. Select **Save** to save the changes.

    **To update manifest**

    1. Select **Manifest** from the left pane.
    1. Ensure the config item is set to **"accessTokenAcceptedVersion": 2**. If not, change its value to **2** and select **Save**. (If you are already in testing your bot in Teams, you must signout this app and signout Teams. Then signin again to see this change).</br>
        ![Update manifest](~/assets/images/bots/update-manifest.png)</br>

    **To set up Bot Service connection**

    1. Go to **Configuration page** > **Add OAuth Connection Settings**.
    1. Select **Add OAuth Connection Settings**.
    1. In **New Connection Setting**, enter the following details:

        | Field | Value or description |
        | ----- | ----- |
        | Name | Enter name for your new connection setting. You can use the name in the settings of your bot service code. |
        | Service Provider | Select **Azure Active Directory V2**. |
        | Client id | Saved previously as your **Microsoft App ID**. |
        | Client secret | Saved previously as **Value** of the client secret ID. |
        | Token Exchange URL | Use the **Application ID URL** obtained previously while exposing API endpoint. |
        | Tenant ID | Enter **common**. |
        | Scopes | Enter **User.Read** and also add all the **Scopes** required while specifying permissions to downstream APIs. |

        <img src="~/assets/images/bots/botserviceconnection.png" alt="Bot Service connection" width="300"/>

    1. Select **Save**.
    1. Select **Apply**.

- title: Configure and run your bot sample
  durationInMinutes: 1
  content: |
    Configure the bot sample to understand how to authenticate conversational bot in Microsoft Teams.

    **To configure and run your bot sample**

    1. Open Visual Studio.
    1. In Visual Studio, select **Clone a repository**.
    1. In the **Repository location**, enter **https://github.com/OfficeDev/Microsoft-Teams-Samples.git**. Ensure that you note the **Path** where the repository is cloned.
    1. Select **File > Open > Project/Solution**.
    1. Go to **Microsoft-Teams-Samples > samples > bot-conversation-sso-quickstart > csharp_dotnetcore** folder.
    1. Open the **BotSSOCSharp.csproj** file.
    1. Open the **appsettings.json** file.
    1. Update the **appsettings.json** configuration for the bot to use the `MicrosoftAppId` and `MicrosoftAppPassword`. Use the OAuth connection name as the **Connection Name**.

        > [!NOTE]
        > You can obtain the `MicrosoftAppId` from the bot's Configuration page. The `MicrosoftAppPassword` is the Value for client secret ID that you saved previously.

        ![Appsettings json](~/assets/images/bots/appsettingsjson.png)

    1. Select the **F5** key to run this project.

        <br>

        <details>

        <summary><b>Troubleshooting</b></summary>

        If you get the **Unable to find package** error, follow these steps:

        1.  Go to **Tools** > **NuGet Package Manager** > **Package Manager Settings**.
        1.	In the **Options** window that appears, select **NuGet Package Manager** > **Package Sources**.
        1.	Select **Add**.
        1.	In **Name**, enter **nuget.org** and in **Source**, enter **https://api.nuget.org/v3/index.json**.
        1.	Select **Update** and **OK**.
        1.	Rebuild your project.
        <br>

        </details>

- title: Configure and run the Teams app
  durationInMinutes: 2
  content: |
    The most comprehensive way to test your bot is by creating an app package and uploading it to Teams. This method is the only way to test the full functionality available to your bot, across all scopes. You can configure and run the Teams app by uploading the **manifest.zip** file.

    **To run the Teams app by uploading the manifest.zip file**
    
    1. In Visual Studio, go to the **appPackage/** folder.
    1. Open the **manifest.json** file.
    1. In the **manifest.json** file, find **{TODO: MicrosoftAppId}** and replace it with your Microsoft App ID.
    1. In Windows Explorer, go to the **Microsoft-Teams-Samples > samples > bot-conversation-sso-quickstart > csharp_dotnetcore > appPackage** folder.
    1. Zip the contents of the **appPackage/** folder to create **manifest.zip**.
    1. Go to Teams.
    1. To upload **manifest.zip**, select **Store > Manage your apps > Upload a custom app** and open **manifest.zip**.
    1. Select **Add** to add the conversation bot to your chat.

        You can interact with this bot by sending it a message. The Bot exchanges an SSO token and makes a call to the Graph API on your behalf and returns the results. It keeps you signed in unless you send a message to **logout**.

    1. Send a message to the bot. The conversation bot asks for permissions for the first time.

        ![Permissions to bot](~/assets/images/bots/sbsdesktop-mobile-consent-request.png)

    1. Select **Continue** to accept the permissions.

    1. Select **Accept** for **Permissions requested**.

        ![Mobile signed in to bot](~/assets/images/bots/sbs-desktop-mobile.png)

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

    ![Mobile signed in to bot](~/assets/images/bots/sbs-desktop-mobile.png)
    
- content: |
    You've completed the tutorial to get started with SSO in a bot for Microsoft Teams using the Bot Framework.

