### YamlMime:Tutorial
title: Video filter app tutorial
metadata:
  title: Video filter app tutorial 
  description: With this learning module, learn how to create a video filter app for Teams meetings.
  audience: Developer
  level: Beginner
  ms.date: 08/19/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: apps-in-teams-meetings\video-filters-for-meeting-apps.md
  nextTutorialTitle: Video filters for meeting apps
  ms.custom: mvc
  ms.localizationpriority: none
items:
- durationInMinutes: 1
  content: |
    Microsoft Teams provides an immersive and engaging meeting experience with video filters. Users can use the video filter app during the meeting lobby and in-meeting scenarios and easily apply video effects such as filters, frames, makeups, and so on, to make the meeting experience more presentable.
  
    This step-by-step guide helps you to create a video filter app for Teams meetings. By the end of this tutorial you can achieve the following output:
    :::image type="content" source="assets/images/apps-in-meetings/video-filter-sbs-output.png" alt-text="Screenshot that shows the video experience for the user after the filter is applied.":::
- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure that you install the following tools and set up your development environment:  
    * [Office 365 tenant](https://developer.microsoft.com/microsoft-365/dev-program)
    * [Visual Studio code](https://code.visualstudio.com/Download)
    * [Microsoft Teams](https://www.microsoft.com/microsoft-teams/log-in) with a valid account.
    * [GitHub account](https://github.com/)
    * [Latest version of node.js](https://nodejs.org/en/download/)
    * [Git](https://git-scm.com/downloads) 
    * [Node.js and NPM](https://nodejs.org/)
    
- title: Set up your Teams development tenant
  durationInMinutes: 10
  content: |
 
    A **tenant** is like a space, or a container for your organization in Teams, where you chat, share files, and run meetings.
    This space is also where you sideload and test your app. 
    
    Let's verify if you're ready to develop with the tenant.

    ### Enable sideloading option

    After creating the app, you must load your app in Teams without distributing it. This process is known as sideloading. Sign in to your Microsoft 365 account to view this option.
      
    > [!NOTE]
    > Sideloading is necessary for previewing and testing apps in Teams local environment. If it isn't enabled, you won't be able to preview and test your app in Teams locally.
    Do you already have a tenant, and do you have the admin access? Let's check if you really do!
    Verify if you can sideload apps in Teams:
    1. In the Teams client, select **Store** icon.
    1. Select **Manage your apps**.
    1. Look for the option to **Upload a custom app**. If you see the option, sideloading apps is enabled.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png" alt-text="Illustration shows the option to upload a custom app in Teams.":::

        > [!NOTE]
        > If Teams doesn't show the option to upload a custom app, talk to your Teams administrator.

    ### Create a free Teams developer tenant
    
    If you don't have a Teams developer account, you can get it free. Join the Microsoft 365 developer program!
    1. Go to the [Microsoft 365 developer program](https://developer.microsoft.com/microsoft-365/dev-program).
    1. Select **Join Now** and follow the onscreen instructions.
    1. In the welcome screen, select **Set up E5 subscription**.
    1. Set up your administrator account. After you finish, the following screen appears.

        :::image type="content" source="~/assets/images/build-your-first-app/dev-program-subscription.png" alt-text="Example of what you see after signing up for the Microsoft 365 developer program.":::

    1. Sign in to Teams using the administrator account you just set up. Verify that you have the **Upload a custom app** option in Teams.

- title: Build and run the video filter sample app
  durationInMinutes: 5
  content: |

    
    **Create an index.html file**

    1. Create an index.html file as the entry point and quick start for your app.
    1. Include the path to `index.css` and  `index.js` in the script tag.

    Following is an example of index.html file with the  path to `index.js` file inside the script tag.
    
    ```html
      <!DOCTYPE html>
      <html lang="en">
      <head>
          <meta charset="UTF-8">
          <title>Video app sample</title>
      </head>
      <body>
          <h1 class="app-title">Video app sample</h1>
          <div class="horizontal">
            <!-- UI for sampleEffect1 -->
            <div class="filter" id="sampleEffect1">
              <a class="thumbnail"></a>
            </div>
          </div>
          <link rel="stylesheet" type="text/css" href="./src/index.css" />
          <script src="./src/index.js" type="module"></script>
      </body>
      </html>

    ```
  
  ** Create an index.js file**
    
   The index.js file handles the app startup, routing, and other functions of your application and does require other modules to add functionality.
    
     1. Create an index.js file.
     1. Import the app and video modules from Teams JS library and initialize the app:
    
        ```js
        import { app, video } from "@microsoft/teams-js";

          import { WebglVideoFilter } from "./webgl-video-filter";

          app.initialize().then(() => {
          // This is the effect for processing.

        
        ```

     1. Import the video extensibility APIs in the index.js file to access the video stream of the user and get notified when a user has selected and applied a video filter.

     1. Call the following functions:

        1. registerForVideoEffect: Gets the get the selected effect in Teams client and notify the video extension that the new effect will be applied.

        In the following example, the `registerForVideoEffect` function calls the `effectParameterChanged` parameter. The `effectParameterChanged' updates the local state with the current selected effectId.

            ```js
              {
                function effectParameterChanged(effectId) {
                  console.log(effectId);
                  if (selectedEffectId === effectId) {
                    console.log('effect not changed');
                    return;
                  }
                  selectedEffectId = effectId;

                  clearSelect();
                  switch (selectedEffectId) {
                    case effectIds.half:
                      console.log('current effect: half');
                      document.getElementById("filter-half").classList.add("selected");
                      break;
                    case effectIds.gray:
                      console.log('current effect: gray');
                      document.getElementById("filter-gray").classList.add("selected");
                      break;
                    default:
                      console.log('effect cleared');
                      break;
                  }
                }

                video.registerForVideoEffect(effectParameterChanged);

                }

            ```

        1. registerForVideoFrame: Call the `registerForVideoFrame` function to get the video frames from video pipeline, return the processed video frames from video pipeline and notify error.
 
            In the following example, the  `videoFrameHandler` function is declared. At the end the registerForVideoFrame` function calls the `videoFrameHandler` functions:
            
            ```js

              //Sample video effect
              {
              function videoFrameHandler(videoFrame, notifyVideoProcessed, notifyError) {
                switch (selectedEffectId) {
                  case effectIds.half:
                    simpleHalfEffect(videoFrame);
                    break;
                  case effectIds.gray:
                    videoFilter.processVideoFrame(videoFrame);
                    break;
                  default:
                    break;
                }

                //send notification the effect processing is finshed.

                notifyVideoProcessed();

                //send error to Teams if any
                // if (errorOccurs) {
                //   notifyError("some error message");
                // }
              }
              }

              // call registerForVideoFrame
              {
              video.registerForVideoFrame(videoFrameHandler, {
                format: "NV12",
              });
              }

            ```
            
            The `VideoFrame`` Callback function registers and processes the video frame.
            The `notifyVideoProcessed()` sends notification that the effect processing is finished.
            The `notifyError` send error to Teams if any error occurs.

        1. notifySelectedVideoEffectChanged: Call the `notifySelectedVideoEffectChanged` function to notify the teams client that a different effect is selected by the users in the video app. Teams client invokes the callback registered through registerForVideoEffect to tell the video app to apply the current selected effect.

           In the following example, the `notifySelectedVideoEffectChanged` is passing the `EffectChanged`value which has two IDs, half and grey:

           ```js

           const filterHalf = document.getElementById("filter-half");
            filterHalf.addEventListener("click", function () {
              if (selectedEffectId === effectIds.half) {
                return;
              }
              video.notifySelectedVideoEffectChanged("EffectChanged", effectIds.half);
            });
            const filterGray = document.getElementById("filter-gray");
            filterGray.addEventListener("click", function () {
              if (selectedEffectId === effectIds.gray) {
                return;
              }
              video.notifySelectedVideoEffectChanged("EffectChanged", effectIds.gray);
            });

           ```

           The `filterHalf`constant gets the filter-half id on click. If the selected effect id is equal to effectid.half, teams doesn't notify, else, teams notifies that the video effect is changed. The same applies for `filterGray` constant.

           The effectids are defined at the top of the index.js page as:

           ```
              {
              let effectIds = {
              half: "c2cf81fd-a1c0-4742-b41a-ef969b3ed490",
              gray: "b0c8896c-7be8-4645-ae02-a8bc9b0355e5",
            }
              }
           ```

- title: Update the app manifest
  durationInMinutes: 1
  content: |
   
   The meeting app capability for video filters is defined in your app manifest using the videoFilters object. You must configure your Teams app manifest with the resource specific consent (RSC) permissions for your app to access the video stream and video extensibility APIs.
   
   To enable your app with video filters for Teams meetings, update your app manifest and use the videoFilters property to determine the filter name, category name, and filter thumbnail image and videoFiltersConfigurationUrl.

   In the following example, the `videoFilters` object, RSC permissions, and videoFiltersConfigurationUrl  are defined.

    ```manifest.json
          {
          "authorization": { // RSC permission section for getting teams client sdk video api.
              "permissions": {
                "resourceSpecific": [
                  {
                    "name": "CameraStream.Read.User", // getting api: registerForVideoFrame
                    "type": "Delegated"
                  },
                  {
                    "name": "OutgoingVideoStream.Write.User", // getting api: registerForVideoFrame
                    "type": "Delegated"
                  }
                ]
              }
            },
            "validDomains": [ "your_domain_of_videoFiltersConfigurationUrl" ], // The domain for videoFiltersConfigurationUrl, Example: videoapp.microsoft.com
            "meetingExtensionDefinition": {
              "videoFilters": [ // for showing video filters inside of video effects quick picker section.
                {
                  "id": "310a65de-24ce-445e-9e1e-dd4ef0f0114b", // GUID
                  "name": "Category_FilterA", // Category can be: Styles, Frames, Makeup, and Others
                  "thumbnail": "PreviewEffect.png" // A relative path to the video filter thumbnail.png
                }
              ],
              // The Video app web page url for both processing the video frames and customization experience. The domain should be one of **validDomain**.
              "videoFiltersConfigurationUrl": "your_videofilters_configuration_url" // Example: https://videoapp.microsoft.com/Teams-VideoApp-example/app/configure.html
            }
          }

      ``` 

    The following table lists

        |Property  |Description |Values |
        |---------|---------|---------|
        |`resourceSpecific` |permissions for getting teams client sdk video api | CameraStream.Read.User <br/> OutgoingVideoStream.Write.User       |
        |`validDomains``     | The domain for videoFiltersConfigurationUrl      |   videoapp.microsoft.com      |
        |videoFilters     |or showing video filters inside of video effects quick picker section|   id  (GUID) <br/> name (name of the filter) <br/> thumbnail (Relative path to the video filter thumbnail.png)      |
        |videoFiltersConfigurationUrl     |  Link to the app package where you've hosted your app       |   https://github.com/microsoft/teams-videoapp-sample      |
        
        After updating the manifest.json, create a Teams app package. For more information, see [Teams app package](concepts/build-and-test/apps-package.md)

    
    ## Upload your app to the Teams meeting

     Apps in Microsoft Teams are web applications exposing one or more capabilities. Make your app available on the internet so that the Teams platform can load it. To make your app reachable from the internet, you need to host your app.
      1. Open Teams.
      1. Go to Store > **Manage your apps** > **Upload an app**.
      1. Select **Upload a custom app**.
      1. Upload the `manifest.zip` file.
      1. Select **Add** to add the app to Teams.
         :::image type="content" source="assets/images/apps-in-meetings/video-filter-sbs-sideload-app-to-teams.png" alt-text="Screenshot that shows how to sideload load an app to Teams.":::
      1. Schedule a meeting from the calendar in Teams.
         Ensure you invite at least one attendee to the meeting.
      1. Join the meeting.
      1. In the meeting window, select More > **Effects and avatars**.
      1. In the left pane, go to **Video effects** > **Filters** > **Others**.
         :::image type="content" source="assets/images/apps-in-meetings/video-filter-sbs-select-the-filter.png" alt-text="Screenshot that shows a selected  filter during an in-meeting scenario."::: 

- title: Test your app
  durationInMinutes: 1
  content: |
   Select a filter from **others** in the meeting side panel, and then select **Apply and turn on video**.
   
   Teams applies the filter to the video in the meeting.
   :::image type="content" source="assets/images/apps-in-meetings/video-filter-sbs-select-apply-filter.png" alt-text="Screenshot that shows a sample filter and the Apply and turn on video option during an in-meeting scenario.":::
    
- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?
    
    :::image type="content" source="assets/images/apps-in-meetings/video-filter-sbs-output.png" alt-text="Screenshot that shows the video experience for the user after the filter is applied.":::
- content: |
    You've completed the tutorial to get started with video filters for Teams meetings.