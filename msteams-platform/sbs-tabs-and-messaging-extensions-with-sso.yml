### YamlMime:Tutorial
title: SSO for tabs and message extension
metadata:
  title: SSO for tabs and message extension
  description: With this learning module, learn how to set up Azure Active Directory Single sign-on (Azure AD SSO) for tabs.
  audience: Developer
  level: Beginner
  ms.date: 12/07/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: tabs/how-to/authentication/tab-sso-overview.md
  nextTutorialTitle: Read more on SSO authentication for tabs.
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
   The Azure Active Directory single sign-on (Azure AD SSO) helps to authenticate users in Teams. 

   **Key aspects of Azure AD SSO**:

    * Allows the user to sign in automatically after the first sign in.
    * Allows the user to sign in to other devices without entering credentials again.
    * Obtains token for the signed in user.

   This step-by-step guide helps you to create tabs and message extensions enabling Azure AD SSO authentication. You'll see the following output:

     :::image type="content" source="./assets/images/Tab-ME-SSO/hello-megan-profile245_1.png" alt-text="Congratulation image.":::
   

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure that you install the following tools and set up your development environment:  

    | &nbsp; | Install | For using... |
     | --- | --- | --- |
     | **Required** | &nbsp; | &nbsp; |
     | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, call and all in one place.|
     | &nbsp; | [Microsoft 365 developer account](/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | Access to Teams account with the appropriate permissions to install an app. |
     | &nbsp; | [.NET Core SDK version 3.1](https://dotnet.microsoft.com/en-us/download) | Customized bindings for local debugging and Azure functions app deployments. If you haven't installed the .NET 3.1 (or later) SDK globally, the portable version can be installed. |
     | &nbsp; | [Visual Studio 2022 version 17.3](https://visualstudio.microsoft.com)<br> Install one of the following two workloads:<br> • ASP.NET and web development <br> • .NET Core cross-platform development | You can install the enterprise version in Visual Studio 2022, and install the workloads. |
     | &nbsp; | [ngrok](https://ngrok.com/download) | Teams app features (conversational bots, message extensions, and incoming webhooks) require inbound connections. A tunnel connects your development system to Teams. It isn't required for apps that only include tabs. This package is installed within the project directory (using npm `devDependencies`). |

      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).
    
- title: Set up local environment
  durationInMinutes: 1
  content: |
   Clone `Microsoft-Teams-Samples` repository to your local GitHub:  

    1. Open [Microsoft Teams Samples](https://github.com/OfficeDev/Microsoft-Teams-Samples).
    1. Select **Code**.
    1. From the dropdown menu, select **Open with GitHub Desktop**.

       :::image type="content" source="./assets/images/Tab-ME-SSO/clonerepository_1.png" alt-text= "Clone repository.":::

    1. Select **Clone**. 

- title: Create and register your bot in Azure AD portal
  durationInMinutes: 5
  content: |
    To create and register your bot in Microsoft Azure AD, perform the following steps:

    * Create Azure Bot resource to register bot with Azure Bot Service.
    * Create client secret that enables SSO authentication of the bot.
    * Add Microsoft Teams channel to deploy the bot to a Teams channel.
    * Create a ngrok tunnel to the endpoints of your web server.
    * Add messaging endpoint to the ngrok tunnel you created.

    **To create Azure Bot resource**

    1. Go to the [Microsoft Azure portal](https://portal.azure.com/).
    1. Select **Create a resource**.
    1. In the search box, enter **Azure Bot**.
    1. Select **Enter**.
    1. Select **Azure Bot**.
    1. Select **Create**.

       :::image type="content" source="./assets/images/Tab-ME-SSO/azure-bot_1.png" alt-text="Azure bot.":::
         
    **Create an Azure Bot** window appears.

    1. Enter required bot handle name in **Bot handle**.
    1. Select your **Subscription** and **Resource group** from the respective dropdown list.

       :::image type="content" source="./assets/images/Tab-ME-SSO/azure-subscription.png" alt-text="Azure subscription.":::

       You can create a new resource group. Select **Create new** > enter resource name > select **OK**. Select the required location from **New resource group location** dropdown list.

       :::image type="content" source="~/assets/images/bots/newresource.png" alt-text="Screenshot showing the new resource group location.":::

    1. In the **Microsoft App ID** section, by default **Create new Microsoft App ID** is selected. 
    
       You can select **Use existing app registration** and enter **App ID**, **App tenant ID**, and **MSI resource ID**.

       > [!NOTE]
       > You can't create more than one bot with the same **Microsoft App ID**.

    1. Select **Type of App** as **Multi Tenant**.
    1. Select **Review + create**.

       :::image type="content" source="./assets/images/Tab-ME-SSO/tenant-review.png" alt-text="tenant review.":::

    1. If the validation is passed, select **Create**.

        It takes a few moments for your bot service to be provisioned.

    1. Select **Go to resource**.

       :::image type="content" source="./assets/images/Tab-ME-SSO/go-to-resource_1.png" alt-text="go to resource.":::

      Your Azure bot is created and you can see the **Resource group** and **Subscription ID** in the Azure bot.

       :::image type="content" source="./assets/images/Tab-ME-SSO/app-overview_1.png" alt-text="app overview." lightbox="./assets/images/Tab-ME-SSO/app-overview_1.png":::
        
    **To create client secret**

      Perform the following steps if you've created a new **Microsoft App ID**:

    1. In the left pane, select **Configuration**. 

       > [!TIP]
       > Save the **Microsoft App ID** or **Client ID** for future reference.

    1. Next to **Microsoft App ID**, select **Manage**.

       :::image type="content" source="~/assets/images/Tab-ME-SSO/manage-bot-label_1.png" alt-text="Screenshot showing the selection of manage option.":::

    1. In the **Client secrets** section, select **New client secret**.

       :::image type="content" source="~/assets/images/Tab-ME-SSO/newclientsecret_1.png" alt-text="Screenshot showing the selection of new client secret.":::

       **Add a client secret** window appears.  

    1. Enter **Description** of the client secret.
    
    1. Select **Add**.

       :::image type="content" source="./assets/images/Tab-ME-SSO/add-client-id.png" alt-text="Add client secret to app.":::

    1. Select **Copy to clipboard** to copy the **Value** details.

       :::image type="content" source="./assets/images/Tab-ME-SSO/client-ids_1.png" alt-text="Value of client secret.":::
         
       > [!TIP]
       > Save the **Client secrets** value or app password for future reference.

    **To add the Microsoft Teams channel**

    1. Select **Home**.

       :::image type="content" source="./assets/images/Tab-ME-SSO/home_1.png" alt-text="Home page.":::
       
    1. Select your bot from **Recent resources**.

    1. Select **Channels** in the left pane. 

    1. Select **Microsoft Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>.

       :::image type="content" source="~/assets/images/Tab-ME-SSO/channel-teams_1.png" alt-text="Select Teams in channels":::
    
    1. Select the checkbox to accept the **Terms of Service**.
    
    1. Select **Agree**.

       :::image type="content" source="~/assets/images//Tab-ME-SSO/terms.png" alt-text="Terms of service":::

    1. Select **Apply**.

       :::image type="content" source="~/assets/images//Tab-ME-SSO/apply.png" alt-text="Screenshot showing the selection of Teams.":::
    
    **To create tunnel for local web server**

    Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

     ```bash
     ngrok http --host-header=localhost 3978
     ```
     > [!TIP]
     > If you encounter **ERR_NGROK_4018**, follow the steps, as displayed in the command prompt to sign up and authenticate ngrok. Then run the `ngrok http --host-header=localhost`
    
    **To add messaging endpoint**

    1. From ngrok, copy the HTTPS URL (https to io).

        ![ngrok HTTPS URL](~/assets/images/Tab-ME-SSO/ngrok-image.png)

        > [!NOTE]
        > The HTTPS URL in your ngrok is domain name that doesn't include `https://`.

    1. In **Settings**, select **Configuration**.

    1. In **Messaging endpoint**, add the HTTPS URL from ngrok and at the end of the URL add **/api/messages**.

       :::image type="content" source="./assets/images/Tab-ME-SSO/messaging-endpoint_1.png" alt-text="Messaging Endpoint.":::
        
    1. Select **Apply**.

        You have successfully set up a bot in Azure Bot service.


- title: Configure SSO for your tab 
  durationInMinutes: 1
  content: | 
    1. Go to [Azure portal](https://portal.azure.com/).

    1. Select **Azure Active Directory**.

       :::image type="content" source="./assets/images/Tab-ME-SSO/azure directory.png" alt-text="azure directory.":::

    1. From the left pane, select **App registrations**.

    1. Select your bot.

       :::image type="content" source="./assets/images/Tab-ME-SSO/app reg.png" alt-text="app reg.":::

    1. Under **Manage**, Select **Expose an API**.

    1. Select **Set**.

       :::image type="content" source="./assets/images/Tab-ME-SSO/application-id-set_1.png" alt-text="Expose an API.":::
       
    1. Set the **Application ID URI** in the form of `api://your ngrok/botid-{your AppID}`.

       :::image type="content" source="./assets/images/Tab-ME-SSO/expose_2.png" alt-text="set link.":::

       The following image shows the domain name:

       :::image type="content" source="../msteams-platform/assets/images/Tab-ME-SSO/app_id_1.png" alt-text="App URI id":::

    1. Select **Add a scope**. 
       
       :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/selectscope_1.png" alt-text="Select scope":::
    
    **Add a scope** window appears.

    1. Enter the following details to configure scope:

       * Enter `access_as_user` as the **Scope name**.
  
       * Set **Who can consent?** to `Admins and users`.
  
    1. To configure the admin and user consent prompts with appropriate values for `access_as_user` scope, provide the following information in the fields:</br>
 
       * Enter `Teams can access the user’s profile` as **Admin consent display name**.

       * Enter `Allows Teams to call the app’s web APIs as the current user` as **Admin consent description**.

       * Enter `Teams can access the user profile and make requests on the user’s behalf` as **User consent display name**.

       * Enter `Enable Teams to call this app’s APIs with the same rights as the user` as **User consent description**.

    1. Set **State** to **Enabled**.

    1. Select **Add scope**.

       :::image type="content" source="./assets/images/Tab-ME-SSO/add-a-scope_1.png" alt-text="Scopes.":::

        > [!NOTE]
        > The **Scope name** should match with the **Application ID** URI with `/access_as_user` appended at the end.</br>
           `api://your ngrok/botid-00000000-0000-0000-0000-000000000000/access_as_user`

       :::image type="content" source="./assets/images/Tab-ME-SSO/add-a-scope-final1_1.png" alt-text="Scopes2.":::

    1. In the **Authorized client applications** section, identify the applications that you want to authorize for your app’s web application. 
    
    1. Select **Add a client application**.

       :::image type="content" source="../msteams-platform/assets/images/Tab-ME-SSO/selectclientapp_1.png" alt-text="Screenshot showing the selection of client application.":::

    1. Enter each of the following client IDs and select the authorized scope:</br>

         * Enter **Client ID**: `1fec8e78-bce4-4aaf-ab1b-5451cc387264` for Teams mobile or desktop application.

           :::image type="content" source="../msteams-platform/assets/images/meetings-side-panel/addclientapplication1.png" alt-text="Screenshot showing addition of client application":::

         * Enter **Client ID**:`5e3ce6c0-2b1f-4285-8d4b-75ee78787346` for Teams web application.

           :::image type="content" source="../msteams-platform/assets/images/meetings-side-panel/addclientapplication2.png" alt-text="Screenshot of adding client ID.":::
               
    1.  Select **Authorized scopes**.

        The following image displays the **Client ID**:

        :::image type="content" source="../msteams-platform/assets/images/Tab-ME-SSO/client-id-2.png" alt-text="Screenshot showing the client app."::: 

    1. In the left pane, select **API permissions**. 

       > [!NOTE]
       > Users need to consent to these permissions only if the Azure AD app is registered in a different tenant.

    1. Select **Add a permission**.

    1. Select **Microsoft Graph**.

       :::image type="content" source="./assets/images/Tab-ME-SSO/microsoft-graph_1.png" alt-text="microsoft-graph.":::

    1. Select **Delegated permissions**.

    1. Add the following API permissions:</br>
        * **email**
        * **offline_access**
        * **OpenId**
        * **profile**
        * **User.Read**
  
    1. Select **Add permissions**.

       :::image type="content" source="../msteams-platform/assets/images/meetings-side-panel/other-permissions_1.png" alt-text="Screenshot showing the addition of other permissions.":::

    1. From the left pane, select **Authentication** to set a redirect URI. 

       > [!NOTE]
       > If an app isn't granted IT admin consent, users must provide consent the first time they use the app.
               
         1. Select **Add a platform** > **Web**.

            :::image type="content" source="./assets/images/Tab-ME-SSO/configure-platform1_1.png" alt-text="web platform.":::

         1. Enter the redirect URI for your app by appending `auth-end` to domain name:</br> 
           `https://your ngrok/auth-end`. </br>

         1. Enable **Implicit grant and hybrid flows** by selecting the following checkboxes:
             * **ID tokens (used for implicit flows)**
             * **Access tokens (used for implicit and hybrid flows)**
   
         1. Select **Configure**.

            :::image type="content" source="./assets/images/Tab-ME-SSO/configure-web_1.png" alt-text="configure web.":::
   
    **To update manifest**

    1. Select **Manifest** from the left pane.
   
    1. Ensure the config item is set to **"accessTokenAcceptedVersion": 2**. If not, change its value to **2** and select **Save**. 

       > [!Tip]
       > If you're already testing your bot in Teams, you must sign out of the bot and sign out of Teams. Then sign in again to see this change.

       :::image type="content" source="./assets/images/bots/update-manifest.png" alt-text= "update manifest.":::

    **To set up Bot Service connection**

    1. Go to **Configuration page** > **Add OAuth Connection Settings**.
   
    1. Select **Add OAuth Connection Settings**.
   
    1. In **New Connection Setting**, enter the following details:

        | Field | Value or description |
        | ----- | ----- |
        | **Name** | Enter name for your new connection setting. You can use the name in the settings of your bot service code. |
        | **Service Provider** | Select **Azure Active Directory V2**. |
        | **Client ID** | Saved previously as your **Microsoft App ID**. |
        | **Client secret** | Saved previously as **Value** of the client secret ID. |
        | **Token Exchange URL** | Use the **Application ID URI** obtained previously while exposing API endpoint. |
        | **Tenant ID** | Enter **common**. |
        | **Scopes** | Enter **User.Read** and add all the **Scopes** selected while specifying permissions to downstream APIs. |
  
        :::image type="content" source="./assets/images/Tab-ME-SSO/new-connection-setting_1.png" alt-text="oath setting.":::

     1. Select **Save**.


- title: Set up app settings
  durationInMinutes: 1
  content: |
    1. Go to **appsettings.json** in the cloned repository.

       :::image type="content" source="./assets/images/Tab-ME-SSO/app-setting-folder_1.png" alt-text="app location.":::

    1. Open **appsettings.json** in Visual Studio Code.

    1. Update the following information:  

         * Replace `"MicrosoftAppId"` to your bot's **Microsoft App ID**.
         * Replace `"MicrosoftAppPassword"` to your bot's client secret ID **Value**.
         * Replace `"SiteUrl"` to your ngrok URL.
         * Replace `"ConnectionName"` to the name of OAuth connection setting.
         * Replace `"TenantId"` to the tenant ID of the tenant where the app is used.
         * Replace `"ClientId"` to your bot's **Microsoft App ID**.
         * Replace `"AppSecret"` to your bot's client secret ID **Value**.
         * Replace `"ApplicationIdURI"` in the form of `api://*******.ngrok.io/botid-{AppID}`.

        :::image type="content" source="./assets/images/Tab-ME-SSO/app-setting1.png" alt-text="App settings.":::

- title: Set up manifest file
  durationInMinutes: 1
  content: |
    1. Go to `manifest.json` in the cloned repository.

        :::image type="content" source="./assets/images/Tab-ME-SSO/folder-manifest_1.png" alt-text="Manifest file location.":::
    
    1. Open `manifest.json` in **Visual Studio Code** and make the following changes:

         * Replace `DOMAIN-NAME` with your ngrok URL.
         * Replace `YOUR-MICROSOFT-APP-ID` with your bot's **Microsoft App ID**.

             > [!NOTE]
             > Depending on the scenario `[YOUR-MICROSOFT-APP-ID]` and `[DOMAIN-NAME]` may occur multiple times.

         * Replace `"resource"` as `api://*******.ngrok.io/botid-{AppID}`.</br>
        
        ![Manifest image2](~/assets/images/Tab-ME-SSO/vs-manifest.png)

- title: Build and run the service
  durationInMinutes: 1
  content: |
    **To build and run the service using the latest version of Visual Studio or Command line**

    # [Visual Studio](#tab/vs2019)

       1. Launch the latest version of Visual Studio.
       1. Select **File** > **Open** > **Project/Solution**.
    
          ![Open file](~/assets/images/Tab-ME-SSO/open-project1.png)

       1. Select **App SSO Sample.csproj** file from **csharp** folder.

          :::image type="content" source="./assets/images/Tab-ME-SSO/project-folder1_1.png" alt-text= "Project folder.":::

       1. Press **F5** to run the project.
    
       1. Select **Yes** if the following dialog appears:

          :::image type="content" source="./assets/images/sbs-outgoing-webhooks/outgoing-webhook-certificate.png" alt-text="Trust Certificate.":::

          A webpage appears with a message **Your bot is ready!**

          :::image type="content" source="./assets/images/Tab-ME-SSO/bot-completion-explorer.png" alt-text="App ready.":::

        
    # [Command line](#tab/cli)

    Go to the **csharp** folder in a Command Prompt window and enter the following command:

    ```bash
    dotnet run
    ```
   
    ![Dotnet](~/assets/images/Tab-ME-SSO/dotnet-run1.png)
      
- title: Upload SSO App to Teams
  durationInMinutes: 1
  content: |
    1. In your cloned repository, go to **csharp > App SSO Sample > TeamsAppManifest**.

    1. Create a .zip with the following files that are present in the **Manifest** folder: 
       * manifest.json
       * icon-outline.png
       * icon-color.png

       :::image type="content" source="./assets/images/Tab-ME-SSO/upload-tab-me-sso_1.png" alt-text="upload manifest.":::
   
    1. Go to **Microsoft Teams**.

    1. Select **Apps** > **Manage your apps**.

       :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/manageapps_1.png" alt-text="Manage apps":::
   
    1. Select **Upload an app** > **Upload a custom app**.

       :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/uploadapp_1.png" alt-text="Upload custom app":::

    1. Select **Open** to upload the .zip file that you created in the **Manifest** folder.

       :::image type="content" source="./assets/images/Tab-ME-SSO/upload-tab-me-sso-open_1.png" alt-text="upload app.":::)

    1. Select **Add**.

       :::image type="content" source="./assets/images/Tab-ME-SSO/add-sso-app_1.png" alt-text="add app.":::
    
    1. Send a message to the bot. 
    1. The bot performs SSO and displays profile card along with option prompt to view token.

       :::image type="content" source="./assets/images/Tab-ME-SSO/Congratulation-image_1.png" alt-text="Congratulation image.":::

    1. Select **Yes** to view token or **No** to continue with chat.
      
       :::image type="content" source="./assets/images/Tab-ME-SSO/token-view1_1.png" alt-text="token view.":::

      1. If SSO isn't performed, then the bot performs default authentication method for your tab.

         :::image type="content" source="./assets/images/Tab-ME-SSO/not-login11_1.png" alt-text="not login.":::

      1. Select ellipse ●●● to open message extension app.
             
      1. Select your new SSO application.

          :::image type="content" source="./assets/images/Tab-ME-SSO/recent-app-sso_1.png" alt-text="SSO app.":::

      1. Select **sign in**.

          :::image type="content" source="./assets/images/Tab-ME-SSO/sign-in-sso1_1.png" alt-text= "sign in.":::

      1. Enter your credentials in **Sign in** window, and select **Next**.

          :::image type="content" source="./assets/images/Tab-ME-SSO/sign-in-box.png" alt-text= "sign-in box.":::
      
      1. Select **Accept**.

          :::image type="content" source="./assets/images/Tab-ME-SSO/consent-box.png" alt-text= "consent box.":::

      1. Select message extension and your application.

      1. Select your profile under search box. You'll see the following output:

          :::image type="content" source="./assets/images/Tab-ME-SSO/hello-megan-profile_1.png" alt-text= "Profile.":::

      1. Send `https://profile.botframework.com` to the application to get a profile card.
       
          :::image type="content" source="./assets/images/Tab-ME-SSO/profile-card_1.png" alt-text= "Profile card.":::

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with output like this?

    :::image type="content" source="./assets/images/Tab-ME-SSO//hello-megan-profile245_1.png" alt-text="Congratulation image.":::
    
    

- content: |
    You've completed the tutorial to get started with SSO for tab and message extension app.
