### YamlMime:Tutorial
title: SSO for tabs and message extension
metadata:
  title: SSO for tabs and message extension
  description: In this module, learn how to set up Azure Active Directory Single sign-on (Azure AD SSO) for tabs.
  audience: Developer
  level: Beginner
  ms.date: 12/07/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: tabs/how-to/authentication/tab-sso-overview.md
  nextTutorialTitle: Read more on SSO authentication for tabs.
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
   The  Azure Active Directory single sign-on (Azure AD SSO) helps to authenticate users in Teams. 

   **Key aspects of Azure AD SSO**:

    * Allows the user to sign in automatically after the first sign in.
    * Allows the user to sign in to other devices without entering credentials again.
    * Obtains token for the signed in user.

   This step-by-step guide helps you to create tabs and message extensions enabling Azure AD SSO authentication. You'll see the following output:

     :::image type="content" source="./assets/images/Tab-ME-SSO/hello-megan-profile245_1.png" alt-text="Screenshot of the tab and message extension with SSO authentication output after you have successfully completed the step-by-step guide.":::
   

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure that you install the following tools and set up your development environment:  

    | &nbsp; | Install | For using... |
     | --- | --- | --- |
     | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, call, and all-in-one place.|
     | &nbsp; | [Microsoft 365 developer account](/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | Access to Teams account with the appropriate permissions to install an app. |
     | &nbsp; | [.NET Core SDK](https://dotnet.microsoft.com/en-us/download) | Customized bindings for local debugging and Azure Functions app deployments. If you haven't installed the latest version, install the portable version. |
     | &nbsp; | [Visual Studio 2022](https://visualstudio.microsoft.com) | You can install the enterprise version in Visual Studio 2022, and install the ASP.NET and web development workloads. Use the latest version. |
     | &nbsp; | [ngrok](https://ngrok.com/download) | Teams app features (conversational bots, message extensions, and incoming webhooks) require inbound connections. A tunnel connects your development system to Teams. It isn't required for apps that only include tabs. This package is installed within the project directory (using npm `devDependencies`). |

      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).
    
- title: Set up local environment
  durationInMinutes: 1
  content: |
   Clone **Microsoft-Teams-Samples** repository to your local GitHub:  

   [INCLUDE [Set up local environment](includes/get-started/clone-repository)]

- title: Create and register your bot in Azure AD portal
  durationInMinutes: 5
  content: |
    To create and register your bot in Microsoft Azure AD, perform the following steps:

    * Create Azure Bot resource to register bot with Azure Bot Service.
    * Create client secret that enables SSO authentication of the bot.
    * Add Teams channel to deploy the bot to a Teams channel.
    * Create a ngrok or dev tunnel to the endpoints of your web server.
    * Add messaging endpoint to the ngrok or dev tunnel you created.

    **To create Azure Bot resource**

      [INCLUDE [Azure bot resource](includes/get-started/azure-bot-resource)]
        
    **To create client secret**

      [INCLUDE [Client secret](includes/get-started/create-client-secret)]

    **To add the Teams channel**

      [INCLUDE [Teams channel](includes/get-started/add-teams-channel)]
    
    **To create a ngrok tunnel**

      [Dev tunnel](#tab/Dev tunnel)
      [INCLUDE [Tunnel](includes/get-started/dev-tunnel)]

      [ngork](#tab/ngork)
      [INCLUDE [Tunnel](includes/get-started/ngrok-tunnel)]
    
    **To add messaging endpoint**

      [INCLUDE [messaging endpoint](includes/get-started/messaging-endpoint)]

- title: Configure SSO for your tab 
  durationInMinutes: 1
  content: | 

   To configure SSO for your tab:

   [INCLUDE [Azure app registration](includes/get-started/azure-app-registration)]
   [INCLUDE [Azure add scope](includes/get-started/azure-add-scope)]
   [INCLUDE [Azure client application](includes/get-started/azure-client-application)]
   [INCLUDE [API permission](includes/get-started/azure-api-permissions)]
   [INCLUDE [Azure api permission](includes/get-started/azure-web-authentication)]
   [INCLUDE [Manifest and new connection](includes/get-started/azure-manifest-service-connection)]

- title: Set up app settings
  durationInMinutes: 1
  content: |
    1. Go to the **appsettings.json** file in the cloned repository.

       :::image type="content" source="./assets/images/Tab-ME-SSO/app-setting-folder_1.png" alt-text="Screenshot of Project file with appsettings.json file highlighted in red.":::

    1. Open the **appsettings.json** file in Visual Studio.

    1. Update the following information:  

         * Replace `"MicrosoftAppId"` to your bot's **Microsoft App ID**.
         * Replace `"MicrosoftAppPassword"` to your bot's client secret ID **Value**.
         * Replace `"SiteUrl"` to your ngrok URL.
         * Replace `"ConnectionName"` to the name of OAuth connection setting.
         * Replace `"TenantId"` to the tenant ID of the tenant where the app is used.
         * Replace `"ClientId"` to your bot's **Microsoft App ID**.
         * Replace `"AppSecret"` to your bot's client secret ID **Value**.
         * Replace `"ApplicationIdURI"` in the form of `api://*******.ngrok.io/botid-{AppID}`.

        :::image type="content" source="./assets/images/Tab-ME-SSO/app-setting.png" alt-text="Screenshot of the appsettings.json file with the values entered highlighted in red.":::

- title: Set up manifest file
  durationInMinutes: 1
  content: |
    1. Go to the **manifest.json** file in the cloned repository.

        :::image type="content" source="./assets/images/Tab-ME-SSO/folder-manifest_1.png" alt-text="Screenshot of Manifest folder with the manifest file highlighted in red.":::
    
    1. Open the **manifest.json** file in **Visual Studio** and make the following changes:

         * Replace `DOMAIN-NAME` with your ngrok URL.
         * Replace `YOUR-MICROSOFT-APP-ID` with your bot's **Microsoft App ID**.

             > [!NOTE]
             > Depending on the scenario `[YOUR-MICROSOFT-APP-ID]` and `[DOMAIN-NAME]` may occur multiple times.

         * Replace `resource` as `api://*******.ngrok.io/botid-{AppID}`.</br>
        :::image type="content" source="~/assets/images/Tab-ME-SSO/vs-manifest.png" alt-text="Screenshot of the manifest.json file with the values entered highlighted in red.":::
        
- title: Build and run the service
  durationInMinutes: 1
  content: |
    To build and run the service use Visual Studio or Command line.

    # [Visual Studio](#tab/vs2019)

       1. Open Visual Studio.
       1. Select **File** > **Open** > **Project/Solution...**.
          
          :::image type="content" source="~/assets/images/Tab-ME-SSO/open-project1.png" alt-text="Screenshot of Visual Studio file menu. The menu entries titled Open under File menu and Project/Solution under Open are highlighted in red.":::

       1. In the **csharp** folder, select **App SSO Sample.csproj** file.

          :::image type="content" source="./assets/images/Tab-ME-SSO/project-folder1_1.png" alt-text= "Screenshot of Project file with App SSO Sample.csproj file highlighted in red.":::

       1. Press **F5** to run the project.
    
       1. Select **Yes** if the following dialog appears:

          :::image type="content" source="./assets/images/sbs-outgoing-webhooks/outgoing-webhook-certificate.png" alt-text="Screenshot of Security Warning with the Yes option highlighted in red.":::

          A webpage appears with a message **Your bot is ready!**

          :::image type="content" source="./assets/images/Tab-ME-SSO/bot-completion-explorer.png" alt-text="Screenshot of the webpage that displays Your bot is ready.":::

        
    # [Command line](#tab/cli)

    Go to the **csharp** folder in a Command Prompt window and enter the following command:

    ```bash
    dotnet run
    ```
   
    ![Dotnet](~/assets/images/Tab-ME-SSO/dotnet-run1.png)
      
- title: Upload SSO App to Teams
  durationInMinutes: 1
  content: |
    1. In your cloned repository, go to **csharp** > **App SSO Sample** > **TeamsAppManifest**.

    1. Create a .zip file with the following files that are present in the **Manifest** folder: 
       * manifest.json
       * icon-outline.png
       * icon-color.png

       :::image type="content" source="./assets/images/Tab-ME-SSO/upload-tab-me-sso_1.png" alt-text="Screenshot of Manifest folder with tab manifest zip folder highlighted in red.":::
   
    1. In the Teams client, select the **Apps** icon.

    1. Select **Manage your apps**.

    1. Select **Upload an app**.

    1. Look for the option to **Upload a custom app**. If you see the option, sideloading apps is enabled.

       :::image type="content" source="~/assets/images/tab-device-permission/custom-upload.png" alt-text="Screenshot shows the upload a custom app.":::

        > [!NOTE]
        > Contact your Teams administrator, if you don't find the option to upload a custom app.

    1. Select **Open** to upload the .zip file that you created in the **Manifest** folder.

       :::image type="content" source="./assets/images/Tab-ME-SSO/upload-tab-me-sso-open_1.png" alt-text="Screenshot of Manifest folder with Open option to upload the Teams Bot zip file highlighted in red.":::

    1. Select **Add**.

       :::image type="content" source="./assets/images/Tab-ME-SSO/add-sso-app_1.png" alt-text="Screenshot of Conversation Bot with Add option highlighted in red.":::
    
    1. Send a message to the bot. 
    1. The bot performs SSO and displays profile card along with option prompt to view token.

       :::image type="content" source="./assets/images/Tab-ME-SSO/Congratulation-image_1.png" alt-text="Screenshot of the profile card received in Teams.":::

    1. Select **Yes** to view token or **No** to continue with chat.
      
       :::image type="content" source="./assets/images/Tab-ME-SSO/token-view1_1.png" alt-text="Screenshot of the dialog to either select Yes or No.":::

      1. If SSO isn't performed, then the bot performs default authentication method for your tab.

         :::image type="content" source="./assets/images/Tab-ME-SSO/not-login11_1.png" alt-text="Screenshot of the default SSO page in Teams.":::

      1. In the left pane of the Teams, select More added apps (●●●).
             
      1. Select your new SSO application.

          :::image type="content" source="./assets/images/Tab-ME-SSO/recent-app-sso_1.png" alt-text="Screenshot of your app highlighted in red in Apps section.":::

      1. Select **sign in**.

          :::image type="content" source="./assets/images/Tab-ME-SSO/sign-in-sso1_1.png" alt-text= "Screenshot of your app with sign in highlighted in red.":::

      1. Enter your credentials in **Sign in** window, and select **Next**.

          :::image type="content" source="./assets/images/Tab-ME-SSO/sign-in-box.png" alt-text= "Screenshot of Microsoft Sign in page with Next highlighted in red.":::
      
      1. Select **Accept**.

          :::image type="content" source="./assets/images/Tab-ME-SSO/consent-box.png" alt-text= "Screenshot of Microsoft consent dialog with Accept highlighted in red.":::

      1. Select message extension and your application.

      1. Select your profile under search box. You'll see the following output:

          :::image type="content" source="./assets/images/Tab-ME-SSO/hello-megan-profile_1.png" alt-text= "Screenshot of the selected profile.":::

      1. Send `https://profile.botframework.com` to the application to get a profile card.
       
          :::image type="content" source="./assets/images/Tab-ME-SSO/profile-card_1.png" alt-text= "Screenshot of the selected profile after entering the URL.":::

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with output like this?

    :::image type="content" source="./assets/images/Tab-ME-SSO//hello-megan-profile245_1.png" alt-text="Screenshot of the output after you have successfully completed the step-by-step guide.":::
        
- content: |
    You've completed the tutorial to get started with SSO for tab and message extension app.
