### YamlMime:Tutorial
title: Build a bot-based message extension plugin
metadata:
  title: Build a bot-based message extension plugin
  description: In this tutorial, you can learn to build a bot-based message extension and extend it as a plugin in Copilot.
  audience: Developer
  level: Beginner
  ms.date: 05/26/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: messaging-extensions/build-bot-based-plugin.md
  nextTutorialTitle: Bot-based message extension plugin
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    Start Microsoft Teams app development with your first Teams app. 
    You can create a bot-based message extension plugin with Teams using Javascript.  
    
    In this tutorial, you'll learn:

    - How to set up a new project with Teams Toolkit.
    - How to build a Bot-based message extension plugin.
    - How to deploy your app.
    - Trigger your bot-based message extension plugin in Copilot.

    This step-by-step guide helps you to build  bot-based message extension plugin with Teams Toolkit. You'll see the following output after you've completed this guide:

     :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2//first-msgext/app-added-mex-local-debug.png" alt-text="Screenshot shows that app sideloaded in Teams." lightbox="../msteams-platform/assets/images/teams-toolkit-v2//first-msgext/app-added-mex-local-debug.png":::

- title: Prerequisites
  durationInMinutes: 1
  content: |

   Ensure you install the following tools for building and deploying your apps.

   | &nbsp; | Install | For using... |
   | --- | --- | --- |
   | **Required** | &nbsp; | &nbsp; |
   | &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript or TypeScript, build environments. Use the latest version. |
   | &nbsp; | [Teams Toolkit](#install-teams-toolkit) | Microsoft Visual Studio Code extension that creates a project scaffolding for your app. Use the pre-release version.|
   | &nbsp; | [Node.js](https://nodejs.org/en/download/) | Back-end JavaScript runtime environment. For more information, see [Node.js version compatibility table for project type](~/toolkit/build-environments.md#nodejs-version-compatibility-table-for-project-type).|
   | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, and call-all in one place.|
   | &nbsp; | [Microsoft&nbsp;Edge](https://www.microsoft.com/edge) (recommended) or [Google Chrome](https://www.google.com/chrome/) | A browser with developer tools. |
   | &nbsp; | [Microsoft 365 developer account](/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | Access to Teams account with the appropriate permissions to install an app. |
   | **Optional** | &nbsp; | &nbsp; |
   | &nbsp; | [Azure Tools for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack) and [Azure CLI](/cli/azure/install-azure-cli) | Azure tools to access stored data or to deploy a cloud-based backend for your Teams app in Azure. |
   | &nbsp; | [React Developer Tools for Chrome](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi) OR [React Developer Tools for Microsoft&nbsp;Edge](https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil) | A browser DevTools extension for the open-source React JavaScript library. |
   | &nbsp; | [Microsoft Graph Explorer](https://developer.microsoft.com/graph/graph-explorer) | Microsoft Graph Explorer, a browser-based tool that lets you run a query from Microsoft Graph data. |


   > [!TIP]
   > If you work with Microsoft Graph data, you should learn about and bookmark the Microsoft Graph Explorer. This browser-based tool allows you to query Microsoft Graph outside of an app.

   [!INCLUDE [Set up prerequisites](includes/get-started/prepare-teams-toolkit.md)]

   ## Get a free Azure account

   If you want to host your app or access resources in Azure, you must have an Azure subscription. [Create a free account](https://azure.microsoft.com/free/) before you begin.

   Now you've got all the tools to set up your account. Next, let's set up your development environment and start building! Select the app you want to create first.

- title: Create project workspace for your message extension app
  durationInMinutes: 1
  content: |

    You've built your bot app. Now, let's create your first message extension app.

    Message Extension capability lets you interact with a web service. Use the compose area, command box, or a messaging in Teams client to search and initiate actions in an external system.

      :::image type="content" source="~/assets/images/teams-toolkit-v2/first-msgext/your-helloworld-app-msgext.png" alt-text="Diagram showing this app has three features. message extension is highlighted.":::

    There are two types of Teams **message extensions**:

    - [Search commands](../msteams-platform/messaging-extensions/how-to/search-commands/define-search-command.md): You can search external systems. Then, you can insert its results into a message in the form of a card.
    - [Action commands](../msteams-platform/messaging-extensions/how-to/action-commands/define-action-command.md): You can present your users with a modal pop-up to collect or display information. Then, you can process their interaction and send information back to Teams.

    Let's create a message extension with a *search command*. Use it to search for external data and insert the results into a message within Teams client.

    As you've already prepared for creating these apps, you can set up a new Teams project for creating the message extension app.

    > [!NOTE]
    > Message extensions rely on bots to provide a dialog between the user and your code.


    In this tutorial, you learn:

    1. [How to set up a new message extension project with Teams Toolkit.](#create-your-message-extension-project-workspace)
    1. [About the directory structure of your app project.](#take-a-tour-of-the-message-extension-app-source-code)

    ## Create your message extension project workspace

    If the prerequisites are in place, let's begin!

    > [!NOTE]
    > The Visual Studio Code UI shown is from Mac. It may differ depending on your operating system, Toolkit version, and environment.

     To create a bot-based message extension plugin, follow these steps:

    1. Open Visual Studio Code.
    1. Select the Teams Toolkit :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon in the Visual Studio Code **Activity Bar**.

    1. Select **Create a New App**.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/create-project.png" alt-text="Screen shows the location of the Create New Project link in the Teams Toolkit sidebar.":::

    1. Select **Message Extension** to create an app using the Teams Toolkit.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/create-new-app1.png" alt-text="Screenshot shows the Wizard start for Create New Project.":::

    1. Select **Custom Search Results**.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/select-capabilities-mex1.png" alt-text="Screenshot showing how to add capabilities to your new app.":::

    1. Select **Start with a Bot**.
    
    1. Select **JavaScript** as the programming language.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/select-language-tab.png" alt-text="Screenshot showing how to select the programming language.":::

    1. Select **Default folder** to store your project root folder in default location.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/select-default-location.png" alt-text="Screenshot shows the selection of default location.":::

        You can also change the default location by the following steps:

        1. Select **Browse**.

            :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/select-browse.png" alt-text="Screenshot shows the selection of browse location option.":::
            
        1. Select the location for project workspace.

        1. Select the **Select Folder**.

            :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/select-folder.png" alt-text="Screenshot showing how to select the folder.":::

    1. Enter a suitable name for your app. Select **Enter**.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/enter-project-name.png" alt-text="Screenshot showing how to enter the app name.":::

        Teams Toolkit creates the app in a few seconds.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/app-created-mex.png" alt-text="Screenshot showing the app created." lightbox="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/app-created-mex.png":::

        After your app is created, the Teams Toolkit displays the following message: 

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/preview-project-msg.png" alt-text="Screenshot shows the localdebug.":::

        You can select **Local debug** to preview your project. 

      <details>
      <summary>A quick recap of creating a Teams app.</summary>
      Watch this short recap for creating a Teams app.

      ![Create a Teams app](~/assets/videos/javascript-msg-ext-app1.gif)
      </details>

    ## Take a tour of the message extension app source code

    A message extension uses the Bot Framework. You use it to interact with your service via a conversation. After scaffolding is done, view the project directories and files in the Explorer area of Visual Studio Code.

    :::image type="content" source="~/assets/images/teams-toolkit-v2/first-msgext/folder-structure-mex-app.png" alt-text="Screenshot shows the folder msg.":::

    | Folder / File | Contents |
    | --- | --- |
    | `teamsapp.yml` | Main project file describes your application configuration and defines the set of actions to run in each lifecycle stages. |
    | `teamsapp.local.yml` | This overrides `teamsapp.yml` with actions that enable local execution and debugging. |
    | `.vscode/` | VSCode files for local debug. |
    | `appPackage/` | Templates for the Teams application manifest. |
    | `infra/` | Templates for provisioning Azure resources. |
    | `index.js` | Application entry point and `restify` handler. |
    | `teamsBot.js` | Teams activity handler. |

    > [!Tip]
    > Familiarize yourself with bots and message extension outside of Teams before you integrate your app within Teams.

- title: Build and run your first bot-based message extension plugin
  durationInMinutes: 1
  content: |

    After you set up your project workspace with Teams Toolkit, build your project. You need to sign in to your Microsoft 365 account.

    ## Sign in to your Microsoft 365 account

    Use this account to sign in to Teams. If you're using a Microsoft 365 developer program tenant, the admin account you set up while registering is your Microsoft 365 account.

    1. Open Visual Studio Code.
    1. Select the Teams Toolkit  :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon in the sidebar.
    1. Select **Sign in to M365** using your credentials..

        Your default web browser opens to let you sign in to the account.

    1. Close the browser when prompted and return to Visual Studio Code.
    1. Return to Teams Toolkit within Visual Studio Code.

        The **ACCOUNTS** section of the sidebar shows your Microsoft 365 account name. The Teams Toolkit displays **Sideloading enabled** if sideloading is enabled for your Microsoft 365 account.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-tab/m365-sideloading-enabled-msg.png" alt-text="Screenshot showing where to sign in to Microsoft 365 and Azure.":::

        Now you're ready to build the app and run it locally!

    

    ## Build and run your app in the local environment

    A message extension lets you interact with a web service. It takes advantage of the messaging feature and secure communication of a bot. The message extension app is added to a web service registered as a bot. 
    
    ### Build and run your app locally

    1. From the left pane, select **Run and Debug (Ctrl+Shift+D)**.
    1. Select **Debug in Teams (Edge)** or **Debug in Teams (Chrome)**. Teams Toolkit launches your app in Teams using a web browser.

        > [!NOTE]
        > If Teams Toolkit is unable to check a particular prerequisite, it prompts you to check.

        <!-- markdownlint-disable MD033 -->
        <details>
        <summary>Learn what happens when you run your app locally in the debugger.</summary>

        When you select **F5**, the Teams Toolkit:

        1. Checks all the following prerequisites:
          - You're logged in with a Microsoft 365 account.
          - Sideloading is enabled for your Microsoft 365 account.
          - Supported Node.js version is installed.
          - Port required by bot app is available.

        2. Install npm packages
        3. Starts Dev Tunnel to create a HTTP tunnel.
        4. Registers the app in Azure AD and configures the app.
        5. Registers the bot app in Bot Framework and configures the app.
        6. Registers the app in Teams Developer Portal and configures the app.
        7. Starts the message extension app hosted locally.
        8. Starts Teams in a web browser and sideloads the Teams app.
        
        </details>

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/f5-build-and-run-mex.png" alt-text="Screenshot showing when F5 key is pressed to debug." lightbox="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/f5-build-and-run-mex.png":::

        > [!NOTE]
        > When you run the app for the first time, all dependencies are downloaded, and the app is built. A browser window opens when the build is complete. This process can take three to five minutes to complete.

  
        
    1. Select **Add**. The app is installed on Teams.
    
        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/add-mex-app-local-debug-latest.png" alt-text="Screenshot shows message to add the app." lightbox="../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/add-mex-app-local-debug.png":::
        
        As message extensions rely on bots for enabling communication between the user and the web service,, your app loads in to a chat feature of a bot.

        - If you've created a bot app before you created the message extension app, you can see that it is loaded in the same bot app you created. Previous chat messages are visible.
        - If you created a message extension first, your app is loaded in any chat that is open on Teams.

        > [!NOTE]
        > If you want to extend your app to Outlook and Microsoft 365, you can choose to debug your app with Outlook and Microsoft 365 from RUN AND DEBUG dropdown in Visual Studio Code.

    ### Test your app

    The first time your app loads, the message extension app is open for you to test. This sample app lets you search open-source npm packages from the software registry.
    
    #### To run a search query

    1. Go to a Teams chat and select **Actions and apps**.
    1. From the message extension fly-out menu, @mention your message extension from the search box area.
    1. Select your message extension and enter your search query.        

    
    <br>
    <!-- markdownlint-disable MD033 -->
    <details>
    <summary>Learn how to troubleshoot if your app doesn't run locally.</summary>

    To run your app in Teams, you must have a Microsoft 365 development account that allows app sideloading. You can learn more about sideloading in the Prerequisites section.
    </details>

- title: Deploy your first Teams app
  durationInMinutes: 1
  content: |

    You've learned to create, build, and run Teams app with Message Extension capabilities. The final step is to deploy your app on Azure.

    Let's deploy the first message extension app on Azure using Teams Toolkit.

    ## Sign in to your Azure account

    Use this account to access the Microsoft Azure portal and to provision new cloud resources to support your app.

    1. Open Visual Studio Code.
    1. Open the project folder in which you created the message extension app.
    1. Select the Teams Toolkit  :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon in the sidebar.
    1. Select **Sign in to Azure** using your credentials.

        > [!TIP]
        > If you have the AZURE ACCOUNT extension installed and are using the same account, you can skip this step. Use the same account as you are using in other extensions.

        Your default web browser opens to let you sign in to the account.
    1. Close the browser when prompted and return to Visual Studio Code.

        The **ACCOUNTS** section of the sidebar shows the two accounts separately. It also lists the number of usable Azure subscriptions available to you. Ensure you have at least one usable Azure subscription available. If not, sign out and use a different account.

        Congratulations, you have signed in your Azure account! 
        Now let's go ahead and learn how to deploy one of the apps to Azure using the Teams Toolkit.

    
      [!INCLUDE [Provision and Deploy your app on Azure](~/includes/get-started/azure-provisioning-instructions.md)]

      <!-- markdownlint-disable MD033 -->
      <details>
      <summary>Learn what happens when you deployed your app to Azure</summary>

      Before deployment, the application has been running locally:

      * The backend runs using **Azure Functions Core Tools**.
      * The application HTTP endpoint, where Microsoft Teams loads the application, runs locally.

      Deployment is a two-step process. You provision the resources on an active Azure subscription, and then deploy or upload the backend and frontend code for the application to Azure.

      * The backend, if configured, uses various Azure services, including Azure App Service and Azure Storage.
      * The frontend application is deployed to an Azure Storage account configured for static web hosting.

      </details>


- title: Trigger your bot-based message extension plugin in Copilot
  durationInMinutes: 1
  content: |
    To trigger the message extension through Copilot, follow these steps:

    1. Select **Apps**.
    1. Search for Copilot.
    1. Select **Plugins**.
    1. From the list of plugins, turn on the toggle for your app.

      :::image type="content" source="assets/images/Copilot/bot-based-VSC-plugin-toggle.png" alt-text="Screenshot shows the Plugin option, list of plugins, and the toggle enabled for bot-based-ME-test-local plugin.":::

    1. From the compose message area, send a message to Copilot to find an NuGet package information. For example: Find the NuGet package info on Microsoft.CSharp.

      :::image type="content" source="assets/images/Copilot/bot-based-VSC-trigger-plugin.png" alt-text="Screenshot shows the plugin prompt and the response from copilot.":::

    > [!NOTE]
    > This prompt may not always make Copilot include a response from your message extension. If it happens, try some other prompts or leave feedback to us by thumbing down the Copilot response and leave a message tagged with [MessageExtension].

- title: Congratulations!
  durationInMinutes: 1
  content: |

    You've done it!

    You've created a message extension app.

    Now that you've learned to create a basic app, you can move on to creating more complex apps. Follow the procedures to build and deploy the app, and your app has multiple capabilities. 

    You've completed the tutorial to build message extension app with JavaScript.
    
