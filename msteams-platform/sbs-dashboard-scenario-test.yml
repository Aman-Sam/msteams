    # Scenario 1:
      
    ## Add single sign-on (SSO) related files by using Teams toolkit.

       1. Select the Teams Toolkit icon in the Visual Studio Code Activity Bar.
      
       1. Under **DEVELOPMENT**, select **View How-to Guides**.

          :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/add-features.png" alt-text="Screenshot shows the selection of added features option.":::

       1. Select **Develop Single Sign-On Experience in Teams**.

          :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/single-sign-on.png" alt-text="Screenshot shows the selection of single sign-on option.":::

         >[ !NOTE] 
         > Dashboard teams tab app  is a React project. The SSO creation and Graph API follow the React steps, adding the aad, cli, file source, and source code. The .html files *only* have to be created manually and debug the Teams app.
       
       The graph API call is implemented via TeamsFx SDK. Refer to the [document](https://learn.microsoft.com/en-us/microsoftteams/platform/toolkit/teamsfx-sdk#microsoft-graph-scenarios:~:text=caught%20and%20transformed.-,Microsoft%20Graph%20Scenarios,-This%20section%20provides) as follows:

        1. In Visual Studio Code, go to **EXPLORER** > **src** > **services** > **listService.ts**

        1. Update the following codes in the **listService.ts**.         

       ```typescript
       /**
        * Retrive sample data
        * @returns data for list widget
        */
       import {TeamsUserCredentialContext} from "../internal/singletonContext";
       import {
        createMicrosoftGraphClientWithCredential,
        TeamsUserCredential,
        } from "@microsoft/teamsfx";
        import { ListModel } from "../models/listModel";
        import { loginAction } from "../internal/login";
                
       export const getListData = async (): Promise<ListModel[]> => {
         await loginAction(["User.Read"]);
         let credential = TeamsUserCredentialContext.getInstance().getCredential();
         const graphClient = createMicrosoftGraphClientWithCredential(credential, [
           "User.Read",
         ]);
         const me = await graphClient.api("/me").get();
         return [
           {
             id: me.id,
             title: me.displayName,
             content: me.mail,
           },
         ];      
       }
       ```
       1. In Visual Studio Code, go to EXPLORER > src > services > ListWidget.tsx

       1. Update the `export default class ListWidget()` to add user profile widget.

       ```typescript
       export default class ListWidget extends BaseWidget<any, IListWidgetState> {
         async getData(): Promise<IListWidgetState> {
           return { data: await getListData() };
       ```

       1. SSO and Graph API shows the login user profile in list widget. 

         :::image type="content" source="assets/images/sbs-create-a-new-dashboard/join.png" alt-text="Screenshot shows the Join button highlighted in red.":::
        
