### YamlMime:Tutorial
title: Build a dashboard in Teams
metadata:
  title: Build a dashboard in Teams
  description: Learn how to create a dashboard tab, add a new widget, and implement Graph API.
  audience: Developer
  level: Beginner
  ms.date: 01/06/2023
  ms.topic: interactive-tutorial
  nextTutorialHref: tabs/how-to/build-a-dashboard-tab-app.md
  nextTutorialTitle: Dashboard, widget, and Graph API call in Teams toolkit
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    This step-by-step guide helps you to create a dashboard tab, add a new widget to the dashboard, and implement Graph API. You see the following output:

    :::image type="content" source="assets/images/sbs-create-a-new-dashboard/dashboard1.png" alt-text="Screenshot shows the final output of dashboard.":::
    
- title: Prerequisites
  durationInMinutes: 1
  content: |

    | Install | For using |
    | --- | --- |    
    | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript, TypeScript, or SharePoint Framework (SPFx) build environments. Use version 1.55 or later. |
    | [Teams Toolkit](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension) or [TeamsFx CLI](~/toolkit/TeamsFx-CLI.md) | Microsoft Visual Studio Code extension that creates a project scaffolding for your app. Use Teams Toolkit v5. |
    | [Microsoft 365 developer program](https://developer.microsoft.com/microsoft-365/dev-program) | Teams account with the appropriate permissions to install an app. |
    | [Node.js](https://nodejs.org/en/download/) | Back-end JavaScript runtime environment. For more information, see [Node.js version compatibility table for project type](toolkit/tools-prerequisites.md#nodejs-version-compatibility-table-for-project-type).|
    | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, call - all in one place.|
    | [Microsoft&nbsp;Edge](https://www.microsoft.com/edge) (recommended) or [Google Chrome](https://www.google.com/chrome/) | A browser with developer tools. |

- title: Create a new dashboard
  content: |

    Teams Toolkit supports scaffolding and dashboard creation.

    To create a new dashboard:

     1. Select the Teams Toolkit icon in the Visual Studio Code Activity Bar.

     1. Select **Create a New App**.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/create-a-new teams-app.png" alt-text="Screenshot shows the selection to create new app.":::

     1. Select **Tab** to create a new tab project. 

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/create-a-new-teams-app-2.png" alt-text="Screenshot shows the selection of new Teams app.":::

     1. Select **Dashboard** from the App Features Using a Tab.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/dashboard-tab-preview.png" alt-text="Screenshot shows the selection of dashboard tab preview.":::

     1. Select TypeScript as the programming language.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/programming-language.png" alt-text="Screenshot shows the selection of programming language.":::

     1. Select a workspace folder.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/default-folder.png" alt-text="Screenshot shows the selection of workspace folder.":::

     1. Enter an application name.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/enter-application-name.png" alt-text="Screenshot shows the selection of application name.":::

        The Teams tab app is created in few seconds and Teams Toolkit displays the following message.
      
        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/teams-app-preview.png" alt-text="Screenshot shows the teams tab app dashboard preview in VS Code.":::

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/dashboard-debug.png" alt-text="Screenshot shows the local debug.":::

     1. Select the Teams Toolkit icon in sidebar.
     
     1. Select sign in to Microsoft 365 account using test credentials.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/M365-account-signin.png" alt-text="Screenshot shows the Microsoft sign in.":::

     1. Select F5 to run the application in debug mode.

     1. Select Add.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/teams-dashboard-add.png" alt-text="Screenshot shows the selection of workspace folder.":::

        Successfully created the teams tab app dashboard.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/dashboard.png" alt-text="Screenshot shows user profile information and recent Teams activity.":::

      Teams app also supports different themes, including dark and high contrast themes.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/dark-light-theme.png" alt-text="Screenshot shows the contrast themes.":::
      
      In TeamsFX CLI,

      * If you prefer interactive mode, execute `teamsfx new` command, then use the keyboard to go through the same flow as in Visual Studio Code.

      * If you prefer non-interactive mode, enter all required parameters in one command:

        `teamsfx new--interactive false--capabilities "dashboard-tab"--programming-language "TypeScript"--folder "./"--app-name dashboard-cli-001`

- title: Take a tour of the app source code
  durationInMinutes: 2
  content: |       

      The core dashboard implementation is in the tabs folder. This section walks you through the generated code.

      | Folder | Contents |
      | ----- | ----- |
      | `.vscode` | VSCode files for debugging. |
      | `appPackage` | Templates for the Teams application manifest. |
      | `env` | Environment files. |
      | `infra` | Templates for provisioning Azure resources. |
      | `src` | The source code for the dashboard Teams application. |

      The following files provide the business logic for the dashboard tab. These files can be updated to fit your business logic requirements. The default implementation provides a starting point to help you get started.

      | File | Contents |
      | ----- | ----- |
      | `src/models/chartModel.ts` | Data model for the chart widget. |
      | `src/models/listModel.ts` | Data model for the list widget. |
      | `src/services/chartService.ts` | A data retrieve implementation for the chart widget. |
      | `src/services/listService.ts` | A data retrieve implementation for the list widget. |
      | `src/dashboards/SampleDashboard.tsx` | A sample dashboard layout implementation. |
      | `src/styles/ChartWidget.css` | The chart widget style file. |
      | `src/styles/ListWidget.css` | The list widget style file. |
      | `src/widgets/ChartWidget.tsx` | A widget implementation that can display a chart. |
      | `src/widgets/ListWidget.tsx` | A widget implementation that can display a list. |
      | `src/App.css` | The style of application route. |
      | `src/App.tsx` | Application route. |
      
      The following files are project-related files. Generally, you don't need to customize these files.

      | File | Contents |
      | ----- | ----- |
      | `src/index.css` | The style of application entry point.|
      | `src/index.tsx` | Application entry point. |
      | `src/internal/addNewScopes.ts` | Implementation of new scopes add. |
      | `src/internal/context.ts` | TeamsFx Context. |
      | `src/internal/login.ts` | Implementation of login. |
      | `src/internal/singletonContext.ts` | Implementation of the TeamsUserCredential instance singleton. |
   
- title: Add a widget to the dashboard
  durationInMinutes: 5
  content: |

    To add a new widget to the dashboard, follow these steps:

     1. [Define a data model](#define-a-data-model)
     2. [Create a data retrieve service](#create-a-data-retrieve-service)
     3. [Create a widget file](#create-a-widget-file)
     4. [Add the widget to the dashboard](#add-the-widget-to-the-dashboard)
    
     ## Define a data model

     1. In Visual Studio Code, go to **EXPLORER** > **src** > **models**.
     1. Create a **sampleModel.ts** file.
     1. Add the following code in the **sampleModel.ts** file:

        ```typescript
          export interface SampleModel {
          content: string;
          }
        ```

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/create-sample-model.png" alt-text="Screenshot shows the creation of sampleModel file under the models folder in Visual Studio Code. ":::

     ## Create a data retrieve service

     1. In Visual Studio Code, go to **EXPLORER** > **src** > **services**.
     1. Create a **sampleService.ts** file.
     1. Add the following code in the **sampleService.ts** file:

        ```typescript
        import { SampleModel } from "../models/sampleModel";

        export const getSampleData = (): SampleModel => {
          return { content: "Hello world!" };
          };
        ```

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/service-retrieve.png" alt-text="Screenshot shows the creation of sampleService.ts file under the service folder in Visual Studio Code.":::

      > [!NOTE]
      > You can implement a service to retrieve data from the backend service or from Microsoft Graph API.
    
     ## Create a widget file

     1. In Visual Studio Code, go to **EXPLORER** > **src** > **widgets**.
     1. Create a **SampleWidget.tsx** file.
     1. Add the following code in the **SampleWidget.tsx** file:

        ```typescript
        import { Button, Text } from "@fluentui/react-components";
        import { BaseWidget } from "@microsoft/teamsfx-react";
        import { SampleModel } from "../models/sampleModel";
        import { getSampleData } from "../services/sampleService";
        
        interface SampleWidgetState {
          data?: SampleModel;
        }
        
        export class SampleWidget extends BaseWidget<any, SampleWidgetState> {
          override async getData(): Promise<SampleWidgetState> {
            return { data: getSampleData() };
          }
          
          override header(): JSX.Element | undefined {
            return <Text>Sample Widget</Text>;
          }
          
          override body(): JSX.Element | undefined {
            return <div>{this.state.data?.content}</div>;
          }
          override footer(): JSX.Element | undefined {
            return <Button>View Details</Button>;
          }
        }
        ```

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/create-sample-widget.png" alt-text="Screenshot shows the creation of sampleWidget.tsx under the widgets in Visual Studio Code.":::
      
     ## Add the widget to the dashboard

      To add a widget to the dashboard, follow these steps:

      1. In Visual Studio Code, go to **Explorer** > **src** > **dashboards** > **SampleDashboard.tsx**.
      1. Update the `dashboardLayout()` method to add the widget to the dashboard:

          ```typescript
          override layout(): JSX.Element | undefined {
            return (
              <>
                <ListWidget />
                <ChartWidget />
                <SampleWidget />
              </>
            );
          } 
          ```

          ---

          :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/create-sample-dashboard.png" alt-text="Screenshot shows the existing sampleDashboard file in Visual Studio Code."::: 

          Optional: If you want put your widget in a column, you can refer to the following code:

            ```css
            .one-column {
              display: grid;
              gap: 20 px;
              grid-template-rows: 1fr 1fr;
            }
            ```

            ```typescript
            override layout(): JSX.Element | undefined {
              return (
                <>
                  <ListWidget />
                  <div className="one-column">
                    <ChartWidget />
                    <SampleWidget />
                  </div>
               </>
              );
            }
            ```

              ---

            After adding all the relevant details for creating a widget, save the respective files.

            You can view the changed layout and the calendar widget on the dashboard.

            :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/widget-added-to-dashboard.png" alt-text="Screenshot shows the addition of widget to the dashboard with the sample widget highlighted in red. ":::

            You can change the look and style of the widget. For more information, see [customize the widget](tabs/how-to/build-a-dashboard-tab-app.md#customize-the-widget).

- title: Add a new Graph API call
  durationInMinutes: 5
  content: |

   Scenario 1
   
   1. Select the Teams Toolkit icon in the Visual Studio Code Activity Bar.
   
   1. Under **DEVELOPMENT**, select **View How-to Guides**.
   
     :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/add-features.png" alt-text="Screenshot shows the selection of added features option.":::

   1. Select **Develop Single Sign-On Experience in Teams**.

      :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/single-sign-on.png" alt-text="Screenshot shows the selection of single sign-on option.":::

    >[ !NOTE] 
    > Dashboard teams tab app  is a React project. The SSO creation and Graph API follow the React steps, adding the aad, cli, file source, and source code. The .html files *only* have to be created manually and debug the Teams app.
       
   Scenario 2
    To add Single Sign On (SSO) and Graph API, follow these steps:

     1. [Create Azure Active Directory app manifest](#create-azure-active-directory-app-manifest)
     2. [Update Teams app manifest](#update-teams-app-manifest)
     3. [Update Teams Toolkit configuration files](#update-teams-toolkit-configuration-files)
     4. [Update Source Code](#update-source-code)
       
     ## Create Azure Active Directory app manifest

     1. In Visual Studio Code, go to **EXPLORER**.
     2. Create a `aad.manifest.json` file.
     3. Add the following code in `aad.manifest json`.

     ```typescript
     {
     "id": "${{AAD_APP_OBJECT_ID}}",
     "appId": "${{AAD_APP_CLIENT_ID}}",
     "name": "YOUR_AAD_APP_NAME",
     "accessTokenAcceptedVersion": 2,
     "signInAudience": "AzureADMyOrg",
     "optionalClaims": {
      "idToken": [],
      "accessToken": [
          {
              "name": "idtyp",
              "source": null,
              "essential": false,
              "additionalProperties": []
          }
      ],
      "saml2Token": []
     },
     "requiredResourceAccess": [
      {
          "resourceAppId": "Microsoft Graph",
          "resourceAccess": [
              {
                  "id": "User.Read",
                  "type": "Scope"
              }
          ]
      }
     ],
     "oauth2Permissions": [
      {
          "adminConsentDescription": "Allows Teams to call the app's web APIs as the current user.",
          "adminConsentDisplayName": "Teams can access app's web APIs",
          "id": "${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}",
          "isEnabled": true,
          "type": "User",
          "userConsentDescription": "Enable Teams to call this app's web APIs with the same rights that you have",
          "userConsentDisplayName": "Teams can access app's web APIs and make requests on your behalf",
          "value": "access_as_user"
      }
      ],
      "preAuthorizedApplications": [
      {
          "appId": "1fec8e78-bce4-4aaf-ab1b-5451cc387264",
          "permissionIds": [
              "${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}"
          ]
      },
      {
          "appId": "5e3ce6c0-2b1f-4285-8d4b-75ee78787346",
          "permissionIds": [
              "${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}"
          ]
      },
      {
          "appId": "d3590ed6-52b3-4102-aeff-aad2292ab01c",
          "permissionIds": [
              "${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}"
          ]
      },
      {
          "appId": "00000002-0000-0ff1-ce00-000000000000",
          "permissionIds": [
              "${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}"
          ]
      },
      {
          "appId": "bc59ab01-8403-45c6-8796-ac3ef710b3e3",
          "permissionIds": [
              "${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}"
          ]
      },
      {
          "appId": "0ec893e0-5785-4de6-99da-4ed124e5296c",
          "permissionIds": [
              "${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}"
          ]
      },
      {
          "appId": "4765445b-32c6-49b0-83e6-1d93765276ca",
          "permissionIds": [
              "${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}"
          ]
      },
      {
          "appId": "4345a7b9-9a63-4910-a426-35363201d503",
          "permissionIds": [
              "${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}"
          ]
      }
     ],
     "identifierUris": [
     "api://${{TAB_DOMAIN}}/${{AAD_APP_CLIENT_ID}}"
     ],
     "replyUrlsWithType": [
     {
      "url": "${{TAB_ENDPOINT}}/auth-end.html",
      "type": "Web"
     },
     {
      "url": "${{TAB_ENDPOINT}}/auth-end.html?clientId=${{AAD_APP_CLIENT_ID}}",
      "type": "Spa"
     },
     {
      "url": "${{TAB_ENDPOINT}}/blank-auth-end.html",
      "type": "Spa"
     }
     ]
     }
     ```

       :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/aad-app-manifest.png" alt-text="Screenshot shows the azure active dirctory code addition. ":::

     ## Update Teams app manifest

     To update Teams app manifest, follow these steps:

     1. In Visual Studio Code, go to **EXPLORER** > **appPackage** > **manifest.json**.

     1. Add following codes into your Teams app manifest for your Tab project.

     ```typescript
     "webApplicationInfo": {
     "id": "${{AAD_APP_CLIENT_ID}}",
     "resource": "api://${{TAB_DOMAIN}}/${{AAD_APP_CLIENT_ID}}"
     }
     ```

       :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/teams-app-manifest.png" alt-text="Screenshot shows the addition of web application info in manifest. ":::

     ## Update Teams Toolkit configuration files

     To update Teams Toolkit configuration files, follow the steps:

     1. Add the **aadApp/create** codes under provision in `teamsapp.yml` and `teamsapp.local.yml`.
     
     ```typescript
     - uses: aadApp/create
       with:
          name: "YOUR_AAD_APP_NAME"
          generateClientSecret: true
          signInAudience: "AzureADMyOrg"
       writeToEnvironmentFile:
          clientId: AAD_APP_CLIENT_ID
          clientSecret: SECRET_AAD_APP_CLIENT_SECRET
          objectId: AAD_APP_OBJECT_ID
          tenantId: AAD_APP_TENANT_ID
          authority: AAD_APP_OAUTH_AUTHORITY
          authorityHost: AAD_APP_OAUTH_AUTHORITY_HOST
     ```
     1. Add the **aadApp/update** codes under provision in `teamsapp.yml` and `teamsapp.local.yml`.

     ```typescript

      - uses: aadApp/update
       with:
         manifestPath: "./aad.manifest.json"
         outputFilePath : ./build/aad.manifest.${{TEAMSFX_ENV}}.json

     ```

       :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/ttk-teams-app.png" alt-text="Screenshot shows the addition of aadApp/create and aadApp/update code.":::
      
       :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/ttk-teams-app-local.png" alt-text="Screenshot shows the addition of aadApp/create and aadApp/update code.":::

     1. Find **cli/runNpmCommand** action with name `build app` in `teamsapp.yml` and add following env. 

     ```typescript
     env:
     REACT_APP_CLIENT_ID: ${{AAD_APP_CLIENT_ID}}
     REACT_APP_START_LOGIN_PAGE_URL: ${{TAB_ENDPOINT}}/auth-start.html
     ```

       :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/cli-teams-app.png" alt-text="Screenshot shows the information to react code for cli.":::

     1. Find **file/createOrUpdateEnvironmentFile** action for deploy in `teamsapp.local.yml``.

     1. Add following env codes. 

     ```typescript
     REACT_APP_CLIENT_ID: ${{AAD_APP_CLIENT_ID}}
     REACT_APP_START_LOGIN_PAGE_URL: ${{TAB_ENDPOINT}}/auth-start.html
     ```
       :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/file-teams-app-local.png" alt-text="Screenshot shows the information to react codes.":::

     ## Update Source Code

     Suppose you're building your tab app with React framework. You can find and download sample code for TeamsFx Tab:
      
      •	for [js](https://github.com/OfficeDev/TeamsFx/tree/main/packages/fx-core/templates/plugins/resource/aad/auth/tab/js)
      •	for [ts](https://github.com/OfficeDev/TeamsFx/tree/main/packages/fx-core/templates/plugins/resource/aad/auth/tab/ts)
     
     You can follow the following steps to update your source code:

      1.	Create **auth-start.html** in to **public**.
      2.	Add the code in [auth-start.html](https://github.com/OfficeDev/TeamsFx/blob/main/packages/fx-core/templates/plugins/resource/aad/auth/tab/ts/public/auth-start.html).
      3.	Create **auth-end.html** in to **public**.
      4.	Add the code in [auth-end.html](https://github.com/OfficeDev/TeamsFx/blob/main/packages/fx-core/templates/plugins/resource/aad/auth/tab/ts/public/auth-end.html).

       :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/auth-end-start.png" alt-text="Screenshot shows the folder structure for auth-start and auth-end files.":::
     
      You can also find sample for SSO enabled Tab [here](https://github.com/OfficeDev/TeamsFx-Samples/tree/dev/hello-world-tab-with-backend).
     
     `**Common for both scenarios**`:

      You've added the SSO files to your project and now you can call Graph APIs. 
   
     The graph API call is implemented via TeamsFx SDK. Refer to the [document](https://learn.microsoft.com/en-us/microsoftteams/platform/toolkit/teamsfx-sdk#microsoft-graph-scenarios:~:text=caught%20and%20transformed.-,Microsoft%20Graph%20Scenarios,-This%20section%20provides) as follows:

      1. In Visual Studio Code, go to **EXPLORER** > **src** > **services** > **listService.ts**.

      1. Update the following codes in the **listService.ts**.         

       ```typescript
       /**
        * Retrive sample data
        * @returns data for list widget
        */
       import {TeamsUserCredentialContext} from "../internal/singletonContext";
       import {
         createMicrosoftGraphClientWithCredential,
         TeamsUserCredential,
         } from "@microsoft/teamsfx";
         import { ListModel } from "../models/listModel";
         import { loginAction } from "../internal/login";
                
       export const getListData = async (): Promise<ListModel[]> => {
         await loginAction(["User.Read"]);
         let credential = TeamsUserCredentialContext.getInstance().getCredential();
         const graphClient = createMicrosoftGraphClientWithCredential(credential, [
           "User.Read",
         ]);
         const me = await graphClient.api("/me").get();
         return [
           {
             id: me.id,
             title: me.displayName,
             content: me.mail,
           },
         ];

        // {
        //   id: "id1",
        //   title: "Lorem ipsum",
        //   content: "Lorem ipsum dolor sit amet",
        // },
        // {
        //   id: "id2",
        //   title: "Lorem ipsum",
        //   content: "Lorem ipsum dolor sit amet",
        // },
        // {
        //   id: "id3",
        //   title: "Lorem ipsum",
        //   content: "Lorem ipsum dolor sit amet",
        // },
       }
       ```
      1. In Visual Studio Code, go to **EXPLORER** > **src** > **services** > **ListWidget.tsx**.

      1. Update the `export default class ListWidget()` to add user pofile widget.

       ```typescript
       export default class ListWidget extends BaseWidget<any, IListWidgetState> {
         async getData(): Promise<IListWidgetState> {
           return { data: await getListData() };
       ```

      1. SSO and Graph API shows the login user profile in list widget. 

         :::image type="content" source="assets/images/sbs-create-a-new-dashboard/join.png" alt-text="Screenshot shows the Join button highlighted in red.":::

- title: Complete challenge
  durationInMinutes: 5
  content: |

      Did you come up with something like this?

        :::image type="content" source="assets/images/sbs-create-a-new-dashboard/dashboard1.png" alt-text="Screenshot shows the final output of dashboard.":::


- title: Congratulations!
  durationInMinutes: 5
  content: |

    You've completed the tutorial!
