### YamlMime:Tutorial
title: Build in-meeting document signing
metadata:
  title: Build in-meeting document signing app
  description: With this learning module, learn how to build in-meeting document signing app in Teams.
  audience: Developer
  level: Beginner
  ms.date: 27/07/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: apps-in-teams-meetings/build-apps-for-teams-meeting-stage.md
  nextTutorialTitle: Read more to build apps for Teams meeting stage
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    Meeting signing is a Microsoft Teams sample app that enables users to sign documents in real time scenarios. It provides enhanced experience by allowing the users to review and sign documents in a single session during meetings.
    This sample lets users electronically sign documents with their current tenant identity. The users can sign the following documents during meetings:
    * Purchase agreements.
    * Purchase orders.
    
    The template is also applicable for other scenarios, such as for reviewing and approving code samples and collaborative documents.
    The users can customize to incorporate other types of signatures: 
    * Handwritten signatures.
    * Certificate-based signatures.

    This step-by-step guide helps you to build in-meeting document signing app. You'll see the following output after you've completed this guide:

      :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/final-output.png" alt-text="Final Output":::

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure that you install the following tools to set up your development environment:

     | &nbsp; | Install | For using... |
     | --- | --- | --- |
     | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, and call-all in one place.|
     | &nbsp; | [Visual Studio 2022](https://visualstudio.microsoft.com)<br> | You can install the enterprise version in Visual Studio 2022, and install the ASP.NET and web development workloads. Use the latest version. |
     | &nbsp; | [.NET Core SDK](https://dotnet.microsoft.com/en-us/download) | Customized bindings for local debugging and Azure Functions app deployments. Use the latest version or install the portable version. |
     | &nbsp; | [ngrok](https://ngrok.com/download) | Teams app features (conversational bots, message extensions, and incoming webhooks) require inbound connections. A tunnel connects your development system to Teams. It isn't required for apps that only include tabs. This package is installed within the project directory (using npm `devDependencies`). |
     | &nbsp; | [Microsoft 365 developer account](/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | Access to Teams account with the appropriate permissions to install an app. |

      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).
      > [!TIP]
      > Ensure the Microsoft Teams account isn't a guest account.

    ## Set up your Teams development tenant

       A **tenant** is like a space, or a container for your organization in Teams, where you chat, share files, and run meetings. This space is also where you upload and test your custom app. Let's verify if you're ready to develop with the tenant.

    ### Check for custom app upload option

       After creating the app, you must load your app in Teams without distributing it. This process is known as custom app upload. Sign in to your Microsoft 365 account to view this option.

       > [!NOTE]
       > Custom app upload is necessary for previewing and testing apps in Teams local environment. Enable custom app upload to preview and test your app in Teams locally.

       Do you already have a tenant, and do you have admin access? Let's check if you really do!

    To verify upload apps in Teams:

    1. In the Teams client, select the **Apps** icon.
    1. Select **Manage your apps**.
    1. Select **Upload an app**.
    1. Look for the option to **Upload a custom app**. If you see the option, custom app upload is enabled.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/upload-custom-app.png" alt-text="Illustration shows the option to upload a custom app in Teams.":::

        > [!NOTE]
        > Contact your Teams administrator, if you don't find the option to upload a custom app.  

    ## Download the code sample

      You must use the [In-Meeting Document Signing](https://github.com/OfficeDev/Microsoft-Teams-Samples/tree/main/samples/meetings-share-to-stage-signing/csharp) code sample for this step-by-step guide. To use the code sample, clone the repository from GitHub.

- title: Create and register your app
  durationInMinutes: 5
  content: |
    The following steps help you to create and register your app in Azure portal.

    * Create an app registration in Azure AD.
    * Use ngrok to create a tunnel.
    
    ## Create an app registration in Azure AD

    Register a new app in Azure AD and configure the tenancy and app's platform. You'll generate a new app ID that will be updated later in your Teams app manifest file.

    ### To register a new app in Azure AD

    1. Go to the [Azure portal](https://ms.portal.azure.com/).
    
    2. Select **App registrations**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/azure-portal.png" alt-text="Screenshot shows the Azure AD Portal page.":::

    3. Select **+ New registration**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/app-registrations.png" alt-text="Screenshot shows the New registration page on Azure AD Portal.":::

    4. Enter the name of your app, which is displayed to the user. The app name can be changed in later, if required.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/register-app.png" alt-text="Screenshot shows the App registration page on Azure AD Portal.":::

    5. Select **Multitenant** as the type of user account that can access your app.

    6. Select **Register**.
        A message pops up on the browser stating that the app was created.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/app-created-msg.png" alt-text="Register app on Azure AD Portal.":::

        The page with app ID and other configurations is displayed.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/app-created.png" alt-text="App registration is successful.":::

    7. Note and save the app ID from **Application (client) ID**. You'll need it for updating the Teams app manifest later.

    Your app is registered in Azure AD. You should now have the app ID for your app.

    ## To create a ngrok tunnel

    Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

     ```bash
     ngrok http https://localhost:44326 -host-header=localhost:44326
     ```

      The ngrok tunnel information appears.

      :::image type="content" source="../msteams-platform/assets/images/sbs-inmeeting-doc-signing/ngrok1.png" alt-text="ngrok HTTPS URL":::

- title: Update the Azure AD app registration
  durationInMinutes: 1
  content: |

    1. Go to the [Azure portal](https://portal.azure.com/).

    1. Select **Azure Active Directory**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-azure-directory.png" alt-text="Select Azure active directory":::

    1. In the left pane, select **App Registrations**.

    1. Select your app.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/app-registration.png" alt-text="App registration":::

    1. Under **Manage**, select **Expose an API**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/exposeanapi.png" alt-text="Expose an API":::

    1. Select **Add**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-set.png" alt-text="Screenshot that shows the Application ID URI to Add.":::

    1. Use the `api://your ngrok/botid-{AppID}` format for the **Application ID URI**.

    1. Update the **Application ID URI** and select **Save**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/app-uri1.png" alt-text="Screenshot that shows the App ID URI with Save option highlighted in red.":::
        
       The following image shows the Application ID URI:
        
        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/appIDuri1.png" alt-text="Screenshot shows the Expose an API showing application ID URI.":::

        > [!NOTE]
        > If you're using a tunneling service such as ngrok, ensure you update the value whenever your ngrok subdomain changes.
        > `For example: api://f631****.ngrok.io/92c11075-c629-4a1e-ab58-02b4fd4204c2`, where `f631****.ngrok.io` is the new ngrok subdomain name.

    1. Select **Add a scope**. 

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/addascope.png" alt-text="Screenshot that shows the Add a scope highlighted in red.":::
    
    1. Enter **access_as_user** as the **Scope name**.

    1. Set **Who can consent?** to **Admins and users**.

    1. Configure the admin and user consent prompts with appropriate values for **access_as_user** scope:</br>

        * Enter **Teams can access the user’s profile** as **Admin consent display name**.

        * Enter **Allows Teams to call the app’s web APIs as the current user** as **Admin consent description**.

        * Enter **Teams can access the user profile and make requests on the user’s behalf** as **User consent display name**.

        * Enter **Enable Teams to call this app’s APIs with the same rights as the user** as **User consent description**.

    1. Ensure that **State** is set to **Enabled**.

    1. Select **Add scope** to save.

       The following image shows the fields and the values:

       :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/add-a-scope-page1.png" alt-text="Add a scope page":::

        > [!NOTE]
        > The **Scope name** must match with the **Application ID URI** with `/access_as_user` appended at the end.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/scopes1.png" alt-text="Scopes":::
    
    1. In the **Authorized client applications** section, identify the applications that you want to authorize for your app’s web application. 

    1. Select **Add a client application**. 

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/add-client-application.png" alt-text="Select client application":::

    1. Enter **Client ID**: `1fec8e78-bce4-4aaf-ab1b-5451cc387264` for Teams mobile or desktop application. 

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/meeting-token-generator-addclientapp1.png" alt-text="Add client application 1":::

       You can enter **Client ID**: `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` for Teams web application.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/meeting-token-generator-addclientapp2.png" alt-text="Add client application 2":::

    1. Select **Authorized scopes**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/authorizedscope1.png" alt-text="Add authorozation":::

        The following image displays the client ID:

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/clientapps.png" alt-text="Client applications"::: 
  
    1. In the left pane, select **API permissions**. 

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-api-permissions.png" alt-text="Select API permissions"::: 
        
       > [!NOTE]
       > Users need to consent to these permissions only if the Azure AD app is registered in a different tenant.

    1. Select **Add a permission**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/addpermission.png" alt-text="Add permission"::: 

    1. Select **Microsoft Graph**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/microsoft-graph.png" alt-text="Microsoft Graph"::: 

    1. Select **Delegated permissions**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/delegated-permission.png" alt-text="Delegated-permission"::: 

    1. Add the following permissions:
         * **email**
         * **offline_access**
         * **openid**
         * **profile**
         * **User.Read**
         * **User.ReadBasic.All**

    1. Select **Add permissions**.  

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/permissions.png" alt-text="Delegated-permission":::

    1. From the left pane, select **Authentication** to set a redirect URI. 

       > [!NOTE]
       > If an app isn't granted IT admin consent, users must provide consent the first time they use an app.
               
         1. Select **Add a platform** > **Web**.

             :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-authentication.png" alt-text="Select Authentication":::

         1. Enter the redirect URI for your app by appending `auth-end` to fully qualified domain name:</br> 
            `https://your ngrok/auth-end`. </br>

         1. Enable **Implicit grant and hybrid flows** by selecting the following checkboxes:
             * **ID tokens**
             * **Access tokens**

         1. Select **Configure**.
            
             :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/authend.png" alt-text="Auth-end":::

- title: Set up app settings and manifest files
  durationInMinutes: 1
  content: |
    After you've configured the Azure AD app, you need to configure app details in the app settings and manifest file. 

    **To configure app settings**

    1. Go to the **appsettings.json** file in the cloned repository.

          :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/appsettingslocation.png" alt-text="App settings location":::

    1. Open the **appsettings.json** file and update the following information: 

         * Replace all occurrences of `<<aad-id>>` with your app's Microsoft App ID.
         * Replace all occurrences of `<<client secret>>` with your app's client secret.

          :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/appsettings2.png" alt-text="App settings":::

    **To configure app manifest file**

    1. Go to the **manifest.json** file in the cloned repository.

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/manifestlocation.png" alt-text="Manifest file location":::
    
    1. Open the **manifest.json** file and update the following information.

         * Replace all occurrences of `<<deployment-url>` with your fully qualified ngrok domain name.
         * Replace all occurrences of `<<aad-id>>` with your app's **Microsoft App ID**.

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/manifest-update-file.png" alt-text="Screenshot shows the Manifest file." lightbox="~/assets\images\sbs-inmeeting-doc-signing\manifest.png":::


- title: Build and run the service
  durationInMinutes: 1
  content: |
    To build and run the service using Visual Studio.

       1. Open **Visual Studio**.

       1. Go to **File** > **Open** > **Project/Solution...**.
    
           :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/project-solution.png" alt-text="Open file":::

       1. Open the **MeetingSigning.sln** file in Visual Studio.

           :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/Tokenfileready.png" alt-text="Solution File":::   

       1. Press **F5** to run the project.
    
       1. Select **Yes** if the following dialog appears:

            :::image type="content" source="~/assets/images/meetings-side-panel/certificate.png" alt-text="Trust Certificate":::

          The following webpage opens.

           :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/app-ready.png" alt-text="App ready"::: 

- title: Add Meeting Signing app to Teams
  durationInMinutes: 1
  content: |

    1. In your cloned repository, go to **Source > MeetingSigning.Web > Manifest**.

    1. Create a .zip file with the following files that are present in the **Manifest** folder:

       * manifest.json
       * outlineIcon.png
       * colorIcon.png

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/zipfile.png" alt-text="Zip file"::: 
    
    1. Create a meeting in Teams with a few presenters and attendees.

    1. Join the meeting.
   
    1. After the meeting has started, Select **+ Apps**.
    
    1. In the pop-up window, select **Manage apps**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/add-app-teams.png" alt-text="Add an app to Teams"::: 
    
    1. Select **Upload an app** > **Upload a custom app**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/upload-an-app.png" alt-text="Upload an app to Teams"::: 
    
    1. Select the .zip file you've created in the **Manifest** folder and select **Open**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-open.png" alt-text="Select Open"::: 

    1. Select **Add**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-add.png" alt-text="Add the app":::

       Now the meeting signing app is added to the meeting.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/add-app-to-meeting.png" alt-text="Add app to meeting":::
    
    1. Go back to the meeting details page, and select **Apps** > **Meeting Signing** app.
        
        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/add-meeting-signing-app.png" alt-text="Add meeting signing app to meeting":::

    1. Select **Save**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/install-meeting-signing.png" alt-text="Install meeting signing app"::: 

       The Meeting Signing app is visible in the meeting window.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/meeting-app.png" alt-text="Meeting signing app":::         

    1. Go to the meeting chat in Teams, and select **Meeting Signing** tab, and then select **Create Documents**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/create-documentation.png" alt-text="Create Documentation"::: 

    1. Enter the following details in the Meeting Signing window.

        1. Select the required documents that you want to review. 
        1. Enter viewers of the documents.
        1. Enter signers of the documents.
        1. Select **Done**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/create-documents.png" alt-text="Create Documents":::  

    1. Select **Consent** to give permission to the app to access data from your account.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/give-consent.png" alt-text="Give Consent"::: 

    1. Sign in into Teams with your credentials and select **Sign in**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/teams-login-after-consent.png" alt-text="Teams Login after Consent"::: 

       In Teams, you'll get a notification for successfully creating the document.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/doc-success-upload.png" alt-text="Doc Success Upload":::              

     1. Go back to Teams meeting, and now you can view the documents in the side panel. 
     
     1. Select **Share to meeting** to share the document in meeting.

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/view-doc-in-sidepanel.png" alt-text="View doc in sidepanel":::

     1. Select **Click to sign!**.

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/doc-shared-in-meeting.png" alt-text="Document shared in meeting":::
        
     1. Select **Done**.   

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/meeting-signing-confirm.png" alt-text="Meeting Signing confirmation":::

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

       :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/final-output.png" alt-text="final output for Meeting Signing app"::: 

- content: |
    Congratulations! You've completed the tutorial to create the **In-meeting Signing** app!
