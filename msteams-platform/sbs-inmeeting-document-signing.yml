### YamlMime:Tutorial
title: Build in-meeting document signing
metadata:
  title: Build in-meeting document signing app
  description: With this learning module, learn how to build in-meeting document signing app in Teams.
  audience: Developer
  level: Beginner
  ms.date: 27/07/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: apps-in-teams-meetings/enable-and-configure-your-app-for-teams-meetings.md
  nextTutorialTitle: Read more to enable and configure apps for meetings
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    Meeting Signing is a Teams sample app that demonstrates the scenario of enabling users to sign documents in real time during meetings making possible to review and sign documents in a single session. 
    This sample lets users electronically sign documents with their current tenant identity. Some example documents that can be signed during meetings are Purchase Agreements and Purchase Orders. This template is also applicable, and could be adapted for other scenarios like reviewing and approving code reviews or collaborative reviewing of documents.

    The sample app could be customized to incorporate other kind of signatures like handwritten signatures or certificate based signatures.

   
    
    This step-by-step guide helps you to build in-meeting document signing app. You'll see the following output:


- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure you install the following tools and set up your development environment:  

    * [Microsoft Teams](https://teams.microsoft.com/) with valid account
    * [Latest version of.NET Core SDK](https://dotnet.microsoft.com/download) 
    * [Latest version of Visual Studio](https://visualstudio.microsoft.com/downloads/)
    * [Latest version of ngrok](https://ngrok.com/download) only for devbox testing or any equivalent tunneling solution
    
      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).

- title: Create and register your bot
  durationInMinutes: 5
  content: |
    The following steps help you to create and register your bot in Azure portal.

    * Create Azure Bot resource to register bot with Azure Bot Service.
    * Create client secret to enable SSO authentication of the bot.
    * Add Teams channel to deploy the bot.
    * Use ngrok to create a tunnel to your web server's endpoints.
    * Add messaging endpoint to the ngrok tunnel you created.

    **To create Azure Bot resource**

    1. Go to the [Azure portal](https://portal.azure.com/). The system prompts you to sign in with your Microsoft account credentials
    1. Select **Create a resource**.

       :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-createbot.png" alt-text="Select Create Bot":::

    1. In the search box, enter **Azure Bot**.

       :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/enter-azure-bot.png" alt-text="Enter Azure Bot":::

    1. Select **Enter**.
    1. Select **Azure Bot**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-azure-bot.png" alt-text="Select Azure Bot":::

    1. Select **Create**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-create.png" alt-text="Select Azure Bot":::

       Create an Azure bot page appears.

       :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/create-an-azure-bot-page.png" alt-text="Create an Azure bot page":::

    1. Enter the following details to create Azure bot.

       :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-subscription.png" alt-text="Select subscription":::

       1. Enter required bot handle name in **Bot handle** and it's a unique identifier for your bot.
       1. Select your **Subscription** from the dropdown list.
       1. Select your **Resource group** from the dropdown list that you want to provision for your bot app.
    
       You can also create a new resource group by the following steps:

              1. To create new resource group, select **Create new** > enter resource name > select **OK**.

                   :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/newresourcecreation.png" alt-text="New resource creation":::

              1. If you've created a new resource group, select the required location from **New resource group location** dropdown list.
        
                   :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/newresource.png" alt-text="New resource":::
    
      1. Select **Type of App** as **Multi Tenant**.

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select review-create.png" alt-text="Select review and create":::

      1. In the **Microsoft App ID** section, by default **Create new Microsoft App ID** is selected. 
    
         You can either select **Use existing app registration** and enter **Existing app ID** and **Existing app password**, or select **Create new Microsoft App ID**.

         > [!NOTE]
         > You can't create more than one bot with the same **Microsoft App ID**.

      1. Select **Review + create**.

    1. After the validation passed, select **Create**. 

       :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/validation-passed.png" alt-text="Validation Pass":::

       It takes a few moments for your bot service to be provisioned and the following page appears:

       :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/bot-service-provision.png" alt-text="Bot Service Provision":::

    1. Select **Go to resource**. 

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/go-to-resource.png" alt-text="Go to resource":::

        Your Azure bot is created and you can see the **Resource group** and **Subscription ID** in the Azure bot.

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/azure-bot-created.png" alt-text="Azure bot resource created":::

    **To create client secret**

      Perform the following steps to create client secret:

    1. In the left panel, select **Configuration**.

       :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-configuration.png" alt-text="Select configuration":::

       > [!TIP]
       > Save the **Microsoft App ID** or **Client ID** for future reference.

    1. Next to **Microsoft App ID**, select **Manage**.

       :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-manage.png" alt-text="Select manage":::

    1. In the **Client secrets** section, select **New client secret**. 

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-client-secret.png" alt-text="New client secret":::
    
       The **Add a client secret** window appears.  

    1. Enter **Description**.
    
    1. Select **Add**.

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/add-client-secret.png" alt-text="Add client secret":::

    1. In the **Value** column, select **Copy to clipboard**.

         ::::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/copy-client-secret.png" alt-text="Copy client secret":::
       
       > [!TIP]
       > Save the **Client secrets** value or app password for future reference.

    **To add the Teams channel**

    1. Select **Home**.

        ::::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-home.png" alt-text="Select Home":::

    1. Select your bot from **Recent resources**.

        ::::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-your-bot-resources.png" alt-text="Select your bot resource":::

    1. Select **Channels** in the left pane and select **Microsoft Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>.

        ::::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-teams.png" alt-text="Select Teams":::

    1. Select the checkbox to accept the **Terms of Service**.
    
    1. Select **Agree**.

        ::::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/checkbox.png" alt-text="Select Checkbox":::

    1. Select **Apply**.  

        ::::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-apply.png" alt-text="Select Apply":::
    
    **To create tunnel for local web server**

    Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

     ```bash
     ngrok http https://localhost:44326 -host-header=localhost:44326
     ```

    **To add messaging endpoint**

    1. From ngrok, copy the HTTPS URL.

       :::image type="content" source="../msteams-platform/assets/images/sbs-inmeeting-doc-signing/ngrok.png" alt-text="ngrok HTTPS URL":::

        > [!NOTE]
        > The HTTPS URL in your ngrok is your fully qualified domain name.
        > The `WebAppDomain` is a fully qualified domain name that doesn't include `https://` in it.

    1. Go back to the Azure portal.
    1. In **Settings** for the Azure bot that you created, select **Configuration**.

         :::image type="content" source="../msteams-platform/assets/images/sbs-inmeeting-doc-signing/configuration.png" alt-text="Configuration":::

    1. In **Messaging endpoint**, use the HTTPS URL available from ngrok and at the end of the URL add **/api/messages**.

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/add-message-endpoint.png" alt-text="Messaging Endpoint":::

    1. Select **Apply**.

        You have successfully set up a bot in Azure Bot Service.


- title: Update the Azure AD app registration
  durationInMinutes: 1
  content: |

    1. Go to the [Azure portal](https://portal.azure.com/).

    1. Select **Azure Active Directory**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-azure-directory.png" alt-text="Select Azure active directory":::

    1. In the left navigation panel, select **App Registrations**.

    1. Select your bot.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/app-registration.png" alt-text="App registration":::

    1. Under **Manage**, select **Expose an API**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/exposeanapi.png" alt-text="Expose an API":::

    1. Select **Set**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-set.png" alt-text="Select Set":::

    1. Set the **Application ID URI** in the form of `api://your ngrok/botid-{AppID}` and select **Save**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/app-uri.png" alt-text="App URI":::
        
       The following image shows the domain name:
        
        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/appIDuri.png" alt-text="App ID URI":::

        > [!NOTE]
        > If you're using a tunneling service such as ngrok, ensure you update the value whenever your ngrok subdomain changes.
        > `For example: api://f631****.ngrok.io/92c11075-c629-4a1e-ab58-02b4fd4204c2`, where `f631****.ngrok.io` is the new ngrok subdomain name.

    1. Select **Add a scope**. 

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/addascope.png" alt-text="Select scope":::
    
    Add a scope panel appears.

    1. Enter the following details to add a scope.

       :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/add-a-scope-page.png" alt-text="Add a scope page":::

       1. In the panel that appears, enter `access_as_user` as the **Scope name**.

          > [!NOTE]
          > The **Scope name** should match with the **Application ID** URI with `/access_as_user` appended at the end.
  
       1. Set **Who can consent?** to `Admins and users`.
  
       1. To configure the admin and user consent prompts with appropriate values for `access_as_user` scope, provide the following information in the fields:</br>
    
          * Enter `Teams can access the user’s profile` as **Admin consent display name**.

          * Enter `Allows Teams to call the app’s web APIs as the current user` as **Admin consent description**.

          * Enter `Teams can access the user profile and make requests on the user’s behalf` as **User consent display name**.

          * Enter `Enable Teams to call this app’s APIs with the same rights as the user` as **User consent description**.
  
       1. Ensure that **State** is set to **Enabled**.
  
       1. Select **Add scope** to save.

          Your Application ID URI is created with **Scope name**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/scopes.png" alt-text="Scopes":::
  
    1. In the **Authorized client applications** section, identify the applications that you want to authorize for your app’s web application. 
    
    1. Select **Add a client application**. 

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/add-client-application.png" alt-text="Select client application":::

       Add a client application panel appears.

    1. Enter the Client ID for desktop and web application separately that you want to authorize. It's the application ID of client application that you want to authorize.

       |**Client ID**|**For authorizing**|
       |--------|-------------|
       | `1fec8e78-bce4-4aaf-ab1b-5451cc387264` | Teams desktop or mobile application |
       | `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` | Teams web application |
    
    1. Select **Authorized scopes** to determine which type of token is returned by the service.

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/authorizedscope.png" alt-text="Add client application 2":::

       The following image displays the client Id:

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/clientapps.png" alt-text="Client applications"::: 
  
    **Configure Graph permissions**

    1. In the left panel, select **API Permissions**. 

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-api-permissions.png" alt-text="Select API permissions"::: 
        
       > [!NOTE]
       > Users need to consent to these permissions only if the Azure AD app is registered in a different tenant.

    1. Select **Add a permission**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/addpermission.png" alt-text="Add permission"::: 

    1. Select **Microsoft Graph**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/microsoft-graph.png" alt-text="Microsoft Graph"::: 

    1. Select **Delegated permissions**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/delegated-permission.png" alt-text="Delegated-permission"::: 

    1. Add the following permissions:</br>
         * **email**
         * **offline_access**
         * **OpenId**
         * **profile**
         * **User.Read**
         * **User.ReadBasic.All

    1. Select **Add permissions**.

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/permissions.png" alt-text="Delegated-permission"::: 

    **To set redirect URI**

    1. From the left panel, select **Authentication** to set a redirect URI. 

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-authentication.png" alt-text="Select Authentication"::: 

       > [!NOTE]
       > If an app isn't granted IT admin consent, users must provide consent the first time they use an app.
               
         1. Select **Add a platform**.
         1. Select **Web**.

             :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-authentication.png" alt-text="Select Authentication":::

         1. Enter the redirect URI for your app by appending `auth-end` to fully qualified domain name:</br> 
           `https://your ngrok/auth-end`. </br>

         1. Enable **Implicit grant and hybrid flows** by selecting the following checkboxes:
             * **ID tokens**
             * **Access tokens**
   
         1. Select **Configure**.

             :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/authend.png" alt-text="Auth-end":::

- title: Set up app settings and manifest files
  durationInMinutes: 1
  content: |
    1. Navigate to **appsettings.json** in cloned repository.

          :::image type="content" source="~/assets/images/meetings-side-panel/appsettingslocation.png" alt-text="App settings location":::

    1. Open **appsettings.json** in Visual Studio and update the following information:  

         * Set `"MicrosoftAppId"` to your bot's **Microsoft App ID**.
         * Set `"MicrosoftAppPassword"` to your bot's client secret ID value.
         * Set `"BaseUrl"` to the fully qualified ngrok domain name.

          :::image type="content" source="~/assets/images/meetings-side-panel/appsettings.png" alt-text="App settings":::
          

    1. Navigate to **manifest.json** in cloned repository.

         :::image type="content" source="~/assets/images/meetings-side-panel/manifestlocation.png" alt-text="Manifest file location":::
    
    1. Open **manifest.json** in Visual Studio and make the following changes:

         * Replace all occurrences of `<<Your_Domain_URL>>` with your fully qualified ngrok domain name.
         * Replace all occurrences of `<<Microsoft-App-ID>>` with your bot's **Microsoft App ID**.

         :::image type="content" source="~/assets/images/meetings-side-panel/manifest-2.png" alt-text="Manifest image2":::

- title: Build and run the service
  durationInMinutes: 1
  content: |
    **To build and run the service using Visual Studio or Command line**

    # [Visual Studio](#tab/vs)

       1. Open **Visual Studio**.
       1. Navigate to **File** > **Open** > **Project/Solution**.
    
           :::image type="content" source="~/assets/images/meetings-side-panel/VSopenfile.png" alt-text="Open file":::

       1. Select **SidePanel.sln** file from **csharp** folder.

           :::image type="content" source="~/assets/images/meetings-side-panel/Tokenfileready.png" alt-text="Solution File":::

       1. Press **F5** to run the project.
    
       1. Select **Yes** if the following dialog appears:

            :::image type="content" source="~/assets/images/meetings-side-panel/certificate.png" alt-text="Trust Certificate":::

          A webpage opens with a message **Your bot is ready!**.

           :::image type="content" source="~/assets/images/meetings-side-panel/appisready.png" alt-text="App ready"::: 

        
    # [Command line](#tab/cli)

    Navigate to **samples > meetings-sidepanel > csharp > Side Panel** in a Command Prompt window and enter the following command:

    ```bash
    dotnet run
    ```
    :::image type="content" source="~/assets/images/meetings-side-panel/dotnetruncmd.png" alt-text="Dotnet"::: 
      
- title: Add Meetings Side Panel to Teams
  durationInMinutes: 1
  content: |

    1. In your cloned repository, navigate to **csharp > Side Panel > Manifest**.

    1. Create a .zip with the following files that are present in the **Manifest** folder: 
       * manifest.json
       * icon-outline.png
       * icon-color.png

         :::image type="content" source="~/assets/images/meetings-side-panel/zipfile.png" alt-text="Zip file"::: 
    
    1. Create a meeting with a few presenters and attendees.
   
    1. After the meeting is created, go to the meeting details page and select **Add an app**.

         :::image type="content" source="~/assets/images/meetings-side-panel/addanapp.png" alt-text="Add an app":::
   
    1. In the pop-up window, select **Manage apps**.

        :::image type="content" source="~/assets/images/meetings-side-panel/manageapps.png" alt-text="Manage apps"::: 
   
    1. Select **Upload a custom app**. 

        :::image type="content" source="~/assets/images/meetings-side-panel/uploadcustomapp.png" alt-text="Upload custom app"::: 

    1. Select **Open** to upload the .zip file that you created in the **Manifest** folder.

        :::image type="content" source="~/assets/images/meetings-side-panel/selectzip.png" alt-text="Select zip file"::: 

    1. Select **Add**.

        :::image type="content" source="~/assets/images/meetings-side-panel/addtheapp.png" alt-text="Add the app"::: 

       The **Manage apps** section displays the list of applications.
   
        :::image type="content" source="~/assets/images/meetings-side-panel/manageappsection.png" alt-text="App in Manage apps"::: 
   
    1. Go to Teams meeting.
    
    1. Select **Add an app**. 
    
       In the app selection page, the app is displayed as **Side Panel**.
  
        :::image type="content" source="~/assets/images/meetings-side-panel/appicon-1.png" alt-text="App icon in Teams"::: 

    1. Select the **Side Panel** app.
    
    1. Select **Save**.

        :::image type="content" source="~/assets/images/meetings-side-panel/welcomeapp.png" alt-text="Welcome App"::: 
   
       The app is visible in the meeting Side Panel.         

- title: Interact with the app in Teams
  durationInMinutes: 1
  content: |
    Let's interact with the app in Teams!

    1. Select **Add New Agenda Item** to add a new agenda to the default agenda list.

        :::image type="content" source="~/assets/images/meetings-side-panel/sidepanelinmeet.png" alt-text="Token in Meet"::: 

    1. Enter a new agenda item to the list and select **Add**.

         :::image type="content" source="~/assets/images/meetings-side-panel/newagenda.png" alt-text="Token in Meet"::: 

       The new agenda is added in the list.

    1. Select **Publish Agenda**.

         :::image type="content" source="~/assets/images/meetings-side-panel/youragenda.png" alt-text="Your Token"::: 

       The new agenda list is displayed in the meeting chat.

         :::image type="content" source="~/assets/images/meetings-side-panel/agendainchat.png" alt-text="Your Token"::: 

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

       :::image type="content" source="~/assets/images/meetings-side-panel/sidepanelondesktopmobile.png" alt-text="Token in Meet"::: 


- content: |
    You've completed the tutorial to get started with a **Side Panel** app!


