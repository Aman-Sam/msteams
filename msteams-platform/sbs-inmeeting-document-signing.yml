### YamlMime:Tutorial
title: Build in-meeting document signing
metadata:
  title: Build in-meeting document signing app
  description: With this learning module, learn how to build in-meeting document signing app in Teams.
  audience: Developer
  level: Beginner
  ms.date: 27/07/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: apps-in-teams-meetings/enable-and-configure-your-app-for-teams-meetings.md
  nextTutorialTitle: Read more to enable and configure apps for meetings
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    Meeting signing is a Microsoft Teams sample app that enables users to sign documents in real time scenarios. It provides enhanced experience by allowing the users to review and sign documents in a single session during meetings.
    This sample lets users electronically sign documents with their current tenant identity. The users can sign the following documents during meetings:
    * Purchase agreements.
    * Purchase orders.
    
    The template is also applicable for other scenarios, such as for reviewing and approving code samples and collaborative documents.
    The users can customize to incorporate other types of signatures: 
    * Handwritten signatures.
    * Certificate-based signatures.

    This step-by-step guide helps you to build in-meeting document signing app. You'll see the following output after you've completed this guide:

      :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/final-output.png" alt-text="Final Output":::

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure you install the following tools for the development environment:  

    * [Latest version of ngrok](https://ngrok.com/download) or any equivalent tunneling solution.

      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).

    * [Latest version of Visual Studio](https://visualstudio.microsoft.com/downloads/).
    * [Latest version of.NET Core SDK](https://dotnet.microsoft.com/download).

    Ensure you have created the following accounts to set up your development environment: 

    * [Microsoft Teams](https://teams.microsoft.com/) account.

      > [!TIP]
      > Ensure the Microsoft Teams account isn't a guest account.

    * [Microsoft 365 developer account](https://developer.microsoft.com/en-us/microsoft-365/dev-program). If you don't have that, you need have access to a Teams account with the appropriate permissions to install an app.

    ## Set up your Teams development tenant

       A **tenant** is like a space or a container where you chat, share files, and run meetings for your organization in Teams. You can also sideload and test the app.

    ### Check for sideloading option

       After creating the app, you must load your app in Teams without distributing it. It's known as sideloading. Sign in to your Microsoft 365 account to view this option.

       > [!NOTE]
       > Sideloading is necessary for previewing and testing apps in Teams local environment. Enable Sideloading to preview and test your app in Teams locally.

       Do you already have a tenant, and do you have the admin access? Let's check if you really do!

    To verify sideload apps in Teams:

    1. In the Teams client, select **Store**.
    1. Select **Manage your apps**.
    1. Select **Publish an app**.
    1. Look for the option to **Upload a custom app**. If you see the option, sideloading apps is enabled.

        :::image type="content" source="~/assets/images/bots/upload-custom-app1.png" alt-text="Illustration shows the option to upload a custom app in Teams.":::

        > [!NOTE]
        > Contact Teams administrator, if you don't find the option to upload a custom app.  

    ## Download the code sample

      You must use the [In-Meeting Document Signing](https://github.com/OfficeDev/Microsoft-Teams-Samples/tree/main/samples/meetings-share-to-stage-signing/csharp) code sample for this step-by-step guide. To use the code sample, clone the repository from GitHub.

- title: Create and register your app
  durationInMinutes: 5
  content: |
    The following steps help you to create and register your app in Azure portal.

    * Use ngrok to create a tunnel to your web server's endpoints.
    
    ## Create an app registration in Azure AD

    Register a new app in Azure AD, and configure the tenancy and app's platform. You'll generate a new app ID that will be updated later in your Teams app manifest file.

    ### To register a new app in Azure AD

    1. Open the [Azure portal](https://ms.portal.azure.com/) on your web browser.
    The Microsoft Azure AD Portal page opens.

    2. Select the **App registrations** icon.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/azure-portal.png" alt-text="Azure AD Portal page.":::

    The **App registrations** page appears.

    3. Select **+ New registration** icon.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/app-registrations.png" alt-text="New registration page on Azure AD Portal.":::

        The **Register an application** page appears.

    4. Enter the name of your app that you want to be displayed to the app user. You can change this name at a later stage, if you want to.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/register-app.png" alt-text="App registration page on Azure AD Portal.":::

    5. Select the type of user account that can access your app. You can choose from single- or multi-tenant options, or Private Microsoft account.

        <details>
        <summary><b>Options for supported account types</b></summary>

        | Option | Select this to... |
        | --- | --- |
        | Accounts in this organizational directory only  (Microsoft only - Single tenant) | Build an application for use only by users (or guests) in your tenant. <br> Often called LOB application, this app is a single-tenant application in the Microsoft identity platform. |
        | Accounts in any organizational directory (Any Azure AD directory - Multi-tenant) | Let users in any Azure AD tenant use your application. This option is appropriate if, for example, you're building a SaaS application, and you intend to make it available to multiple organizations. <br> This type of app is known as a multi-tenant application in the Microsoft identity platform.|
        | Accounts in any organizational directory (Any Azure AD directory - Multi-tenant) and personal Microsoft accounts | Target the widest set of customers. <br> By selecting this option, you're registering a multi-tenant application that can support app users who have personal Microsoft accounts also. |
        | Personal Microsoft accounts only | Build an application only for users who have personal Microsoft accounts. |

        </details>

        > [!NOTE]
        > You don't need  to enter **Redirect URI** for enabling SSO for a tab app.

    6. Select **Register**.
        A message pops up on the browser stating that the app was created.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/app-created-msg.png" alt-text="Register app on Azure AD Portal.":::

        The page with app ID and other configurations is displayed.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/app-created.png" alt-text="App registration is successful.":::

    7. Note and save the app ID from **Application (client) ID**. You'll need it for updating the Teams app manifest later.

    Your app is registered in Azure AD. You should now have app ID for your tab app.

    ## To create a tunnel for local web server

    Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

     ```bash
     ngrok http https://localhost:44326 -host-header=localhost:44326
     ```

      The ngrok tunnel information appears.

      :::image type="content" source="../msteams-platform/assets/images/sbs-inmeeting-doc-signing/ngrok1.png" alt-text="ngrok HTTPS URL":::

- title: Update the Azure AD app registration
  durationInMinutes: 1
  content: |

    1. Go to the [Azure portal](https://portal.azure.com/).

    1. Select **Azure Active Directory**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-azure-directory.png" alt-text="Select Azure active directory":::

    1. In the left navigation panel, select **App Registrations**.

    1. Select your app.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/app-registration.png" alt-text="App registration":::

    1. Under **Manage**, select **Expose an API**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/exposeanapi.png" alt-text="Expose an API":::

    1. Select **Set**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-set.png" alt-text="Select Set":::

    1. Set the **Application ID URI** in the form of `api://your ngrok/botid-{AppID}` and select **Save**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/app-uri1.png" alt-text="App URI":::
        
       The following image shows the Application ID URI:
        
        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/appIDuri1.png" alt-text="App ID URI":::

        > [!NOTE]
        > If you're using a tunneling service such as ngrok, ensure you update the value whenever your ngrok subdomain changes.
        > `For example: api://f631****.ngrok.io/92c11075-c629-4a1e-ab58-02b4fd4204c2`, where `f631****.ngrok.io` is the new ngrok subdomain name.

    1. Select **Add a scope**. 

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/addascope.png" alt-text="Select scope":::
    
        The **Add a scope** section appears.

    1. Enter the following details to add a scope.

       :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/add-a-scope-page1.png" alt-text="Add a scope page":::

       1. Enter 'access_as_user' as the **Scope name**.

          > [!NOTE]
          > The **Scope name** must match with the **Application ID URI** with `/access_as_user` appended at the end.
  
       1. Set **Who can consent?** to **Admins and users**.
  
       1. Configure the admin and user consent prompts with appropriate values for `access_as_user` scope:</br>
    
          * Enter 'Teams can access the user’s profile' as **Admin consent display name**.

          * Enter 'Allows Teams to call the app’s web APIs as the current user' as **Admin consent description**.

          * Enter 'Teams can access the user profile and make requests on the user’s behalf' as **User consent display name**.

          * Enter 'Enable Teams to call this app’s APIs with the same rights as the user' as **User consent description**.
  
       1. Ensure that **State** is set to **Enabled**.
  
       1. Select **Add scope** to save the scope details.

          Your app scope is configured.

            :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/scopes1.png" alt-text="Scopes":::
    
    1. Select **Add a client application** in the **Authorized client applications** section. 

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/add-client-application.png" alt-text="Select client application":::

       The **Add a client application** section appears.

    1. Enter the client application details:

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/authorizedscope1.png" alt-text="Add client application 2":::

        1. Enter the **Client ID** for for the application that you want to authorize. It's the application ID of the client that you want to authorize. Use the following IDs for client applications that you want to authorize:

           | **Client ID** | **For authorizing** |
           | --- | --- |
           | `1fec8e78-bce4-4aaf-ab1b-5451cc387264` | Teams desktop or mobile application |
           | `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` | Teams web application |
         
           > [!NOTE]
           > You'll need to add authorization for desktop and web application separately.

        1. Select **Authorized scopes** to determine which type of token is returned by the service.

      The following image displays the client ID:

      :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/clientapps.png" alt-text="Client applications"::: 
  
    **Configure Graph permissions**

    1. In the left panel, select **API Permissions**. 

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-api-permissions.png" alt-text="Select API permissions"::: 
        
       > [!NOTE]
       > Users need to consent to these permissions only if the Azure AD app is registered in a different tenant.

    1. Select **Add a permission**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/addpermission.png" alt-text="Add permission"::: 

    1. Select **Microsoft Graph**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/microsoft-graph.png" alt-text="Microsoft Graph"::: 

    1. Select **Delegated permissions**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/delegated-permission.png" alt-text="Delegated-permission"::: 

    1. Select the Graph permissions:

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/permissions.png" alt-text="Delegated-permission":::

        1. From the list of permissions, select the following:</br>
         * **email**
         * **offline_access**
         * **OpenId**
         * **profile**
         * **User.Read**
         * **User.ReadBasic.All**

        1. Select **Add permissions**.  

    **To set redirect URI for configuring platform**

    1. From the left panel, select **Authentication** to set a redirect URI. 

       > [!NOTE]
       > If an app isn't granted IT admin consent, users must provide consent the first time they use an app.
               
    1. Select **Add a platform**.
          
        The **Configure platform** section appears.

    1. Select **Web**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-authentication.png" alt-text="Select Authentication":::

    1. Configure the platform details:

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/authend.png" alt-text="Auth-end":::

        1. Enter the redirect URI for your app by appending `auth-end` to fully qualified domain name:</br> 
       `https://your ngrok/auth-end`. </br>

         1. Enable **Implicit grant and hybrid flows** by selecting the following checkboxes:
             * **ID tokens**
             * **Access tokens**
   
         1. Select **Configure**.

    You have completed Azure AD app registration and configuration.

- title: Set up app settings and manifest files
  durationInMinutes: 1
  content: |
    After you've configured the Azure AD app, you need to configure app details in the app settings and manifest file. 

    **To configure app settings**

    1. Browse to the **MeetingSigning.Web** folder in the cloned repository, and open **appsettings.json** in Visual Studio.

          :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/appsettingslocation.png" alt-text="App settings location":::

    1. Update the following information in appsettings.json:  

         * Replace all occurrences of `<<aad-id>>` with your app's Microsoft App ID.
         * Replace all occurrences of `<<client secret>>` with your app's client secret.

          :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/appsettings2.png" alt-text="App settings":::

    1. Save the file.

    **To configure app manifest file**

    1. Browse to the **Manifest** folder in the cloned repository, and open **manifest.json** in Visual Studio.

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/manifestlocation.png" alt-text="Manifest file location":::
    
    1. Make the following changes in manifest.json:

         * Replace all occurrences of `<<deployment-url>` with your fully qualified ngrok domain name.
         * Replace all occurrences of `<<aad-id>>` with your app's **Microsoft App ID**.

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/manifest-file1.png" alt-text="Manifest image2":::

    1. Save the file.

    You have configured app settings and app manifest details.

- title: Build and run the service
  durationInMinutes: 1
  content: |
    **To build and run the service using Visual Studio**

       1. Open **Visual Studio**.

       1. Go to **File** > **Open** > **Project/Solution**.
    
           :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/project-solution.png" alt-text="Open file":::

       1. Select the solution file from **Source** folder.

           :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/Tokenfileready.png" alt-text="Solution File":::   

          The solution opens in Visual Studio.

       1. Press **F5** to run the project.
    
       1. Select **Yes** if the following dialog appears:

            :::image type="content" source="~/assets/images/meetings-side-panel/certificate.png" alt-text="Trust Certificate":::

          The following webpage opens.

           :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/appisready1.png" alt-text="App ready"::: 
      
      Now, you're ready to sideload the app into Teams client.

- title: Add Meeting Signing app to Teams
  durationInMinutes: 1
  content: |

    1. In your cloned repository, browse to **Source > MeetingSigning.Web > Manifest**.

    1. Create an app package (a .zip file) with the following files that are present in the **Manifest** folder:

       * manifest.json
       * icon-outline.png
       * icon-color.png

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/zipfile.png" alt-text="Zip file"::: 
    
    1. Create a meeting in Teams with a few presenters and attendees.
   
    1. After the meeting is started, Select **Apps** > **Manage apps**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/add-app-teams.png" alt-text="Add an app to Teams"::: 
    
    1. Select **Upload a custom app**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/upload-an-app.png" alt-text="Upload an app to Teams"::: 
    
    1. Select the meeting signing app package that you created, and then select **Open**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-open.png" alt-text="Select Open"::: 

    1. Select **Add** to install the app in the meeting.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-add.png" alt-text="Add the app":::

       Now the meeting signing app is added to the meeting.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/add-app-to-meeting.png" alt-text="Add app to meeting":::
    
    1. Go back to the meeting details page, and select **Apps** > **Meeting Signing** app.
        
        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/add-meeting-signing-app.png" alt-text="Add meeting signing app to meeting":::

       The **Meeting Signing** window appears.

    1. Select **Save**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/install-meeting-signing.png" alt-text="Install meeting signing app"::: 

       Now Meeting Signing app is visible in the meeting window. 

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/meeting-app.png" alt-text="Meeting signing app":::         

    1. Go the meeting chat in Teams, and select **Meeting Signing** tab, and then select **Create Documents**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/create-documentation.png" alt-text="Create Documentation"::: 

       The **Meeting Signing** window appears.  

    1. Enter the following details in the Meeting Signing window.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/create-documents.png" alt-text="Create Documents":::  

        1. Select the required documents that you want to review. 
        1. Enter viewers of the documents.
        1. Enter signers of the documents.
        1. Select **Done**.

    1. Select **Consent** to give permission to the app to access data from your account.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/give-consent.png" alt-text="Give Consent"::: 

       The browser window appears.

    1. Sign in into Teams with your credentials and select **Sign in**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/teams-login-after-consent.png" alt-text="Teams Login after Consent"::: 

       In Teams, you'll get notification for successfully creating the document.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/doc-success-upload.png" alt-text="Doc Success Upload":::              

     1. Go back to Teams meeting, and now you can view the documents in the side panel. 
     
     1. Select **Share to meeting** to share the document in meeting.

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/view-doc-in-sidepanel.png" alt-text="View doc in sidepanel":::

     1. Select **Click to Sign**.

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/doc-shared-in-meeting.png" alt-text="Document shared in meeting":::

        The **Meeting Signing** window appears
        
     1. Select **Done**.   

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/meeting-signing-confirm.png" alt-text="Meeting Signing confirmation":::

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

       :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/final-output.png" alt-text="final output for Meeting Signing app"::: 

- content: |
    Congratulation! You've completed the tutorial to create the **In-meeting Signing** app!