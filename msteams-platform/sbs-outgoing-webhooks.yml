### YamlMime:Tutorial
title: Outgoing webhooks
metadata:
  title: Outgoing webhooks
  description: In this tutorial, you'll learn to set up Outgoing webhooks for Teams.
  audience: Developer
  level: Beginner
  ms.date: 14/01/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: apps-in-teams-meetings/enable-and-configure-your-app-for-teams-meetings.md
  nextTutorialTitle: Read more to enable and configure apps for meetings
  ms.custom: mvc
  ms.localizationpriority: none
items:
- durationInMinutes: 1
  content: |
    Webhooks are a great way for Teams to integrate with external apps. A webhook is essentially a POST request sent to a callback URL. In Teams, outgoing webhooks provide a simple way to allow users to send messages to your web service without having to go through the full process of creating bots via the Microsoft Bot Framework. Outgoing webhooks post data from Teams to any chosen service capable of accepting a JSON payload. Once an outgoing webhook is added to a team, it acts like bot, listening in channels for messages using @mention, sending notifications to external web services, and responding with rich messages that can include cards and images. 

    You'll see the following output:

     ![ready](~/assets/images/sbs-outgoing-webhooks/Output.png)

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure you install the following tools and set up your development environment:  

    * [.NET Core SDK](https://dotnet.microsoft.com/download) version 3.1
    * [Visual Studio 2019](https://visualstudio.microsoft.com/downloads/)
    * Asp.net Core
    * [ngrok](https://ngrok.com/download) latest version (only for devbox testing) or any equivalent tunneling solution
    
      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).
    
    * [Microsoft Teams](https://teams.microsoft.com/) with valid account
    * [SignalR](https://docs.microsoft.com/en-us/aspnet/signalr/overview/getting-started/tutorial-getting-started-with-signalr-and-mvc) to update agenda in real-time

    > [!NOTE]
    > Use version 1.7.0 or later of [Teams SDK](/javascript/api/overview/msteams-client?view=msteams-client-js-latest&preserve-view=true), as versions prior to it do not support meeting sidepanel.

- title: Set up local environment
  durationInMinutes: 1
  content: |
   Clone `Microsoft-Teams-Samples` repository to your local GitHub:  

    1. Open [Microsoft Teams Samples](https://github.com/OfficeDev/Microsoft-Teams-Samples).
    1. Select **Code**.
    1. From the dropdown menu, select **Open with GitHub Desktop**.
 
       ![Clone](~/assets/images/sbs-outgoing-webhooks/clone repository.png)

    1. Select **Clone**. 

- title: Create an outgoing webhook
  durationInMinutes: 5
  content: |
    To create an outgoing webhook, perform the following steps:

    * Select the appropriate team and then select Manage team from the (•••) drop-down menu.

      ![Manage](~/assets/images/sbs-outgoing-webhooks/Manage team.png)
    * Choose the Apps tab from the navigation bar.
    * From the window's lower-right corner, select Create an outgoing webhook.
    * In the resulting pop-up window, complete the required fields:

      ![Create outgoing webhook](~/assets/images/sbs-outgoing-webhooks/Select.png)
    
        * Name - The webhook title and @mention tap.
        * Callback URL - The HTTPS endpoint that accepts JSON payloads and will receive POST requests from Teams.
            1. To use api/sample and authenticated sample, do the following:
            * Enter ngrok URL/api/sample.
            * For authenticated sample, enter ngrok URL/authenticatedSample?id=contoso.
        * Description - A detailed string that will appear in the profile card and the team-level App dashboard.
        * Profile Picture (optional) an app icon for your webhook.
        * Select the Create button from lower-right corner of the pop-up window and the outgoing webhook will be added to the current team's channels.
        * The next dialog window will display an Hash-based Message Authentication Code security token that will be used to authenticate calls between Teams and the designated outside service. This token in used in AuthProvider.cs.

          ![security](~/assets/images/sbs-outgoing-webhooks/Security token.png)
        * If the URL is valid and the server and client authentication tokens are equal (i.e., an HMAC handshake), the outgoing webhook will be available to the team's users.

   
           
       
- title: Build and run the service
  durationInMinutes: 1
  content: |
    **To build and run the service using Visual Studio 2019 or Command line**

    # [Visual Studio 2019](#tab/vs2019)

       1. Launch **Visual Studio 2019**.
       1. Navigate to **File** > **Open** > **Project/Solution**.
    
          ![Open file](~/assets/images//sbs-outgoing-webhooks/outgoing-webhooks-VSopenfile.png)

       1. Select **WebhookSampleBot.sln** file from **csharp** folder.

          ![Solution File](~/assets/images//sbs-outgoing-webhooks/openproject.png)

       1. Update the HMAC in AuthProvider.cs file.

          ![update](~/assets/images//sbs-outgoing-webhooks/UpdateHMAC.png)
      
    
       1. Press **F5** to run the project.


       1. Select **Yes** if the following dialog appears:

          ![Trust Certificate](~/assets/images//sbs-outgoing-webhooks/Outgoingwebhook-certificate.png)

          A webpage opens with a message **Your bot is ready!**.

          ![App ready](~/assets/images//sbs outgoing webhooks/appisready.png) 

       1. Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

     ```bash
     ngrok http -host-header=rewrite 3978
     ```

      1. Run your tab, either from Visual Studio with F5 or using dotnet run in the appropriate folder.

            

- title: Interact with the app in Teams
  durationInMinutes: 1
  content: |
    Let's interact with the app in Teams!

    1. Select **General** to start a new conversation.

    1. Select **New conversation** to begin a conversation.

    1. Enter @ and the app you created for an outgoing webhook.

       ![message](~/assets/images/sbs-outgoing-webhooks/Type mention.png)

       The new message received is displayed in the meeting chat.

       ![ready](~/assets/images/sbs-outgoing-webhooks/Output.png)

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

       ![ready](~/assets/images/sbs-outgoing-webhooks/Output.png)


- content: |
    You've completed the tutorial to get started with a **Outgoing Webhook** app!.


