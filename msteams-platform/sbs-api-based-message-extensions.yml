### YamlMime:Tutorial
title:  Build your first app using Teams AI library
metadata:
  title: Build your first app using Teams AI library
  description: In this learn module, you'll learn how to build a bot with Teams AI library and set up, build, and deploy a bot app with Teams Toolkit.
  audience: Developer
  level: Advanced
  ms.date: 10/16/2023
  ms.topic: interactive-tutorial
  nextTutorialHref: messaging-extensions/how-to/action-commands/define-action-command.md
  nextTutorialTitle: Build message extension using Bot Framework SDK
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |

    Message extensions using API significantly enhance the functionality of your Teams apps by allowing them to interact with external services. This can help streamline workflows by reducing the need to switch between different applications.

    You can use API message extension to integrate external services that are commonly used in the business workflow. For example, a business that frequently uses a CRM system for customer management could use a Messaging Extension to fetch and display customer data directly from Teams. This can help save time and improve efficiency by reducing the need to switch between different applications. This feature is supported on all platforms where Teams is available, including desktop, web, and mobile. 

- title: Prerequisites
  durationInMinutes: 1
  content: |

   Here's a list of tools you need for building and deploying your apps.

   | Install | For using... |
   | --- | --- |
   |[Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, or call - all in one place.|
   |[Microsoft Edge](https://www.microsoft.com/edge) (recommended) or [Google Chrome](https://www.google.com/chrome/) | A browser with developer tools. |
   |[Visual Studio Code](https://code.visualstudio.com/download) | JavaScript, TypeScript, or SharePoint Framework (SPFx) build environments. Use version 1.55 or later. |
   |[Microsoft 365 developer account](concepts/build-and-test/prepare-your-o365-tenant.md)| Access to Teams account with the appropriate permissions to install an app. |

   ## Prepare development environment

   After you've installed the required tools, set up the development environment. 


   ### Install the Teams Toolkit

   The Teams Toolkit helps simplify the development process with tools to provision and deploy cloud resources for your app, publish to the Teams Store, and more. 
    
   You can use the toolkit with Visual Studio Code, or CLI (command-line interface), called `TeamsFx`.


   # [Visual Studio Code](#tab/vscode)

   1. Open Visual Studio Code and select the **Extensions** view (**Ctrl+Shift+X** / **⌘⇧-X** or **View > Extensions**).
   1. In the search box, enter **Teams Toolkit**.
   1. Select **Install** next to the Teams Toolkit.

      :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/install-toolkit-vscodeversion.png" alt-text="Illustration shows the Teams Toolkit extension installation." lightbox="~/assets\images\teams-toolkit-v2\prerequisites\install-toolkit-vscodeversion-1.png":::

    The Teams Toolkit icon appears in the Visual Studio Code **Activity Bar** after it's installed.

    :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/hw-teams-toolkit-sidebar-icon.png" alt-text="Illustration shows the Teams Toolkit icon in Visual Studio Code sidebar.":::

   You can also find the Teams Toolkit on the [Visual Studio Code Marketplace](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension).

   > [!NOTE]
   > The latest version of Teams Toolkit is v5.

   # [Command line](#tab/cli)

   To install the TeamsFx CLI, use the `npm` package manager:

   ``` bash
   npm install -g @microsoft/teamsfx-cli
   ```

   Depending on your configuration, you might need to use `sudo` to install the CLI:

   ``` bash
   sudo npm install -g --unsafe-perm @microsoft/teamsfx-cli
   ```

   This condition is more common on Linux and macOS systems.

   Ensure you add the npm global cache to your path. This step is normally done as part of the Node.js installer.

   You can use the CLI with the `teamsfx` command. Verify that the command is working by running `teamsfx -h`.

   > [!CAUTION]
   > Before you can run TeamsFx in PowerShell terminals, you must enable the 'remote signed' execution policy for PowerShell.

   ---

   ## Set up your Teams development tenant

   A **tenant** is like a space, or a container for your organization in Teams, where you chat, share files, and run meetings. This space is also where your sideload and test your app. Let's verify if you're ready to develop with the tenant.

   ### Check for sideloading option

   After creating the app, you must load your app in Teams without distributing it. This process is known as sideloading. Sign in to your Microsoft 365 account to view this option.

    > [!NOTE]
    > Sideloading is necessary for previewing and testing apps in Teams local environment. If it isn't enabled, you won't be able to preview and test your app in Teams local environment.

   Do you already have a tenant, and do you have the admin access? Let's check if you really do!

   Verify if you can sideload apps in Teams:

    1. In the Teams client, select the **Apps** icon.
    1. Select **Manage your apps**.
    1. Select **Upload an app**.
    1. Look for the option to **Upload a custom app**. If you see the option, sideloading apps is enabled.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/spfx-custom-new1.png" alt-text="Screenshot shows the bot home.":::

        > [!NOTE]
        > Contact your Teams administrator, if you don't find the option to upload a custom app.

   ### Create a free Teams developer tenant (optional)

   If you don't have a Teams developer account, you can get it free. Join the Microsoft 365 developer program!

   1. Go to the [Microsoft 365 developer program](https://developer.microsoft.com/microsoft-365/dev-program).
   1. Select **Join Now** and follow the onscreen instructions.
   1. In the welcome screen, select **Set up E5 subscription**.
   1. Set up your administrator account. After you finish, the following screen appears.

       :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png" alt-text="Screenshot shows the Microsoft 365 Developer Program.":::

   1. Sign in to Teams using the administrator account you just set up. Verify that you have the **Upload a custom app** option in Teams.

   ## Get a free Azure account

   If you want to host your app or access resources in Azure, you must have an Azure subscription. [Create a free account](https://azure.microsoft.com/free/) before you begin.

   Now you’ve got all the tools to set up your account. Next, let's set up your development environment and start building! Select the app you want to build first.


- title: Build an API based message extension
  durationInMinutes: 1
  content: |

    ## OpenAPI specification
  
    You need an OpenAPI specification for the external service you want to interact with. The API spec must meet the following criteria: 
    
    * Must not have `auth` specified.
    * Must have at most one required parameter or property in the request body. You can make a required parameter optional and add a default value.
    * The request body (if present) can't contain any arrays.
    * The server URL must be defined in the specification.
    * If there's no operation ID, you can add one to the spec that you'll be uploading for testing because an operation ID is mandatory for operations that will be Messaging Extensions. You can validate that the swagger is valid by using an online validator like [Swagger Parser](https://apitools.dev/swagger-parser/online/). Once you have found a suitable API spec, save it in a folder. 

    We've used the following OpenAPI spec as an example for this tutorial:

    <details><summary>OpenAPI spec</summary>

    ```YAML
        openapi: 3.0.1
info:
  version: v0
  title: Open AI Klarna product Api
servers:
  - url: https://www.klarna.com/us/shopping
tags:
  - name: open-ai-product-endpoint
    description: Open AI Product Endpoint. Query for products.
paths:
  /public/openai/v0/products:
    get:
      tags:
        - open-ai-product-endpoint
      summary: API for fetching Klarna product information
      operationId: productsUsingGET
      parameters:
        - name: countryCode
          in: query
          description: ISO 3166 country code with 2 characters based on the user location. Currently, only US, GB, DE, SE and DK are supported.
          required: true
          schema:
            type: string
        - name: q
          in: query
          description: 'A precise query that matches one very small category or product that needs to be searched for to find the products the user is looking for. If the user explicitly stated what they want, use that as a query. The query is as specific as possible to the product name or category mentioned by the user in its singular form, and don''t contain any clarifiers like latest, newest, cheapest, budget, premium, expensive or similar. The query is always taken from the latest topic, if there is a new topic a new query is started. If the user speaks another language than English, translate their request into English (example: translate fia med knuff to ludo board game)!'
          required: true
          schema:
            type: string
        - name: size
          in: query
          description: number of products returned
          required: false
          schema:
            type: integer
        - name: min_price
          in: query
          description: (Optional) Minimum price in local currency for the product searched for. Either explicitly stated by the user or implicitly inferred from a combination of the user's request and the kind of product searched for.
          required: false
          schema:
            type: integer
        - name: max_price
          in: query
          description: (Optional) Maximum price in local currency for the product searched for. Either explicitly stated by the user or implicitly inferred from a combination of the user's request and the kind of product searched for.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Products found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '503':
          description: one or more services are unavailable
      deprecated: false
components:
  schemas:
    Product:
      type: object
      properties:
        attributes:
          type: array
          items:
            type: string
        name:
          type: string
        price:
          type: string
        url:
          type: string
      title: Product
    ProductResponse:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
      title: ProductResponse


    ```
    </details>

    You can validate and verify if the OpenAPI specification document is valid by following these steps:

    1. Go to [Swagger/OpenAPI validator](https://apitools.dev/swagger-parser/online/) and validate the OpenAPI specification document.
    1. Save the OpenAPI specification document.
    1. Go to [Swagger Editor](https://editor.swagger.io/).
    1. In the left pane, paste the OpenAPI specification code in the editor.
    1. In the right pane, select **GET**.
    1. Select **Try it out**.
    1. Enter the following values for the parameters as follows:
       1. countryCode: US
       2.  q: shoes
       3. size: 5
       4. min_price: 10
       5. max_price: 100

       :::image type="content" source="assets/images/Copilot/api-me-sbs-execute-get-response.png" alt-text="Screenshots shows the parameters, its values and the **EXECUTE** option in the swagger editor.":::

    1. Select **Execute**.
    1. Go to **Server response** > **Response Body**.
    1. Under `products`, copy the first product from the list and save it for future reference.

       :::image type="content" source="assets/images/Copilot/api-me-sbs-product-response.png" alt-text="Screenshots shows the highlighted product that is selected from the response body.":::
    
    ### Response rendering template 
    
    An OpenAPI specification document requires a response rendering template for the app to respond to the get requests. The response rendering template consists of an Adaptive Card template, Preview card template, and metadata.
    
    To create a response rendering template, follow these steps:
    
    1. Go to ChatGPT and ask the following query in the message compose area:

       ```text
       Create an Adaptive Card template that binds to the following sample data:
        {
            "name": "Nike Dunk Low W - White/Black",
            "url": "https://www.klarna.com/us/shopping/pl/cl337/3200134705/Shoes/Nike-Dunk-Low-W-White-Black/?utm_source=openai&ref-site=openai_plugin",
            "price": "$53.00",
            "attributes": [
                "Outsole:Rubber",
                "Fastening:Laced",
                "Target Group:Woman",
                "Color:Black",
                "Upper Material:Leather",
                "Size (US):9.5,10,11,12,13,14,15,16,17,18,11.5,10.5,2,3,4,5,6,7,8,9,2.5,3.5,4.5,16.5,5.5,15.5,6.5,14.5,13.5,7.5,8.5,12.5",
                "Series:Nike Dunk"
            ]
            }
       ````
     1. Select **Send message**. 

     1. ChatGPT generates a response with an Adaptive Card template that binds to the sample data. Save the Adaptive Card template for future reference.

        Following is an example of the Adaptive Card template:

        <details><summary>Adaptive Card template</summary>

        ```json
        {
        "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
        "type": "AdaptiveCard",
        "version": "1.4",
        "body": [
            {
            "type": "TextBlock",
            "text": "Product Details",
            "weight": "Bolder",
            "size": "Large"
            },
            {
            "type": "TextBlock",
            "text": "${name}",
            "weight": "Bolder",
            "size": "Medium"
            },
            {
            "type": "TextBlock",
            "text": "${price}",
            "size": "Medium",
            "spacing": "None"
            },
            {
            "type": "TextBlock",
            "text": "Attributes:",
            "weight": "Bolder",
            "spacing": "Medium"
            },
            {
            "type": "FactSet",
            "facts": [
                {
                "title": "Outsole",
                "value": "${attributes[0]}"
                },
                {
                "title": "Fastening",
                "value": "${attributes[1]}"
                },
                {
                "title": "Target Group",
                "value": "${attributes[2]}"
                },
                {
                "title": "Color",
                "value": "${attributes[3]}"
                },
                {
                "title": "Upper Material",
                "value": "${attributes[4]}"
                },
                {
                "title": "Size (US)",
                "value": "${attributes[5]}"
                },
                {
                "title": "Series",
                "value": "${attributes[6]}"
                }
            ],
            "spacing": "Small"
            },
            {
            "type": "ActionSet",
            "actions": [
                {
                "type": "OpenUrl",
                "title": "View Product",
                "url": "${url}"
                }
            ]
            }
        ]
        }

        ``` 
        </details>

    1. You can verify if the Adaptive Card generated binds to the sample data by following these steps:
       1. Go to [Adaptive Card Designer](https://adaptivecards.io/designer/).
       1. In the left pane, under **CARD PAYLOAD EDITOR**, paste the Adaptive Card template code.
       1. In the right pane, under **SAMPLE DATA EDITOR**, paste the product response you've saved earlier.
       1. Select **Update**.
       1. Verify if the Adaptive Card template binds to the sample data.

          :::image type="content" source="assets/images/Copilot/api-me-sbs-adaptive-card-designer.png" alt-text="Screenshots shows the Adaptive Card designer with the Adaptive Card template and the sample data."::: 
       
       1. Select **Preview mode**. The Adaptive Card designer displays an Adaptive Card with the data that binds to the sample data.
          
          :::image type="content" source="assets/images/Copilot/api-me-sbs-adaptive-card-preview.png" alt-text="Screenshots shows the Adaptive Card designer with the Adaptive Card template and the sample data.":::   
    
    1. Create a json file and add the adaptive card template code under `responseCardTemplate`. 
    1. Create a simplified preview card template and put it under the key `previewCardTemplate`. 
    1. Add `"version": "1.0.0"` to the response rendering template.
    1. Add the `responseLayout` and update the value as `list`.
    1. Determine `jsonPath` to the relevant data/array in the product response. In this case, the `jsonPath` is "products". For more information on how to determiner the JSON path, see [Querying JSON with JSON path](https://www.newtonsoft.com/json/help/html/QueryJsonSelectToken.htm).
    1. Save the response rendering template in the same folder you saved the OpenAPI spec. 

    The following code is an example of a Response rendering template:

    <details><summary>Response rendering template</summary>
    
    ```json
    {
        "version": "1.0",
        "responseLayout": "grid",
        "responseCardTemplate": {
        "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
        "type": "AdaptiveCard",
        "version": "1.4",
        "body": [
            {
            "type": "TextBlock",
            "text": "Product Details",
            "weight": "Bolder",
            "size": "Large"
            },
            {
            "type": "TextBlock",
            "text": "${name}",
            "weight": "Bolder",
            "size": "Medium"
            },
            {
            "type": "TextBlock",
            "text": "${price}",
            "size": "Medium",
            "spacing": "None"
            },
            {
            "type": "TextBlock",
            "text": "Attributes:",
            "weight": "Bolder",
            "spacing": "Medium"
            },
            {
            "type": "FactSet",
            "facts": [
                {
                "title": "Outsole",
                "value": "${attributes[0]}"
                },
                {
                "title": "Fastening",
                "value": "${attributes[1]}"
                },
                {
                "title": "Target Group",
                "value": "${attributes[2]}"
                },
                {
                "title": "Color",
                "value": "${attributes[3]}"
                },
                {
                "title": "Upper Material",
                "value": "${attributes[4]}"
                },
                {
                "title": "Size (US)",
                "value": "${attributes[5]}"
                },
                {
                "title": "Series",
                "value": "${attributes[6]}"
                }
            ],
            "spacing": "Small"
            },
            {
            "type": "ActionSet",
            "actions": [
                {
                "type": "OpenUrl",
                "title": "View Product",
                "url": "${url}"
                }
            ]
            }
        ]
        },
        "previewCardTemplate": {
            "title": "Title: ${if(title, title, 'N/A')}",
            "subtitle": "Description: ${if(description, description, 'N/A')}",
            "image": {
            "url": "${image}",
            "$when": "${image != null}"
              }
            }
        }

    ```
    </details>
    
    ### Create a Teams App Manifest
    
    Now, you need to create a Teams app manifest. This manifest will define the properties of your Teams app. To create the manifest, follow these steps: 

    1. Create a new JSON file. This file will follow the basic structure for creating a Teams app manifest for API Messaging Extensions.

    1. Add the following code in the JSON file:

       <details><summary>App manifest</summary>

       ```json
       {
        "$schema": "https://raw.githubusercontent.com/OfficeDev/microsoft-teams-app-schema/preview/DevPreview/MicrosoftTeams.schema.json",
        "manifestVersion": "devPreview",
        "version": "1.0.3",
        "id": "55490e7f-06e2-4675-9b8f-9eea9281b0fa",
        "packageName": "com.microsoft.teams.extension",
        "developer": {
            "name": "Teams App, Inc.",
            "websiteUrl": "https://www.example.com",
            "privacyUrl": "https://www.example.com/termofuse",
            "termsOfUseUrl": "https://www.example.com/privacy"
        },
        "icons": {
            "color": "color.png",
            "outline": "outline.png"
        },
        "name": {
            "short": "sampletest2809-dev",
            "full": "Full name for sampletest2809"
        },
        "description": {
            "short": "Open AI Klarna product Api",
            "full": "Full description for sampletest2809"
        },
        "accentColor": "#FFFFFF",
        "composeExtensions": [
            {
                "composeExtensionType": "apiBased",
                "apiSpecificationFile": "apiSpecFiles/yash-openapi.yml",
                "commands": [
                    {
                        "context": [
                            "compose"
                        ],
                        "type": "query",
                        "title": "API for fetching Klarna.",
                        "id": "productsUsingGET",
                        "parameters": [
                            {
                                "name": "countryCode",
                                "title": "Country Code",
                                "description": "ISO 3166 country code with two characters based on the user location. Currently, only US, GB, DE, SE and DK are supported."
                            }
                        ],
                        "description": "",
                        "apiResponseRenderingTemplateFile": "responseCards/yashresults.json"
                    }
                ]
            }
        ],
        "permissions": [
            "identity",
            "messageTeamMembers"
        ],
        "validDomains": []
       }
       ```

       </details>
    
    Ensure that the app manifest file meets the following requirements:

    * Under the `composeExtension` node, include `composeExtensionType`: `apiBased`. 
    * Add a new `apiSpecificationFile`property and put the value as the name of your OpenAPI specification file. 
    * The Input extension `commands.id` must match the `operationId` in the OpenAPI specification document. 
    * The input extension `parameters.name` must match the `parameters.name` property in the OpenAPI specification file. If there are no required parameters, then the name must match one of the operational parameters. 
    * Under valid domains, add the service URL endpoint that is defined in the OpenAPI specification file. 
    * Save the Teams app manifest in the same folder you saved the OpenAPI spec and the response rendering template.
    * You'll also need a color image and outline image. These images should be included in the folder and referenced in your Teams app manifest. 
    * Zip up the contents of the folder. 

    
- title: Sideload the app to Teams
  durationInMinutes: 1
  content: |

    Sign into Teams test environment to test your app in Teams. To sideload the app in Teams, follow these steps: 

    1. Go to **Microsoft Teams** and sign in using your test tenant credentials. 
    1. Select **ctrl+alt+shift+8** and go settings and search for **enableSME**. Ensure that the **enableSME** toggle is turned on. 
    1. Go to Apps > Manage your app > Upload an app.
    1. Select **Upload a customized app**.
    1. Select the zip file you've created and select **Open**.
    1. Select **Add**. The app is added to Teams.
    1. Go to a chat and from the message compose area, select **+** and search for your app.
    1. Select the app and make a search query.
    1. The app responds with an Adaptive Card template in the chat window.

- title: Congratulations!
  durationInMinutes: 1
  content: |

    You've done it! 
    You've learned to create an app using OpenAPI specification document and completed the tutorial.

