### YamlMime:Tutorial
title:  Build your first app using Teams AI library
metadata:
  title: Build your first app using Teams AI library
  description: In this learn module, you'll learn how to build a bot with Teams AI library and set up, build, and deploy a bot app with Teams Toolkit.
  audience: Developer
  level: Advanced
  ms.date: 10/16/2023
  ms.topic: interactive-tutorial
  nextTutorialHref: messaging-extensions/how-to/action-commands/define-action-command.md
  nextTutorialTitle: Build message extension using Bot Framework SDK
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |

    Message extensions using API significantly enhance the functionality of your Teams apps by allowing them to interact with external services. This can help streamline workflows by reducing the need to switch between different applications.

    You can use API message extension to integrate external services that are commonly used in the business workflow. For example, a business that frequently uses a CRM system for customer management could use a Messaging Extension to fetch and display customer data directly from Teams. This can help save time and improve efficiency by reducing the need to switch between different applications. This feature is supported on all platforms where Teams is available, including desktop, web, and mobile. 

- title: Prerequisites
  durationInMinutes: 1
  content: |

   Here's a list of tools you need for building and deploying your apps.

   | Install | For using... |
   | --- | --- |
   |[Teams Toolkit](#install-the-teams-toolkit) | A Microsoft Visual Studio Code extension that creates a project scaffolding for your app. Use version 5. |
   |[Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, or call - all in one place.|
   |[Node.js](https://nodejs.org/en/download/) | Back-end JavaScript runtime environment. For more information, see [Node.js version compatibility table for project type](~/toolkit/build-environments.md#nodejs-version-compatibility-table-for-project-type).|
   |[Microsoft Edge](https://www.microsoft.com/edge) (recommended) or [Google Chrome](https://www.google.com/chrome/) | A browser with developer tools. |
   |[Visual Studio Code](https://code.visualstudio.com/download) | JavaScript, TypeScript, or SharePoint Framework (SPFx) build environments. Use version 1.55 or later. |
   |[OpenAI](https://platform.openai.com/docs/quickstart/build-your-application) or [Azure OpenAI](https://azure.microsoft.com/free/)|First create your OpenAI API key to use OpenAI's GPT. If you want to host your app or access resources in Azure, you must have create an [Azure OpenAI service](/azure/ai-services/openai/how-to/create-resource?pivots=web-portal) before you begin.|
   |[Microsoft 365 developer account](concepts/build-and-test/prepare-your-o365-tenant.md)| Access to Teams account with the appropriate permissions to install an app. |
   | [Developer Portal for Teams](https://dev.teams.microsoft.com/) | Web-based portal to configure, manage, and distribute your Teams app including to your organization or the Microsoft Teams Store. |


   ## Prepare development environment

   After you've installed the required tools, set up the development environment. 


   ### Install the Teams Toolkit

   The Teams Toolkit helps simplify the development process with tools to provision and deploy cloud resources for your app, publish to the Teams Store, and more. 
    
   You can use the toolkit with Visual Studio Code, or CLI (command-line interface), called `TeamsFx`.


   # [Visual Studio Code](#tab/vscode)

   1. Open Visual Studio Code and select the **Extensions** view (**Ctrl+Shift+X** / **⌘⇧-X** or **View > Extensions**).
   1. In the search box, enter **Teams Toolkit**.
   1. Select **Install** next to the Teams Toolkit.

      :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/install-toolkit-vscodeversion.png" alt-text="Illustration shows the Teams Toolkit extension installation." lightbox="~/assets\images\teams-toolkit-v2\prerequisites\install-toolkit-vscodeversion-1.png":::

    The Teams Toolkit icon appears in the Visual Studio Code **Activity Bar** after it's installed.

    :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/hw-teams-toolkit-sidebar-icon.png" alt-text="Illustration shows the Teams Toolkit icon in Visual Studio Code sidebar.":::

   You can also find the Teams Toolkit on the [Visual Studio Code Marketplace](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension).

   > [!NOTE]
   > The latest version of Teams Toolkit is v5.

   # [Command line](#tab/cli)

   To install the TeamsFx CLI, use the `npm` package manager:

   ``` bash
   npm install -g @microsoft/teamsfx-cli
   ```

   Depending on your configuration, you might need to use `sudo` to install the CLI:

   ``` bash
   sudo npm install -g --unsafe-perm @microsoft/teamsfx-cli
   ```

   This condition is more common on Linux and macOS systems.

   Ensure you add the npm global cache to your path. This step is normally done as part of the Node.js installer.

   You can use the CLI with the `teamsfx` command. Verify that the command is working by running `teamsfx -h`.

   > [!CAUTION]
   > Before you can run TeamsFx in PowerShell terminals, you must enable the 'remote signed' execution policy for PowerShell.

   ---

   ## Set up your Teams development tenant

   A **tenant** is like a space, or a container for your organization in Teams, where you chat, share files, and run meetings. This space is also where your sideload and test your app. Let's verify if you're ready to develop with the tenant.

   ### Check for sideloading option

   After creating the app, you must load your app in Teams without distributing it. This process is known as sideloading. Sign in to your Microsoft 365 account to view this option.

    > [!NOTE]
    > Sideloading is necessary for previewing and testing apps in Teams local environment. If it isn't enabled, you won't be able to preview and test your app in Teams local environment.

   Do you already have a tenant, and do you have the admin access? Let's check if you really do!

   Verify if you can sideload apps in Teams:

    1. In the Teams client, select the **Apps** icon.
    1. Select **Manage your apps**.
    1. Select **Upload an app**.
    1. Look for the option to **Upload a custom app**. If you see the option, sideloading apps is enabled.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/spfx-custom-new1.png" alt-text="Screenshot shows the bot home.":::

        > [!NOTE]
        > Contact your Teams administrator, if you don't find the option to upload a custom app.

   ### Create a free Teams developer tenant (optional)

   If you don't have a Teams developer account, you can get it free. Join the Microsoft 365 developer program!

   1. Go to the [Microsoft 365 developer program](https://developer.microsoft.com/microsoft-365/dev-program).
   1. Select **Join Now** and follow the onscreen instructions.
   1. In the welcome screen, select **Set up E5 subscription**.
   1. Set up your administrator account. After you finish, the following screen appears.

       :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png" alt-text="Screenshot shows the Microsoft 365 Developer Program.":::

   1. Sign in to Teams using the administrator account you just set up. Verify that you have the **Upload a custom app** option in Teams.

   ## Get a free Azure account

   If you want to host your app or access resources in Azure, you must have an Azure subscription. [Create a free account](https://azure.microsoft.com/free/) before you begin.

   Now you’ve got all the tools to set up your account. Next, let's set up your development environment and start building! Select the app you want to build first.


- title: Build an API based message extension
  durationInMinutes: 1
  content: |

    ## OpenAPI specification
  
    You need an OpenAPI specification for the external service you want to interact with. The API spec must meet the following criteria: 
    
    * It must not have auth specified.
    * It must have at most one required parameter or property in the request body. You can make a required parameter optional and add a default value.
    * The request body (if present) cannot contain any arrays.
    * The server URL must be defined in the specification.
    * If there is no operation ID, you can add one to the spec that you will be uploading for testing because an operation ID is mandatory for operations that will be Messaging Extensions. You can validate that the swagger is valid by using an online validator like [Swagger Parser](https://apitools.dev/swagger-parser/online/). Once you have found a suitable API spec, save it in a folder. 

    We've used the following OpenAPI spec as an example for this tutorial:

    ```YAML
        {
        "openapi": "3.0.1",
        "info": {
            "version": "v0",
            "title": "Open AI Klarna product Api"
        },
        "servers": [
            {
                "url": "https://www.klarna.com/us/shopping"
            }
        ],
        "tags": [
            {
                "name": "open-ai-product-endpoint",
                "description": "Open AI Product Endpoint. Query for products."
            }
        ],
        "paths": {
            "/public/openai/v0/products": {
                "get": {
                    "tags": [
                        "open-ai-product-endpoint"
                    ],
                    "summary": "API for fetching Klarna product information",
                    "operationId": "productsUsingGET",
                    "parameters": [
                        {
                            "name": "countryCode",
                            "in": "query",
                            "description": "ISO 3166 country code with 2 characters based on the user location. Currently, only US, GB, DE, SE and DK are supported.",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "q",
                            "in": "query",
                            "description": "A precise query that matches one very small category or product that needs to be searched for to find the products the user is looking for. If the user explicitly stated what they want, use that as a query. The query is as specific as possible to the product name or category mentioned by the user in its singular form, and don't contain any clarifiers like latest, newest, cheapest, budget, premium, expensive or similar. The query is always taken from the latest topic, if there is a new topic a new query is started. If the user speaks another language than English, translate their request into English (example: translate fia med knuff to ludo board game)!",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "size",
                            "in": "query",
                            "description": "number of products returned",
                            "required": false,
                            "schema": {
                                "type": "integer"
                            }
                        },
                        {
                            "name": "min_price",
                            "in": "query",
                            "description": "(Optional) Minimum price in local currency for the product searched for. Either explicitly stated by the user or implicitly inferred from a combination of the user's request and the kind of product searched for.",
                            "required": false,
                            "schema": {
                                "type": "integer"
                            }
                        },
                        {
                            "name": "max_price",
                            "in": "query",
                            "description": "(Optional) Maximum price in local currency for the product searched for. Either explicitly stated by the user or implicitly inferred from a combination of the user's request and the kind of product searched for.",
                            "required": false,
                            "schema": {
                                "type": "integer"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Products found",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/ProductResponse"
                                    }
                                }
                            }
                        },
                        "503": {
                            "description": "one or more services are unavailable"
                        }
                    },
                    "deprecated": false
                }
            }
        },
        "components": {
            "schemas": {
                "Product": {
                    "type": "object",
                    "properties": {
                        "attributes": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "name": {
                            "type": "string"
                        },
                        "price": {
                            "type": "string"
                        },
                        "url": {
                            "type": "string"
                        }
                    },
                    "title": "Product"
                },
                "ProductResponse": {
                    "type": "object",
                    "properties": {
                        "products": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/Product"
                            }
                        }
                    },
                    "title": "ProductResponse"
                }
            }
        }
    }

    ```

    1. Go to [Swagger/OpenAPI validator](https://apitools.dev/swagger-parser/online/) and validate the OpenAPI specification document.
    2. Save the OpenAPI specification document.
    3. Go to [Swagger Editor](https://editor.swagger.io/).
    4. Copy the OpenAPI specification code in the editor.
    5. In the right pane, select **GET**.
    6. Select **Try it out**.
    7. Enter the following values for the parameters as follows:
       1. countryCode: US
       2.  q: shoes
       3. size: 5
       4. min_price: 10
       5. max_price: 100

       :::image type="content" source="assets/images/Copilot/api-me-sbs-execute-get-response.png" alt-text="Screenshots shows the parameters, it's values and the **EXECUTE** option in the swagger editor.":::

    1. Select **Execute**.
    1. Go to **Server response** > **Response Body**.
    1. Under `products`, copy the first product from the list and save it for future reference.

       :::image type="content" source="assets/images/Copilot/api-me-sbs-product-response.png" alt-text="Screenshots shows the highlighted product that is selected from the response body.":::
    
    ### Response rendering template 
    
    An OpenAPI specification document requires a response rendering template for the app to respond to the get requests. The response rendering template consists of an Adaptive Card template, Preview card template, and metadata.
    
    To create a response rendering template, follow these steps:

    1. Create a new JSON file. This file will follow the schema outlined in the Template Response Schema document. 
    2. Determine the JSON path to the relevant data/array in the example response from testing. For more information, see [Querying JSON with JSON path](https://www.newtonsoft.com/json/help/html/QueryJsonSelectToken.htm).
    3. Use Bing chat to create an adaptive card template that binds to the schema of the sample data. 
    4. Copy the adaptive card template and put it in the response rendering template under the key `responseCardTemplate`. 
    5. Create a simplified preview card template and put it under the key `previewCardTemplate`. 
    6. Add the response layout (`list` or `grid`) to the response rendering template. 
    7. Add `version`: `1.0.0` to the response rendering template. 
    8. Save the response rendering template in the same folder you saved the OpenAPI spec. 

    The following code is an example of a Response rendering template:
    
    ```json
    {
        "version": "1.0",
        "responseLayout": "grid",
        "responseCardTemplate": {
            "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
            "type": "AdaptiveCard",
            "version": "1.4",
            "body": [
                {
                    "type": "Container",
                    "items": [
                        {
                            "type": "ColumnSet",
                            "columns": [
                                {
                                    "type": "Column",
                                     "width": "stretch",
                                    "items": [
                                        {
                                            "type": "TextBlock",
                                            "text": "Title: ${if(title, title, 'N/A')}",
                                            "wrap": true
                                        },
                                        {
                                            "type": "TextBlock",
                                            "text": "Description: ${if(description, description, 'N/A')}",
                                            "wrap": true
                                        },
                                        {
                                            "type": "TextBlock",
                                            "text": "Assigned To: ${if(assignedTo, assignedTo, 'N/A')}",
                                            "wrap": true
                                        },
                                        {
                                            "type": "Image",
                                            "url": "${image}",
                                            "size": "Medium",
                                            "$when": "${image != null}"
                                        }
                                    ]
                                },
                                {
                                    "type": "Column",
                                    "width": "auto",
                                    "items": [
                                        {
                                            "type": "Image",
                                            "url": "${if(image, image, '')}",
                                            "size": "Medium"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "FactSet",
                            "facts": [
                                {
                                    "title": "Repair ID:",
                                    "value": "${if(id, id, 'N/A')}"
                                },
                                {
                                    "title": "Date:",
                                    "value": "${if(date, date, 'N/A')}"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "previewCardTemplate": {
            "title": "Title: ${if(title, title, 'N/A')}",
            "subtitle": "Description: ${if(description, description, 'N/A')}",
            "text": "Assigned To: ${if(assignedTo, assignedTo, 'N/A')}",
            "image": {
            "url": "${image}",
            "$when": "${image != null}"
              }
            }
        }
    }
    ```
    
    ### Step 3: 
    
    Create a Teams App Manifest Now, you need to create a Teams app manifest. This manifest will define the properties of your Teams app. To create the manifest, follow these steps: 

    1. Create a new JSON file. This file will follow the basic structure for creating a Teams app manifest for API Messaging Extensions. 
    2. Under the `composeExtension` node, include `composeExtensionType`: `apiBased`. 
    3. Add a new key `apiSpecificationFile`, and put the value as the name of your OpenAPI specification file from Step 1. 
    4. The Input extension command ID must match the operation ID in the API spec. 
    5. The input extension parameter name must match the required parameter name or if there are no required parameters, then the name must match one of the operational parameters. 
    6. Under valid domains in the Teams app manifest, you will need to add the service URL endpoint that is defined in the API spec. 
    7. Save the Teams app manifest in the same folder you saved the OpenAPI spec and the response rendering template
    8. You will also need a color image and outline image. These images should be included in the folder and referenced in your Teams app manifest. 
    9. Zip up the contents of the folder. 
    
    ### Step 4: 
    
    Log into Teams test environment Finally, you need to test your app in Teams. To do this, follow these steps: 

    1. Log into Teams with the provided credentials. 
    2. Make sure the feature flag is enabled by doing ctrl+alt+shift+8 and go settings and search for `enableSME` and make sure it is enabled. 
    3. Side-load the app. 
    4. Test it out! By following these steps, you can successfully implement API-based Messaging Extensions in your Teams app. For more information, you can refer to the [Teams Developer documentation](/messaging-extensions/what-are-messaging-extensions).

    ## Build and run your first bot app locally

    To build and run your app in the local environment:

    1. Select the **F5** key to run your app in debug mode.

        > [!NOTE]
        > If Teams Toolkit is unable to check a particular prerequisite, it prompts you to check.

        <!-- markdownlint-disable MD033 -->

        <details>
        <summary>Learn what happens when you run your app locally in the debugger.</summary>

        In case you're wondering, when you press the **F5** key, the Teams Toolkit:

        1. Checks all the following prerequisites:
          - You're logged in with a Microsoft 365 account.
          - Sideloading is enabled for your Microsoft 365 account.
          - Supported Node.js version is installed.
          - Port required by bot app is available.
          
        2. Install npm packages.
        3. Starts Dev Tunnel to create an HTTP tunnel.
        4. Registers the app in Azure Active Directory (Azure AD) and configures the app.
        5. Registers the bot app in Bot Framework SDK and configures the bot app.
        6. Registers the app in Teams Developer Portal and configures the app.
        7. Starts the bot app.
        8. Starts Teams in a web browser and sideloads the bot app.


        </details>

        :::image type="content" source="assets/images/teams-toolkit-v2/first-bot/f5-build-and-run.png" alt-text="Screenshot showing when F5 key is pressed for debugging.":::

        > [!NOTE]
        > When you run the app for the first time, all dependencies are downloaded, and the app is built. A browser window automatically opens when the build is complete. This process can take three to five minutes to complete.

        Teams runs your app in a web browser.

    1. Sign in with your Microsoft 365 account, if prompted.

    1. Select **Add** when prompted to sideload the app onto Teams on your local machine.

        :::image type="content" source="assets/images/bots/conversational-AI-add-sample-bot.png" alt-text="Screenshot shows an example of the add option to add a sample bot to the local machine.":::

        Now the bot is successfully running on Teams! After the app is loaded, a chat session with the bot opens.

        :::image type="content" source="assets/images/bots/conversational-ai-sample-bot-chat.png" alt-text="Screenshot shows an example of the chat window in the local machine.":::

        You can type `Hi` to start interacting with the bot.

      <!-- markdownlint-disable MD033 -->
      <details>
      <summary>Learn how to troubleshoot if your app doesn't run locally.</summary>

      To successfully run your app in Teams, ensure that you've enabled sideloading in your Teams account. You can learn more about sideloading in the Prerequisites section.

      > [!IMPORTANT]
      > Sideloading apps are available in [Government Community Cloud (GCC), GCC-High, and Department of Defense (DOD)](concepts/app-fundamentals-overview.md#government-community-cloud) environments.

      > [!TIP]
      > Check for issues before sideloading your app, using the [app validation tool](https://dev.teams.microsoft.com/appvalidation.html). This tool is included in the toolkit. Fix the errors to sideload the app.
      </details> 
      
- title: Deploy your first Teams app
  durationInMinutes: 1
  content: |

    You've learned to create, build, and run Teams app with bot capability. The final step is to deploy your app on Azure.

    Let's deploy the first app with bot capability on Azure using Teams Toolkit.

    ## Sign in to your Azure account

    Use this account to access the Microsoft Azure portal and to provision new cloud resources to support your app.

    # [Visual Studio Code](#tab/viscode)

    1. Open Visual Studio Code.
    1. Open the project folder in which you created the bot app.
    1. Select the Teams Toolkit :::image type="icon" source="assets/icons/vsc-toolkit.png" border="false"::: icon in the sidebar.
    1. Select **Sign in to Azure**.

        > [!TIP]
        > If you have the Azure Account extension installed and are using the same account, you can skip this step. Use the same account as you are using in other extensions.

        Your default web browser opens to let you sign in to the account.
    1. Sign in to your Azure account using your credentials.
    1. Close the browser when prompted and return to Visual Studio Code.

        The **ACCOUNTS** section in the sidebar shows the two accounts separately. It also lists the number of usable Azure subscriptions available to you. Ensure you have at least one usable Azure subscription available. If not, sign out and use a different account.

        Now you're ready to deploy your app to Azure!

        Congratulations, you've created a Teams app! 
        Now let's go ahead and learn how to deploy one of the apps to Azure using the Teams Toolkit.

    # [Command line](#tab/cline)

    1. Sign in to Microsoft 365 with the TeamsFx CLI:

        ``` bash
        teamsfx account login m365
        ```

        Your default web browser opens to let you sign in to the account. Sign in to your Azure account using your credentials. Close the browser when you're prompted.

    2. Sign in to Azure with the TeamsFx CLI:

        ``` bash
        teamsfx account login azure
        ```

        Your default web browser opens to let you sign in to the account. Sign in to your Azure account using your credentials. Close the browser when you're prompted.

        The account logins are shared between Visual Studio Code and the TeamsFx CLI.

        Congratulations, you've signed in your Azure account!
        Now let's go ahead and learn how to deploy one of the apps to Azure using the Teams Toolkit.

    ---

    ## Deploy your app to Azure

    Deployment consists of two steps. First, necessary cloud resources are created (also known as provisioning). Then, your app's code is copied into the created cloud resources. For this tutorial, you'll deploy the bot app.
    <br>
    <br>
    <details>
    <summary>What's the difference between Provision and Deploy?</summary>
    <br>
    The <b>Provision</b> step creates resources in Azure and Microsoft 365 for your app, but no code (HTML, CSS, JavaScript) is copied to the resources. The <b>Deploy</b> step copies the code for your app to the resources you created during the provision step. It's common to deploy multiple times without provisioning new resources. Since the provision step can take some time to complete, it's separate from the deployment step.
    </details>
    <br>

    # [Visual Studio Code](#tab/vscode)

    Select the Teams Toolkit :::image type="icon" source="assets/icons/vsc-toolkit.png" border="false"::: icon in the Visual Studio Code sidebar.

    1. Select **Provision**.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/provisioning-commands.png" alt-text="Screenshot showing the selection of provision in the cloud under Teams toolkit.":::

    1. Select a subscription to use for the Azure resources.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/deploy-azure/select-resource.png" alt-text="Screenshot showing the subscription to use for the Azure resources.":::

        Your app is hosted using Azure resources.

        A dialog warns you that costs might be incurred when running resources in Azure.

    1. Select **Provision**.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/deploy-azure/provision-warning.png" alt-text="Screenshot showing a dialog box that costs ma be incurred when running resources in Azure.":::

        The provisioning process creates resources in the Azure cloud. It might take some time. You can monitor the progress by watching the dialogs in the bottom-right corner. After a few minutes, you see the following notice:

        :::image type="content" source="~/assets/images/teams-toolkit-v2/deploy-azure/deploy-provision-successmsgext.png" alt-text="Screenshot showing a notice, which displays 'hellomsg' successfully provisioned in the cloud.":::

        If you want, you can view the provisioned resources. For this tutorial, you don't need to view resources.

        The provisioned resource appears in the **ENVIRONMENT** section.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/deploy-azure/provisioned-resources-env.png" alt-text="Screenshot showing the resource being provisioned in the environment section.":::

    1. Select **Deploy** from the **LIFECYCLE** panel after provisioning is complete.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/deploy-azure/deploy-cloud.png" alt-text="Screenshot showing deploy to cloud.":::

        As with provisioning, deployment takes some time. You can monitor the process by watching the dialogs in the bottom-right corner. After a few minutes, you see a completion notice.

        Now, you can use the same process to deploy your Bot and Message Extension apps to Azure.

    # [Command Line](#tab/cli)

    In your terminal window:

    1. Run `teamsfx provision`.

        ``` bash
        teamsfx provision
        ```

    When prompted, select an Azure subscription to use Azure resources.

    Your app is hosted using Azure resources.

    1. Run `teamsfx deploy`.

        ``` bash
        teamsfx deploy
        ```

    ---

    ## Run the deployed app

    After the provisioning and deployment steps are complete:

    1. Open the debug panel (**Ctrl+Shift+D** / **⌘⇧-D** or **View > Run**) from Visual Studio Code.
    1. Select **Launch Remote (Edge)** from the launch configuration dropdown.
    1. Select the **Start debugging (F5)** to launch your app from Azure.

    :::image type="content" source="~/assets/images/teams-toolkit-v2/deploy-azure/launch-remote.png" alt-text="Screenshot showing the launch app remotely.":::

    1. Select **Add**.
        
        The toolkit displays a message to indicate that the app is added to Teams.

        :::image type="content" source="assets/images/bots/conversational-AI-add-sample-bot2.png" alt-text="Screenshot shows an example of the add option to add a sample bot to the local machine.":::

        Your app is loaded on Teams client.

        :::image type="content" source="assets/images/bots/conversational-ai-sample-bot-chat2.png" alt-text="Screenshot shows an example of the chat window in the local machine.":::

    <!-- markdownlint-disable MD033 -->
    <details>
    <summary>Learn what happens when you deployed your app to Azure</summary>

    Before deployment, the application has been running locally:

     * The backend runs using **Azure Functions Core Tools**.
     * The application HTTP endpoint, where Microsoft Teams loads the application, runs locally.

    Deployment is a two-step process. You provision the resources on an active Azure subscription, and then deploy or upload the backend and frontend code for the application to Azure.

     * The backend, if configured, uses various Azure services, including Azure App Service and Azure Storage.
     * The frontend application is deployed to an Azure Storage account configured for static web hosting.

    </details>

    Before deployment, the application has been running locally:

      * The backend runs using **Azure Functions Core Tools**.
      * The application HTTP endpoint, where Microsoft Teams loads the application, runs locally.

      Deployment is a two-step process. You provision the resources on an active Azure subscription, and then deploy or upload the backend and frontend code for the application to Azure.

      * The backend, if configured, uses various Azure services, including Azure App Service and Azure Storage.
      * The frontend application is deployed to an Azure Storage account configured for static web hosting.

      </details>

- title: Congratulations!
  durationInMinutes: 1
  content: |

    You've done it!

    You've created a Teams AI library bot.

    :::image type="content" source="assets/images/bots/conversational-ai-sample-bot-chat2.png" alt-text="Screenshot shows an example of the chat window in the local machine.":::

    Now that you've learned to create an app using Teams AI library, you can move on to learn about Teams AI capabilities.

    You've completed the tutorial.

