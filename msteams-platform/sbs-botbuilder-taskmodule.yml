### YamlMime:Tutorial
title: Invoke task modules from Microsoft Teams
metadata:
  title: Invoke task modules from Microsoft Teams
  description: With this learning module, learn how to set up Teams task module by using Adaptive Cards or Bot Framework cards.
  audience: Developer
  level: Beginner
  ms.date: 23/02/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: task-modules-and-cards/task-modules/task-modules-bots.md
  nextTutorialTitle: Read more on task modules from bots
  ms.custom: mvc
  ms.localizationpriority: High
items:
- durationInMinutes: 1
  content: |
    You can invoke task modules from Teams bots by using Adaptive Cards or Bot Framework cards.

    **Key features of task modules:**

    * Enhance user experience by avoiding multiple steps.
    * Help users to keep track of the bot state.
    * Retrieve input from user and display custom web page content.

    This step-by-step guide helps you to create a sample Azure bot to invoke Teams task module. You'll see the following output:

     :::image type="content" source="./assets/images/Teams-task-module/final-image.png" alt-text="Screenshot shows the final output of the Task module.":::

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure you install the following tools and set up your development environment: 
    
     | &nbsp; | Install | For using... |
     | --- | --- | --- |
     | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, and call-all in one place.|
     | &nbsp; | [Visual Studio 2022](https://visualstudio.microsoft.com)<br> | You can install the enterprise version in Visual Studio 2022, and install the ASP.NET and web development workloads. Use the latest version. |
     | &nbsp; | [.NET Core SDK](https://dotnet.microsoft.com/en-us/download) | Customized bindings for local debugging and Azure Functions app deployments. Use the latest version or install the portable version. |
     | &nbsp; | [ngrok](https://ngrok.com/download) | Teams app features (conversational bots, message extensions, and incoming webhooks) require inbound connections. A tunnel connects your development system to Teams. It isn't required for apps that only include tabs. This package is installed within the project directory (using npm `devDependencies`). |

      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).

    

- title: Set up local environment
  durationInMinutes: 1
  content: |  
    1. Open [Microsoft-Teams-Samples](https://github.com/OfficeDev/Microsoft-Teams-Samples).
    1. Select **Code**.
    1. Select **Open with GitHub Desktop** from the dropdown menu.

       :::image type="content" source="~/assets/images/Teams-task-module/clone-repository.png" alt-text="Clone repository":::

    1. Select **Clone**. 

- title: Create and register your bot in Azure AD portal
  durationInMinutes: 5
  content: |
    To create and register your bot in Microsoft Azure Active Directory (Azure AD), perform the following steps:

    * Create Azure Bot resource to register bot with Azure Bot Service.
    * Create client secret ID and value details to enable single sign-on (SSO) authentication of the bot.
    * Add Teams channel to deploy the bot to a Teams channel.
    * Create a tunnel to your web server's endpoints by using ngrok.
    * Add messaging endpoint to the ngrok tunnel you created.

    **To create Azure Bot resource**

    1. Go to the [Azure portal](https://portal.azure.com/).
    1. Select **Create a resource**.
    1. In the search box, enter **Azure Bot**.
    1. Select **Enter**.
    1. Select **Azure Bot**.

         :::image type="content" source="./assets/images/Teams-task-module/azure-bot.png" alt-text="Screenshot shows to create an Azure bot.":::

    1. Select **Create**.
    1. Enter required bot handle name in **Bot handle**.
    1. Select your **Subscription** from the dropdown list.
    1. Select your **Resource group** from the dropdown list.

        :::image type="content" source="~/assets/images/Teams-task-module/create-azure-bot.png" alt-text="Screenshot shows to select Subscription and Resource group to create Azure bot."::: 
    
       To create a new resource group, select **Create new** > enter resource name > select **OK**. Select the required location from **New resource group location** dropdown list.
       
        :::image type="content" source="~/assets/images/bots/newresource.png" alt-text="New resource group location":::

    1. In the **Microsoft App ID** section, by default **Create new Microsoft App ID** is selected. 
    
       You can also select **Use existing app registration** and enter **App ID**, **App tenant ID**, and **MSI resource ID**.

       > [!NOTE]
       > You can't create more than one bot with the same **Microsoft App ID**.
    
    1. Select **Type of App** as **Multi Tenant**.  

    1. Select **Review + create**.

        :::image type="content" source="~/assets/images/Teams-task-module/multi-tenant-option_1.png" alt-text="Microsoft App ID":::

    1. If the validation is passed, select **Create**. 

        It takes a few moments for your bot service to be provisioned. 

    1. Select **Go to resource**. 

        :::image type="content" source="~/assets/images/Teams-task-module/bot-deployment_2.png" alt-text="Deploy App":::

        Your Azure bot is created.

        :::image type="content" source="~/assets/images/Teams-task-module/bot-page_1.png" alt-text="Azure bot resource created":::

    **To create client secret**

      Perform the following steps, if you've created a new **Microsoft App ID**:

    1. In the left pane, select **Configuration**. 

       > [!TIP]
       > Save the **Microsoft App ID** or **Client ID** for future reference.

    1. Next to **Microsoft App ID**, select **Manage Password**.

        :::image type="content" source="~/assets/images/Teams-task-module/manage-bot-label.png" alt-text="Microsoft ID created":::

    1. In the **Client secrets** section, select **New client secret**. 

        :::image type="content" source="~/assets/images/meetings-side-panel/newclientsecret_2.png" alt-text="New client secret":::
    
       The **Add a client secret** window appears. 

    1. Enter **Description**.
    
    1. Select **Add**.

        :::image type="content" source="~/assets/images/Teams-task-module/clientsecret_2.png" alt-text="Add client secret to app":::

    1. In the **Value** column, select **Copy to clipboard**.

         :::image type="content" source="~/assets/images/Teams-task-module/clientvalue_2.png" alt-text="Value of client secret":::
       
       > [!TIP]
       > Save the **Client secrets** value or app password for future reference.

    **To add the Teams channel**

    1. Select **Home**.

        :::image type="content" source="~/assets/images/Teams-task-module/gotohome_2.png" alt-text="Home page":::

    1. Select your bot from **Recent resources**.

    1. Select **Channels** in the left pane and select **Microsoft Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>.

         :::image type="content" source="~/assets/images/adaptive-cards/channel-teams.png" alt-text="Select Teams in channels":::
         
    1. Select the checkbox to accept the **Terms of Service**.
    
    1. Select **Agree**.

          :::image type="content" source="~/assets/images/Teams-task-module/terms_2.png" alt-text="Terms of service":::

    1. Select **Apply**.

          :::image type="content" source="~/assets/images/Teams-task-module/configteams_2.png" alt-text="Select Teams":::  
    
    **To create a ngrok tunnel**

    Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

     ```bash
     ngrok http --host-header=rewrite 3978
     ```

    > [!TIP]
    > If you encounter **ERR_NGROK_4018**, follow the steps provided in the command prompt to sign-up and authenticate ngrok. Then run the `ngrok http --host-header=localhost 3978` command.

    **To add messaging endpoint**

    1. From ngrok, copy the HTTPS URL (https to io).

       :::image type="content" source="../msteams-platform/assets/images/ngrok-url1_1.png" alt-text="ngrok HTTPS URL":::

        > [!NOTE]
        > The HTTPS URL in your ngrok is your fully qualified domain name.
        > The `WebAppDomain` is a fully qualified domain name that doesn't include `https://` in it.

    1. Go to the Azure bot you've created in Azure portal. In the left pane, under **Settings**, select **Configuration**.

    1. In **Messaging endpoint**, use the HTTPS URL available from ngrok and at the end of the URL add **/api/messages**.

        :::image type="content" source="~/assets/images/Teams-task-module/messaging-endpoint_1.png" alt-text="Messaging Endpoint":::

    1. Select **Apply**.

        You have successfully set up a bot in Azure Bot Service.

- title: Update the Azure AD app registration
  durationInMinutes: 1
  content: |
    1. Go to the [Azure portal](https://portal.azure.com/).

    1. Select **Azure Active Directory**.

    1. In the left pane, select **App registrations**.

    1. Select your bot.

       :::image type="content" source="~/assets/images/Teams-task-module/app-register.png" alt-text="App registration":::

    1. Under **Manage**, select **Expose an API**.

    1. Select **Add**.

       :::image type="content" source="~/assets/images/Teams-task-module/exposeanapi-add.png" alt-text="Expose an API":::

    1. Use the `api://your ngrok/botid-{AppID}` format for the **Application ID URI**.

    1. Update the **Application ID URI** and select **Save**.

       :::image type="content" source="~/assets/images/Teams-task-module/app-id-uri.png" alt-text="Screenshot shows the redirect uri.":::

       The following image shows the domain name:

       :::image type="content" source="~/assets/images/Teams-task-module/setlink_1.png" alt-text="Set link":::

        > [!NOTE]
        > If you're using a tunneling service such as ngrok, ensure you update the value whenever your ngrok subdomain changes.
        > For example: `api://f631****.ngrok.io/92c11075-c629-4a1e-ab58-02b4fd4204c2`, where `f631****.ngrok.io` is the new ngrok subdomain name.

    1. Select **Add a scope**. 

       :::image type="content" source="~/assets/images/meetings-side-panel/selectscope_2.png" alt-text="Select scope":::

    1. Enter **access_as_user** as the **Scope name**.

    1. Set **Who can consent?** to **Admins and users**.
  
    1. To configure the admin and user consent prompts with appropriate values for **access_as_user** scope, provide the following information in the fields:</br>
    
         * Enter **Teams can access the user’s profile** as **Admin consent display name**.

         * Enter **Allows Teams to call the app’s web APIs as the current user** as **Admin consent description**.

         * Enter **Teams can access the user profile and make requests on the user’s behalf** as **User consent display name**.

         * Enter **Enable Teams to call this app’s APIs with the same rights as the user** as **User consent description**.
  
    1. Ensure that **State** is set to **Enabled**.
  
    1. Select **Add scope** to save.

         The following image shows the fields and the values:

        :::image type="content" source="~/assets/images/Teams-task-module/addascope_1.png" alt-text="Add a scope":::

        > [!NOTE]
        > The **Scope name** must match with the **Application ID** URI with `/access_as_user` appended at the end.</br>
           `api://d4b8****.ngrok.io/00000000-0000-0000-0000-000000000000/access_as_user`

        :::image type="content" source="~/assets/images/Teams-task-module/scopes_3.png" alt-text="Scopes"::: 
  
    1. In the **Authorized client applications** section, identify the applications that you want to authorize for your app’s web application. 
    
    1. Select **Add a client application**. 

        :::image type="content" source="~/assets/images/meetings-side-panel/selectclientapp_1.png" alt-text="Select client application"::: 

    1. Enter **Client ID**: `1fec8e78-bce4-4aaf-ab1b-5451cc387264` for Teams mobile or desktop application. 

        :::image type="content" source="~/assets/images/meetings-side-panel/addclientapplication1.png" alt-text="Add client application 1"::: 

       Enter **Client ID**: `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` for Teams web application.

        :::image type="content" source="~/assets/images/meetings-side-panel/addclientapplication2.png" alt-text="Add client application 2"::: 

    1. Select **Authorized scopes**.

        :::image type="content" source="~/assets/images/Teams-task-module/authorizedscope.png" alt-text="Add client application 2"::: 

       The following image displays the client IDs:

        :::image type="content" source="~/assets/images/meetings-side-panel/clientapps.png" alt-text="Client applications"::: 
  
    1. In the left pane, select **API permissions**. 

       > [!NOTE]
       > Users need to consent to the API permissions only if the Azure AD app is registered in a different tenant.

    1. Select **Add a permission**.

        :::image type="content" source="~/assets/images/meetings-side-panel/add-permission_2.png" alt-text="Add permission":::

    1. Select **Microsoft Graph**.

    1. Select **Delegated permissions**.

    1. Select the following permissions:</br>
         * **email**
         * **offline_access**
         * **openid**
         * **profile**
          * **User.Read**

    1. Select **Add permissions**.

         :::image type="content" source="~/assets/images/meetings-side-panel/other-permissions_1.png" alt-text="Other permissions":::

    1. From the left pane, select **Authentication** to set a redirect URI. 

       > [!NOTE]
       > If an app isn't granted IT admin consent, users must provide consent the first time they use an app.
               
         1. Select **Add a platform** > **Web**.

            :::image type="content" source="~/assets/images/Teams-task-module/webauth_1.png" alt-text="Web":::

         1. Enter the redirect URI for your app by appending `auth-end` to fully qualified domain name:</br> 
           `https://d4b8****.ngrok.io/auth-end`. </br>

         1. Enable **Implicit grant and hybrid flows** by selecting the following checkboxes:
             * **ID tokens**
             * **Access tokens**
   
         1. Select **Configure**.

            :::image type="content" source="~/assets/images/Teams-task-module/authend_1.png" alt-text="Auth-end":::

- title: Set up app settings and manifest files
  durationInMinutes: 1
  content: |
    1. Go to the **appsettings.json** file in the cloned repository.

        :::image type="content" source="~/assets/images/Teams-task-module/appsettings-file-location.png" alt-text="App settings location":::

    1. Open the **appsettings.json** and update the following information:  

         * Set `"MicrosoftAppType"` to **MultiTenant**.
         * Set `"MicrosoftAppId"` to your bot's **Microsoft App ID**.
         * Set `"MicrosoftAppPassword"` to **Value** of **Client secret**.
         * Set `"MicrosoftAppTenantId"` to the tenant ID of the tenant where the app is used.
         * Set `"BaseUrl"` to the fully qualified domain name (https to io).

        :::image type="content" source="~/assets/images/Teams-task-module/appsettings_1.png" alt-text="Screenshot shows appsetting.json in visual studio.":::

    1. Go to the **manifest.json** file in the cloned repository.

        :::image type="content" source="~/assets/images/Teams-task-module/manifest-file-location.png" alt-text="Manifest file location":::
    
    1. Open the **manifest.json** file and update the following information: 

         * Replace all occurrences of `YourDeployedBotUrl.com` with `WebAppDomain` name.
         * Replace all occurrences of `<<YOUR-MICROSOFT-APP-ID>>` with bot's **Microsoft App ID**.

        :::image type="content" source="~/assets/images/Teams-task-module/manifest_1.png" alt-text="Manifest image2.":::

- title: Build and run the service
  durationInMinutes: 1
  content: |
    To build and run the service using the latest version of Visual Studio or Command line.

    # [Latest version of Visual Studio](#tab/latestversionofvisualstudio)

       1. Open Visual Studio.
       1. Go to **File** > **Open** > **Project/Solution...**.
    
          :::image type="content" source="~/assets/images/Teams-task-module/VSopenfile.png" alt-text="Screenshot shows the open file with folder location.":::

       1. Select **TeamsTaskModule.csproj** file from **samples** > **bot-task-module** > **csharp** folder.

          :::image type="content" source="~/assets/images/Teams-task-module/project-file-location.png" alt-text="CS proj file":::

       1. From **View**, open **Solution Explorer**.

          :::image type="content" source="~/assets/images/Teams-task-module/solutionexplorer_1.png" alt-text="Screenshot shows the open solution explorer.":::

       1. Press **F5** to run the project.
    
       1. Select **Yes** if the following dialog appears:

          :::image type="content" source="~/assets/images/Teams-task-module/certificate_1.png" alt-text="Trust Certificate":::

          A webpage opens with a message **. Your bot is ready!**.

          :::image type="content" source="~/assets/images/Teams-task-module/appisready.png" alt-text="App ready"::: 

        
    # [Command line](#tab/cli)

    Go to **Microsoft-Teams-Samples** > **samples** > **bot-task-module** > **csharp** in Command Prompt window and enter the following command:

    ```bash
    dotnet run
    ```
   
    :::image type="content" source="~/assets/images/Teams-task-module/dotnetrun.png" alt-text="Screenshot shows the command prompt of dotnet run."::: 

- title: Upload Task Module app
  durationInMinutes: 1
  content: |
    1. In your cloned repository, go to **samples** > **bot-task-module** > **csharp** > **TeamsAppManifest**.

    1. Create a .zip file with the following files that are present in the **TeamsAppManifest** folder: 
       * manifest.json
       * icon-outline.png
       * icon-color.png

       :::image type="content" source="~/assets/images/Teams-task-module/manifest-file-zip.png" alt-text="Zip file"::: 

    1. In the Teams client, select the **Apps** icon.
    1. Select **Manage your apps**.
    1. Select **Upload an app**
    1. Look for the option to **Upload a custom app**. If you see the option, sideloading apps is enabled.

       :::image type="content" source="~/assets/images/Teams-task-module/custom-upload.png" alt-text="Screenshot showing the selection of Upload a custom app highlighted in red.":::
       
    1. Select the .zip file you've created in the **TeamsAppManifest** folder and select **Open**.

       :::image type="content" source="~/assets/images/Teams-task-module/upload-manifest-zip.png" alt-text="Select zip file":::

    1. Select **Add**.

       :::image type="content" source="~/assets/images/Teams-task-module/add-app-card.png" alt-text="Add the app":::
   
    1. In the compose message area, type **hi** and bot sends an Adaptive card. 

       :::image type="content" source="~/assets/images/Teams-task-module/chat_ready_1.png" alt-text="Chat":::
    
       The app displays **Task Module Invocation from Hero Card** and **Task Module Invocation from Adaptive Card**.         

- title: Interact with the app in Teams
  durationInMinutes: 1
  content: |
    1. Select **Adaptive Card** from **Task Module Invocation from Hero Card** or **Task Module Invocation from Adaptive Card**.

       :::image type="content" source="~/assets/images/Teams-task-module/adaptive-card_1.png" alt-text="Adaptive card":::

    1. Enter Hello and select **Submit**.

       :::image type="content" source="~/assets/images/Teams-task-module/adaptive-card-text.png" alt-text="Screenshot shows Adaptive card message box.":::

       **Adaptive Card** sends an acknowledgment message.
       
       :::image type="content" source="~/assets/images/Teams-task-module/adaptive-card-submit.png" alt-text="Screenshot shows the Adaptive card sends an acknowledgment message.":::

    1. Select **Custom Form** from **Task Module Invocation from Hero Card** or **Task Module Invocation from Adaptive Card**.

       :::image type="content" source="~/assets/images/Teams-task-module/custom-form_1.png" alt-text="Custom form":::

    1. Enter the required information:

       * **Name**
       * **Email**
       * **Favorite book**
       * **Password**
       * **Confirm Password**

    1. Select **Sign up**.

       :::image type="content" source="~/assets/images/Teams-task-module/custom-text.png" alt-text="Custom Form text":::

       **Custom Form** sends an acknowledgment message.

       :::image type="content" source="~/assets/images/Teams-task-module/custom-on-sign-up.png" alt-text="Sign up":::

       The following information appears in chat:

       :::image type="content" source="~/assets/images/Teams-task-module/adaptive-custom-chat.png" alt-text="Chat":::

    1. Select **YouTube** from **Task Module Invocation from Hero Card** or **Task Module Invocation from Adaptive Card**.

       :::image type="content" source="~/assets/images/Teams-task-module/youtube_1.png" alt-text="YouTube":::

    1. Select **Play**.

       :::image type="content" source="~/assets/images/Teams-task-module/youtube-select_1.png" alt-text="YouTube select":::

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

       :::image type="content" source="./assets/images/Teams-task-module/final-image.png" alt-text="Screenshot shows the final output of the Task module.":::

- content: |
    You've completed the tutorial to get started with Teams task module app!

