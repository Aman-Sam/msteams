### YamlMime:Tutorial
title: Invoke task modules from Microsoft Teams
metadata:
  title: Invoke task modules from Microsoft Teams
  description: With this learning module, learn how to set up Teams task module by using Adaptive Cards or Bot Framework cards.
  audience: Developer
  level: Beginner
  ms.date: 23/02/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: task-modules-and-cards/task-modules/task-modules-bots.md
  nextTutorialTitle: Read more on task modules from bots
  ms.custom: mvc
  ms.localizationpriority: High
items:
- durationInMinutes: 1
  content: |
    You can invoke task modules from Teams bots by using Adaptive Cards or Bot Framework cards.

    **Key features of task modules**

    * Enhance user experience by avoiding multiple steps.
    * Help users to keep track of the bot state.
    * Retrieve input from user and display custom web page content.

    This step-by-step guide helps you to create a sample Azure bot to invoke Teams task module. You'll see the following output:

     :::image type="content" source="~/assets/images/Teams-task-module/final_image.png" alt-text="Screenshot describes how to create a sample azure bot to invoke Teams task module.":::
     
- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure you install the following tools and set up your development environment: 
    
    * [Microsoft Teams](https://teams.microsoft.com/) with valid account
    * [.NET Core SDK](https://dotnet.microsoft.com/download) version 3.1
    * [Latest version of Microsoft Visual Studio](https://visualstudio.microsoft.com/downloads/)
    * [ngrok](https://ngrok.com/download) latest version or any equivalent tunneling solution

      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).

    

- title: Set up local environment
  durationInMinutes: 1
  content: |
   Clone `BotBuilder-Samples` repository to your local GitHub:  

    1. Open [BotBuilder Samples](https://github.com/microsoft/BotBuilder-Samples).
    1. Select **Code**.
    1. From the dropdown menu, select **Open with GitHub Desktop**.

       :::image type="content" source="~/assets/images/Teams-task-module/clonerepository.png" alt-text="Screenshot displays the clone repository.":::
       
    1. Select **Clone**. 

- title: Create and register your bot in Azure AD portal
  durationInMinutes: 5
  content: |
    To create and register your bot in Microsoft Azure Active Directory (Azure AD), create a tunnel using ngrok, and add messaging endpoint, perform the following steps:

    * Create Azure Bot resource to register bot with Azure Bot Service.
    * Create client secret to enable SSO authentication of the bot.
    * Add Teams channel to deploy the bot to a Teams channel.
    * Use ngrok to create a tunnel to your web server's endpoints.
    * Add messaging endpoint to the ngrok tunnel you created.

    **To create Azure Bot resource**

    1. Go to the [Microsoft Azure portal](https://portal.azure.com/).
    1. Select **Create a resource**.
    1. In the search box, enter **Azure Bot**.
    1. Select **Enter**.
    1. Select **Azure Bot**.

         :::image type="content" source="./assets/images/azure-bot.png" alt-text="SCreenshot displays the Azure bot.":::

    1. Select **Create**.
    1. Enter required bot handle name in **Bot handle**.
    1. Select your **Subscription** from the dropdown list.
    1. Select your **Resource group** from the dropdown list. 
    
        :::image type="content" source="~/assets/images/Teams-task-module/review-plus-create.png" alt-text="Screenshot describes how to select resource azure bot.":::
            
       You can also create a new resource group (select **Create new** > enter resource name > select **OK**).
    
    1. If you've created a new resource group, select the required location from **New resource group location** dropdown list.

        :::image type="content" source="~/assets/images/bots/newresource.png" alt-text="Screenshot displays the new resource group location.":::
        
    1. In the **Microsoft App ID** section, by default **Create new Microsoft App ID** is selected. 
    
       You can either select **Use existing app registration** and enter **Existing app ID** and **Existing app password**, or select **Create new Microsoft App ID**.

       > [!NOTE]
       > You can't create more than one bot with the same **Microsoft App ID**.

    1. Select **MultiTenant** under Bot Type.

        :::image type="content" source="~/assets/images/Teams-task-module/config.png" alt-text="Screenshot displays the Microsoft App ID.":::
        
    1. Select **Review + create**.

        :::image type="content" source="~/assets/images/meeting-token-generator/meeting-token-generator-appidcreate.png" alt-text="Screenshot describes how to create Microsoft App ID.":::
        
    1. If the validation passes, select **Create**. 

        It takes a few moments for your bot service to be provisioned. 

    1. Select **Go to resource**. 

        :::image type="content" source="~/assets/images/Teams-task-module/botdeployment.png" alt-text="Screenshot describes how to deploy app.":::
        
        Your Azure bot is created.

        :::image type="content" source="~/assets/images/Teams-task-module/bot-page.png" alt-text="Screenshot displays Azure bot resource created message.":::
        
    **To create client secret**

      Perform the following steps if you've created a new **Microsoft App ID**:

    1. In the left panel, select **Configuration**. 

       > [!TIP]
       > Save the **Microsoft App ID** or **Client ID** for future reference.

    1. Next to **Microsoft App ID**, select **Manage**.

    1. In the **Client secrets** section, select **New client secret**. 

        :::image type="content" source="~/assets/images/meetings-side-panel/newclientsecret.png" alt-text="Screenshot displays the new client secret.":::
            
       The **Add a client secret** window appears.  

    1. Enter **Description**.
    
    1. Select **Add**.

        :::image type="content" source="~/assets/images/Teams-task-module/clientsecret.png" alt-text="Screenshot describes how to add client secret to the app.":::
        
    1. In the **Value** column, select **Copy to clipboard**.

         :::image type="content" source="~/assets/images/Teams-task-module/clientvalue.png" alt-text="Screenshot displays the value of client secret.":::
         
       > [!TIP]
       > Save the **Client secrets** value or app password for future reference.

    **To add the Teams channel**

    1. Select **Home**.

        :::image type="content" source="~/assets/images/Teams-task-module/gotohome.png" alt-text="Screenshot displays the home page.":::
        
    1. Select your bot from **Recent resources**.

    1. Select **Channels** in the left pane and select **Microsoft Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>.

         :::image type="content" source="~/assets/images/adaptive-cards/channel-teams.png" alt-text="Screenshot describes how to select Teams in channels.":::
         
    1. Select the checkbox to accept the **Terms of Service**.
    
    1. Select **Agree**.

          :::image type="content" source="~/assets/images/meetings-side-panel/terms.png" alt-text="Screenshot displays the Terms of service.":::
          
    1. Select **Save**.

          :::image type="content" source="~/assets/images/Teams-task-module/configteams.png" alt-text="Screenshot describes how to select Teams.":::
              
    **To create tunnel for local web server**

    Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

     ```bash
     ngrok http --host-header=rewrite 3978
     ```

    > [!TIP]
    > If you encounter **ERR_NGROK_4018**, follow the steps provided in the command prompt to sign-up and authenticate ngrok. Then run the `ngrok http --host-header=localhost 3978` command.

    **To add messaging endpoint**

    1. From ngrok, copy the HTTPS URL (https to io).

       :::image type="content" source="../msteams-platform/assets/images/ngrok-url.png" alt-text="Screenshot displays the ngrok HTTPS URL.":::

        > [!NOTE]
        > The HTTPS URL in your ngrok is your fully qualified domain name.
        > The `WebAppDomain` is a fully qualified domain name that doesn't include `https://` in it.

    1. In **Settings** for the Azure bot that you created, select **Configuration**.

    1. In **Messaging endpoint**, use the HTTPS URL available from ngrok and at the end of the URL add **/api/messages**.

        :::image type="content" source="~/assets/images/Teams-task-module/messaging-endpoint.png" alt-text="Screenshot displays the messaging endpoint.":::
        
    1. Select **Apply**.

        You have successfully set up a bot in Azure Bot Service.

- title: Update the Azure AD app registration
  durationInMinutes: 1
  content: |
    1. Go to the [Azure portal](https://portal.azure.com/).

    1. Select **Azure Active Directory**.

    1. In the left navigation panel, select **App Registrations**.

    1. Select your bot.

       :::image type="content" source="~/assets/images/Teams-task-module/appregister.png" alt-text="Screenshot displays the app registration.":::
       
    1. Select **Manage**.
    
    1. In the left panel, select **Expose** **an API**.

    1. Select **Set**.

       :::image type="content" source="~/assets/images/Teams-task-module/exposeanapi.png" alt-text="Screenshot describes how to expose an API.":::
       
    1. Set the **Application ID URI** in the form of `api://{AppID}`.

       :::image type="content" source="~/assets/images/Teams-task-module/setlink.png" alt-text="Screenshot describes how to set link.":::
       
    1. Insert the `WebAppDomain` value between `api://` and `/{AppID}`.</br>
        `api://d4b8****.ngrok.io/{AppID}`</br>
        
       The following image shows the domain name:
        
        :::image type="content" source="~/assets/images/Teams-task-module/appIDuri.png" alt-text="Screenshot displays the App ID URI.":::
        
        > [!NOTE]
        > If you're using a tunneling service such as ngrok, ensure you update the value whenever your ngrok subdomain changes.
        > `For example: api://f631****.ngrok.io/92c11075-c629-4a1e-ab58-02b4fd4204c2`, where `f631****.ngrok.io` is the new ngrok subdomain name.

    1. Select **Add a scope**. 

       :::image type="content" source="~/assets/images/meetings-side-panel/selectscope.png" alt-text="Screenshot describes how to select scope.":::
           
    1. In the panel that appears, enter `access_as_user` as the **Scope name**.
  
    1. Set **Who can consent?** to `Admins and users`.
  
    1. To configure the admin and user consent prompts with appropriate values for `access_as_user` scope, provide the following information in the fields:</br>
    
         * Enter `Teams can access the user’s profile` as **Admin consent display name**.

         * Enter `Allows Teams to call the app’s web APIs as the current user` as **Admin consent description**.

         * Enter `Teams can access the user profile and make requests on the user’s behalf` as **User consent display name**.

         * Enter `Enable Teams to call this app’s APIs with the same rights as the user` as **User consent description**.
  
    1. Ensure that **State** is set to **Enabled**.
  
    1. Select **Add scope** to save.

        :::image type="content" source="~/assets/images/Teams-task-module/addascope.png" alt-text="Screenshot describes how to add a scope.":::
        
        > [!NOTE]
        > The **Scope name** should match with the **Application ID** URI with `/access_as_user` appended at the end.</br>
           `api://d4b8****.ngrok.io/00000000-0000-0000-0000-000000000000/access_as_user`

        :::image type="content" source="~/assets/images/Teams-task-module/scopes.png" alt-text="Screenshot displays scopes.":::
          
    1. In the **Authorized client applications** section, identify the applications that you want to authorize for your app’s web application. 
    
    1. Select **Add a client application**. 

        :::image type="content" source="~/assets/images/meetings-side-panel/selectclientapp.png" alt-text="Screenshot describes how to select client application.":::
        
    1. Enter **Client ID**: `1fec8e78-bce4-4aaf-ab1b-5451cc387264` for Teams mobile or desktop application. 

        :::image type="content" source="~/assets/images/meetings-side-panel/addclientapplication1.png" alt-text="Screenshot displays the client id for Teams mobile or desktop application.":::
        
       Enter **Client ID**: `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` for Teams web application.

        :::image type="content" source="~/assets/images/meetings-side-panel/addclientapplication2.png" alt-text="Screenshot displays the client id for Teams web application.":::
        
    1. Select **Authorized scopes**.

        :::image type="content" source="~/assets/images/Teams-task-module/authorizedscope.png" alt-text="Screenshot displays the authorized scopes.":::
        
       The following image displays the client IDs:

        :::image type="content" source="~/assets/images/meetings-side-panel/clientapps.png" alt-text="Screenshot displays the client applications.":::
        
    1. In the left panel, select **API Permissions**. 

       > [!NOTE]
       > Users need to consent to the API permissions only if the Azure AD app is registered in a different tenant.

    1. Select **Add a permission**.

        :::image type="content" source="~/assets/images/meetings-side-panel/addpermission.png" alt-text="Screenshot describes how to add permission.":::
        
    1. Select **Microsoft Graph**.

    1. Select **Delegated permissions**.

    1. Select the following permissions:</br>
         * **email**
         * **offline_access**
         * **OpenId**
         * **profile**
          * **User.Read**

    1. Select **Add permissions**.

         :::image type="content" source="~/assets/images/meetings-side-panel/other-permissions.png" alt-text="Screenshot displays other permissions.":::
         
    1. From the left panel, select **Authentication** to set a redirect URI. 

       > [!NOTE]
       > If an app isn't granted IT admin consent, users must provide consent the first time they use an app.
               
         1. Select **Add a platform**.
         1. Select **Web**.

            :::image type="content" source="~/assets/images/Teams-task-module/webauth.png" alt-text="Screenshot displays the web.":::
            
         1. Enter the redirect URI for your app by appending `auth-end` to fully qualified domain name:</br> 
           `https://d4b8****.ngrok.io/auth-end`. </br>

         1. Enable **Implicit grant and hybrid flows** by selecting the following checkboxes:
             * **ID tokens**
             * **Access tokens**
   
         1. Select **Configure**.

            :::image type="content" source="~/assets/images/Teams-task-module/authend.png" alt-text="Screenshot displays the Auth-end.":::
            
- title: Set up app settings and manifest files
  durationInMinutes: 1
  content: |
    1. Navigate to **appsettings.json** in cloned repository.

        :::image type="content" source="~/assets/images/Teams-task-module/appsettingslocation.png" alt-text="Screenshot displays the app settings location.":::
        
    1. Open **appsettings.json** in latest version of Visual Studio and update the following information:  

         * Set `"MicrosoftAppType"` to **MultiTenant**.
         * Set `"MicrosoftAppId"` to your bot's **Microsoft App ID**.
         * Set `"MicrosoftAppPassword"` to **Value** of **Client secret**.
         * Set `"MicrosoftAppTenantId"` to the tenant ID of the tenant where the app is used.
         * Set `"BaseUrl"` to the fully qualified domain name (https to io).

        :::image type="content" source="~/assets/images/Teams-task-module/appsettings.png" alt-text="Screenshot displays the app settings.":::
        
    1. Navigate to `manifest.json`` in cloned repository.

        :::image type="content" source="~/assets/images/Teams-task-module/manifestlocation.png" alt-text="Screenshot displays the manifest file location.":::
            
    1. Open `manifest.json`` in latest version of Visual Studio and make the following changes:

         * Replace all occurrences of `YourDeployedBotUrl.com` with your `WebAppDomain` name.
         * Replace all occurrences of `<<YOUR-MICROSOFT-APP-ID>>` with your bot's **Microsoft App ID**.

        :::image type="content" source="~/assets/images/Teams-task-module/manifest.png" alt-text="Screenshot displays the manifest image.":::
        
- title: Build and run the service
  durationInMinutes: 1
  content: |
    **To build and run the service using latest version of Visual Studio or Command line**

    # [Latest version of Visual Studio](#tab/latestversionofvisualstudio)

       1. Launch the latest version of Visual Studio.
       1. Navigate to **File** > **Open** > **Project/Solution**.
    
          :::image type="content" source="~/assets/images/meeting-token-generator/meeting-token-generator-VSopenfile.png" alt-text="Screenshot describes how to launch the latest version of Visual Studio.":::
          
       1. Select **TeamsTaskModule.csproj** file from **54.teams-task-module** folder.

          :::image type="content" source="~/assets/images/Teams-task-module/csprojfileopen.png" alt-text="Screenshot displays the CS project file.":::
          
       1. Open **Solution Explorer** from **View**.

          :::image type="content" source="~/assets/images/Teams-task-module/solutionexplorer.png" alt-text="Screenshot displays the Solution Explorer.":::
          
       1. Right-click to select **TeamsTaskModule**.

       1. Select **Set as Startup Project**.

          :::image type="content" source="~/assets/images/Teams-task-module/startup.png" alt-text="Screenshot displays the startup project.":::
          
       1. Press **F5** to run the project.
    
       1. Select **Yes** if the following dialog appears:

          :::image type="content" source="~/assets/images/sbs-messagingextension-action/certificate.png" alt-text="Screenshot displays the Trust Certificate.":::
          
          A webpage opens with a message **Your bot is ready!**.

          :::image type="content" source="~/assets/images/Teams-task-module/appisready.png" alt-text="Screenshot displays the app ready message.":::

                  
    # [Command line](#tab/cli)

    Navigate to **BotBuilder-Samples > samples > csharp_dotnetcore > 54.teams-task-module** in Command Prompt window and enter the following command:

    ```bash
    dotnet run
    ```
   
    :::image type="content" source="~/assets/images/Teams-task-module/dotnetruncmd.png" alt-text="Screenshot displays the Dotnet.":::

    
- title: Upload Task Module app
  durationInMinutes: 1
  content: |
    1. In your cloned repository, navigate to **csharp_dotnetcore > 54.teams-task-module > TeamsAppManifest**.

    1. Create a .zip with the following files that are present in the **TeamsAppManifest** folder: 
       * manifest.json
       * icon-outline.png
       * icon-color.png

       :::image type="content" source="~/assets/images/Teams-task-module/zip-file.png" alt-text="Screenshot describes how to create a zip file.":::
       
    1. Go to **Microsoft Teams**.

    1. Select **Apps**.

       :::image type="content" source="~/assets/images/Teams-Messaging-Extensions-Search/AppStore.png" alt-text="Screenshot describes how to select apps.":::
          
    1. In the lower left corner, select **Manage your apps**.

       :::image type="content" source="~/assets/images/Teams-task-module/manage-apps.png" alt-text="Screenshot displays the Manage apps.":::
       
    1. Select **Upload an app to your org's app catalog**. 

       :::image type="content" source="~/assets/images/Teams-task-module/upload-app.png" alt-text="Screenshot describes how to upload custom app.":::
       
    1. Select **Open** to upload the .zip file that you created in the **TeamsAppManifest** folder.

       :::image type="content" source="~/assets/images/Teams-task-module/select-zip.png" alt-text="Screenshot describes how to select zip file.":::
       
    1. Select **Add**.

       :::image type="content" source="~/assets/images/Teams-task-module/add-app.png" alt-text="Screenshot describes how to add the app.":::
       
       The app opens in a chat.
   
    1. Enter any text and select Enter. 

       :::image type="content" source="~/assets/images/Teams-task-module/chat_ready.png" alt-text="Screenshot displays the chat.":::
           
       The app displays **Task Module Invocation from Hero Card** and **Task Module Invocation from Adaptive Card**.         

- title: Interact with the app in Teams
  durationInMinutes: 1
  content: |
    1. Select **Adaptive Card** from **Task Module Invocation from Hero Card** or **Task Module Invocation from Adaptive Card**.

       :::image type="content" source="~/assets/images/Teams-task-module/adaptive-card.png" alt-text="Screenshot displays the adaptive card.":::
       
    1. Enter any text.

    1. Select **Submit**.

       :::image type="content" source="~/assets/images/Teams-task-module/adaptive-card-text.png" alt-text="Screenshot displays the adaptive card text.":::
       
       **Adaptive Card** sends an acknowledgment message.

       :::image type="content" source="~/assets/images/Teams-task-module/adaptive-card-submit.png" alt-text="Screenshot displays the acknowledgement for adaptive card.":::
       
    1. Select **Custom Form** from **Task Module Invocation from Hero Card** or **Task Module Invocation from Adaptive Card**.

       :::image type="content" source="~/assets/images/Teams-task-module/custom-form.png" alt-text="Screenshot displays the custom form.":::
       
    1. Enter the required information:

       * **Name**
       * **Email**
       * **Favorite book**
       * **Password**
       * **Confirm Password**

    1. Select **Sign up**.

       :::image type="content" source="~/assets/images/Teams-task-module/custom-text.png" alt-text="Screenshot displays the custom form text.":::
       
       **Custom Form** sends an acknowledgment message.

       :::image type="content" source="~/assets/images/Teams-task-module/custom-on-sign-up.png" alt-text="Screenshot displays the acknowledgment message for custom form.":::
       
       The following information appears in chat:

       :::image type="content" source="~/assets/images/Teams-task-module/adaptive-custom-chat.png" alt-text="Screenshot displays the chat.":::
       
    1. Select **You Tube** from **Task Module Invocation from Hero Card** or **Task Module Invocation from Adaptive Card**.

       :::image type="content" source="~/assets/images/Teams-task-module/youtube.png" alt-text="Screenshot displays the YouTube.":::
       
    1. Select **Play**.

       :::image type="content" source="~/assets/images/Teams-task-module/youtube-select.png" alt-text="Screenshot describes how to select the YouTube.":::
       
       The video plays.

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

       :::image type="content" source="~/assets/images/Teams-task-module/final_image.png" alt-text="Screenshot displays the task module.":::
       
- content: |
    You've completed the tutorial to get started with Teams task module app!