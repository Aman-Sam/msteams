### YamlMime:Tutorial
title: Teams calling and meeting bot
metadata:
  title: Teams bot with calling and meeting
  description: With this learning module, learn how to set up calling and meeting functionality in a bot for Teams.
  audience: Developer
  level: Beginner
  ms.date: 02/08/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/calls-and-meetings/registering-calling-bot.md
  nextTutorialTitle: Register a calling bot
  ms.custom: mvc
  ms.localizationpriority: null
items:
- durationInMinutes: 1
  content: |
    Microsoft Teams calling and meeting bot provides basic functionalities such as create a call, join a call, transfer or redirect a call, join a scheduled meeting, and invite the participants by integrating the cloud communications Graph API.
    
    Bots can interact with Teams calls and meetings using real time voice, video, and screen sharing. With Microsoft Graph APIs for calls and online meetings, Teams apps can interact with users using voice and video to enhance their experience. These APIs allow you to add the following new features:

    * Use Interactive Voice Response (IVR).
    * Use call control.
    * Provide access to real time audio and video streams, including desktop and app sharing.

    Create a bot and specify additional information and permissions to use these Graph APIs in a Teams app.
 
    This step-by-step guide helps you to set up Teams calling and meeting bot. You can see the following output after you've completed this guide:

    :::image type="content" source="./assets/images/calls-and-meetings/final-output.png" alt-text="Screenshot of calling and meeting bot output after you've successfully completed the step-by-step guide.":::

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure that you install the following tools and set up your development environment:

     | &nbsp; | Install | For using... |
     | --- | --- | --- |
     | &nbsp; | [Microsoft 365 developer account](/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | Access to Teams account with the appropriate permissions to install an app. |
     | &nbsp; | [Visual Studio 2022](https://visualstudio.microsoft.com) | You can install the enterprise version in Visual Studio 2022, and install the ASP.NET and web development workloads. Use the latest version. |
     | &nbsp; | [.NET Core SDK](https://dotnet.microsoft.com/en-us/download) | Customized bindings for local debugging and Azure Functions app deployments. Use the latest version or install the portable version. |
     | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, and call-all in one place.|
     | &nbsp; | [Windows PowerShell](/microsoftteams/teams-powershell-install) | Install by executing all the commands. |
     | &nbsp; | Dev tunnel | Teams app features (conversational bots, message extensions, and incoming webhooks) need inbound connections. A tunnel connects your development system to Teams. Dev tunnel is a powerful tool to securely open your localhost to the internet and control who has access. Dev tunnel is available in Visual Studio 2022 version 17.7.0 or later. <br> Or </br> You can also use [ngrok](https://ngrok.com/download) as a tunnel to connect your development system to Teams. It isn't required for apps that only include tabs. This package is installed within the project directory (using npm devDependencies). |

     > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).
- title: Set up local environment
  durationInMinutes: 1
  content: | 

   [!INCLUDE [Set up local environment](includes/get-started/clone-repository.md)]

- title: Register Microsoft Entra app
  durationInMinutes: 5
  content: |
    Register an application using app registration in the Microsoft Azure portal for your app to integrate with the Microsoft identity platform and call Microsoft Graph API. Following are the steps:

    1. Create a ngrok tunnel to the endpoints of your web server.
    1. Create Azure bot resource to register bot with Azure bot service.
    1. Create client secret that enables single sign-on (SSO) authentication of the bot.
    1. Create a policy for a demo tenant user for creating online meetings using PowerShell.
    1. Add API permissions for downstream calls.
    1. Create bot channel registration in Azure account.
    1. Add Microsoft Teams channel to deploy the bot to a Teams channel.
    1. Add messaging endpoint to the ngrok tunnel you created.


    [!INCLUDE [Azure app registration](includes/get-started/azure-app-registration.md)]

    **Create a tunnel**

      # [dev tunnel](#tab/dev)

      [!INCLUDE [Tunnel](includes/get-started/dev-tunnel.md)]

      # [ngrok](#tab/ngrok)
      
      [!INCLUDE [Tunnel](includes/get-started/ngrok-tunnel.md)]

      ---     

    [!INCLUDE [Azure web authentication](includes/get-started/azure-web-authentication.md)]
    
    [!INCLUDE [Client secret](includes/get-started/create-client-secret.md)]

    [!INCLUDE [API Permission](includes/get-started/azure-api-permissions.md)]

    **Add API permissions for downstream calls**

    > [!NOTE]
    > Ensure that your account can grant admin consent for Microsoft. After adding permissions, select `Grant admin consent for Microsoft` to know the status of the consent.

    1. In **Manage** pane of your bot, select **API permissions**.
    1. Select **Add a permission**. **Request API permissions** window appears.
    1. Select **Microsoft APIs** > **Microsoft Graph**.
    1. Select **Application permissions**.
    1. In **Select permissions**, add the following Graph API applications permissions to your Azure App and grant admin consent:
        * `Calls.AccessMedia.All`
        * `Calls.Initiate.All`
        * `Calls.InitiateGroupCall.All`
        * `Calls.JoinGroupCall.All`
        * `Calls.JoinGroupCallAsGuest.All`
        * `OnlineMeetings.ReadWrite.All`
    1. Select **Add permissions**.

         :::image type="content" source="./assets/images/calls-and-meetings/api-permissions_1.png" alt-text="Screenshot of Calling-Meeting-Bot API permissions with Manage, API permissions, Add a permission, Microsoft Graph, Application permissions, and Add permissions highlighted in red." lightbox="./assets/images/calls-and-meetings/api-permissions_1.png":::


    [!INCLUDE [Azure add scope](includes/get-started/azure-add-scope.md)]

    [!INCLUDE [Azure client application](includes/get-started/azure-client-application.md)]

    **Create a policy for a demo tenant user to create online meetings using the following PowerShell script**:

    1. Run Windows PowerShell PSI as an administrator and execute the script.

        ```PowerShell
        New-CsApplicationAccessPolicy -Identity "<<policy-identity/policy-name>>" -AppIds "<<azure-client-id>>" -Description "Policy-description"
        Grant-CsApplicationAccessPolicy -PolicyName "<<policy-identity/policy-name>>" -Identity "<<object-id-of-the-user-to-whom-policy-need-to-be-granted>>"
        ```
     
        > [!NOTE]
        > If you are using the Windows PowerShell PSI for the first time, execute the following commands:
        >   * Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser
        >   * Run Install-Module -Name MicrosoftTeams -Force -AllowClobber 

     1. Replace the following in **Windows PowerShell** script:

        |Field | Description |
        |----------------|-----------------|
        |policy-identity/policy-name | Name of the policy. |
        |azure-client-id | Microsoft App ID, which you generated while registering the app in Azure portal. |
        |Policy-description | Description of the policy. |
        |object-id-of-the-user-to-whom-policy-need-to-be-granted |  ID of the user for whom you need to generate the policy using the graph explorer. |

     1. To generate object ID, sign in to [Microsoft Graph Explorer](https://developer.microsoft.com/graph) using the credentials to whom the policy must be granted.
     1. Select **Graph Explorer** from the tool bar.

         :::image type="content" source="~/assets/images/calls-and-meetings/graph-explorer.png" alt-text="Screenshot of Microsoft Graph with graph explorer highlighted in red.":::

     1. Select **Run query**. A response is generated under **Response preview**.
     1. Copy the value of the `id` property from the **Response preview** and replace with the object ID in the PowerShell script.

         :::image type="content" source="~/assets/images/calls-and-meetings/graph-explorer-id.png" alt-text="Screenshot of graph explorer displaying the response preview." lightbox="~/assets/images/calls-and-meetings/graph-explorer-run-query.png":::
       
     1. Execute the PowerShell script. 
     
     1. Run `Connect-MicrosoftTeams` and sign in with the credentials to whom the policy has to be granted.

         :::image type="content" source="~/assets/images/calls-and-meetings/sign-in-powershell-prompts.png" alt-text="screenshot of Windows PowerShell PSI displaying the sign in prompt.":::

     1. Run the following command in PowerShell to verify whether the policy is created successfully or not. Replace the policy name with your defined policy name.

        ```PowerShell
        Get-CsApplicationAccessPolicy -Identity “<<policy-identity/policy-name>>”
        ```

         :::image type="content" source="~/assets/images/calls-and-meetings/powershell-id.png" alt-text="Screenshot of Windows PowerShell ISE with Account details highlighted in red." lightbox="~/assets/images/calls-and-meetings/powershell-tenant-id.png":::

    > [!NOTE]
    > Ensure running scripts aren't disabled in your system. For more information, see [execution policies](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.2).

- title: Create your bot 
  durationInMinutes: 1
  content: |


    [!INCLUDE [Azure bot resource](includes/get-started/azure-bot-resource.md)]    

    [!INCLUDE [Teams channel](includes/get-started/add-teams-channel.md)]

    [!INCLUDE [Messaging endpoint](includes/get-started/messaging-endpoint.md)]

- title: Set up app settings and manifest files
  durationInMinutes: 1
  content: |
    Configure the bot sample to understand how to authenticate conversational bot in Microsoft Teams, create the Teams app package, and upload it to the organization.
    
    1. Update the appsettings.json file in Visual Studio.
    1. Update teh manifest.json file in Visual Studio and compress it to the zip file in File Explorer.

    1. In the **File Explorer**, go to **Microsoft-Teams-Samples-main** > **samples** > **bot-calling-meeting** > **csharp** folder.
    1. Open the **appsettings.json** file in Visual Studio and update configuration for the bot.

        * Get the `MicrosoftAppId` from the bot's configuration page. The `MicrosoftAppPassword` is the value for client secret ID that you saved previously.
        * Get the `tenantId` or `UserId` from Teams. To get the `tenantId`, follow these steps:
          
           1. Select **Teams**.

           1. Select More options (...).

           1. Select **Get link to team**.

             :::image type="content" source="./assets/images/calls-and-meetings/teams-final.png" alt-text="Screenshot of Teams with Get link to Team under overflow menu highlighted in red.":::
        
           1. You can obtain the `displayName` and `id` from  site:

           1. Sign in to [Microsoft Graph Explorer](https://developer.microsoft.com/graph/graph-explorer) using your Teams tenant account.

           1. Add `Users` at the end of the URl in the search box.

           1. Select **Run query**.
            
             :::image type="content" source="./assets/images/calls-and-meetings/graph-explorer_1.png" alt-text="Screenshot of Microsoft Graph with users in the URI highlighted in red.":::

              The display names and user IDs linked to your account are generated. 
              
           1. Select any three accounts and add them to the `DisplayName` and `UserId` in the appsettings.json file.
       
              :::image type="content" source="./assets/images/calls-and-meetings/graph-explorer_2.png" alt-text="Screenshot of Tenant Contoso with `displayName` and `id` highlighted in red." lightbox="./assets/images/calls-and-meetings/graph-explorer_2.png":::
       
            > [!NOTE]
            > `TenantId` or `UserId` of the Teams account denotes from where you want to initiate the call, and `DisplayName` and `UserId` of the users denote to whom you want to redirect or transfer the call.

    1. Replace `MicrosoftAppId`, `ClientId`, and `AppId` with Microsoft App ID and `MicrosoftAppPassword`, `ClientSecret`, and `AppSecret` with **Value**.
    1. Replace `BotBaseUrl` with `ngrok` URL.
    1. Replace `TenantId` with `UserId`.
    1. Replace `DisplayName` with `Id`.

        :::image type="content" source="./assets/images/calls-and-meetings/appsettings_1.png" alt-text="Screenshot of Appsettings.json displaying the details of appsettings.":::

    1. Select **Save**.

    **To update manifest**

    1. In the **File Explorer**, go to **Microsoft-Teams-Samples-main** > **samples** > **bot-calling-meeting** > **csharp** > **Manifest** folder.
    1. Open the `manifest.json` file in Visual Studio.
    1. In the `manifest.json` file, replace {id} and {BotId} with your Microsoft App ID.
    1. Add ngrok url in **validDomains** excluding https://.

        :::image type="content" source="./assets/images/calls-and-meetings/manifest_1.png" alt-text="Screenshot of manifest displaying the details of manifest." lightbox= "./assets/images/calls-and-meetings/app_manifest.png" :::

    1. Zip the contents of the **Manifest** folder to create `manifest.zip`.
    
        > [!NOTE]
        > The `manifest.zip` must not contain any extra folders in it. It must have `manifest json` source file, `color` icon, and `outline` icon inside the zip folder.
        
    1. Run the calling and meeting bot solution in Visual Studio.

    1. In the **File Explorer**, go to **Microsoft-Teams-Samples** > **samples** > **bot-calling-meeting** > **csharp** > **Source** > **CallingBotSample.sln**.

    1. Open the **CallingBotSample.sln** file in Visual Studio.    

    1. Press **F5** to run the project.

       A webpage opens with a message **Your bot is ready!**.

       :::image type="content" source="~/assets/images/calls-and-meetings/bot-is-ready.png" alt-text="Screenshot of localhost displaying your bot is ready." lightbox="~/assets/images/calls-and-meetings/your-bot-is-ready.png":::
    
    1. In the Teams client, select the **Apps** icon.
    
    1. Select **Manage your apps**.

    1. Select **Upload an app**.
   
    1. Look for the option to **Upload a custom app**. If you see the option, custom app upload is enabled. 

       :::image type="content" source="~/assets/images/custom-app-upload.PNG" alt-text="Screenshot showing the selection of Upload a custom app.":::

    1. Open `manifest.zip` from the repository folder in File Explorer.

    1. Select **Add** to install the **Calling bot** app in Teams.

        :::image type="content" source="./assets/images/calls-and-meetings/calling-bot-add.png" alt-text="Screenshot of Calling bot with Add option highlighted in red.":::

        You can interact with this bot after debugging in Visual Studio.

- title: Interact with calling and meeting bot
  durationInMinutes: 2
  content: |
    Bot allows you to access services and content in a dedicated space within a channel or in a chat.

    Following steps describes how to use the bot:

    1. In the left pane of the Teams, select More added apps (...) and select your app from the list.
    1. Bot sends welcome text with Adaptive Card.

        :::image type="content" source="./assets/images/calls-and-meetings/bot-with-adaptive-card.png" alt-text="Screenshot of Calling bot displaying welcome text.":::

    1. Select **Create Call**. 

        :::image type="content" source="./assets/images/calls-and-meetings/placed-call.png" alt-text="Screenshot of Microsoft Teams Calling bot with Create Call option highlighted in red. The minimized calling screen appears in the lower-right corner of the screen.":::

    1. Select **Transfer Call**.

        :::image type="content" source="./assets/images/calls-and-meetings/transfer-call.png" alt-text="Screenshot of Microsoft Teams Calling bot with Transfer Call highlighted in red.":::

    1. You can ask bot to schedule a meeting and invite the participants.

        :::image type="content" source="./assets/images/calls-and-meetings/meeting.png" alt-text="Screenshot of Calling bot displaying the details of call being placed successfully.":::

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with output like this?

    :::image type="content" source="./assets/images/calls-and-meetings/final-output.png" alt-text="Screenshot of calling and meeting bot output after you've successfully completed the step-by-step guide.":::
    
- content: |
    You've completed the tutorial to get started with bot calling and meeting app for Microsoft Teams.
