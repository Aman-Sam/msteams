### YamlMime:Tutorial
title: Create Teams conversation bot
metadata:
  title: Create Teams conversation bot
  description: With this learning module, you'll learn to create basic conversation bot in Microsoft Teams application.
  audience: Developer
  level: Beginner
  ms.date: 04/01/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/how-to/conversations/channel-and-group-conversations.md
  nextTutorialTitle: Channel and group chat conversations with a bot
  ms.custom: mvc
  ms.localizationpriority: none
items:
- durationInMinutes: 1
  content: |
    Microsoft Teams conversation bot allows users to interact with your web service through text, interactive cards, and task modules. Basic conversations are handled through the Bot Framework connector, a single REST API. This API enables your bot to communicate with Teams and other channels. The Bot Builder SDK provides the following features:

    * Easy access to the Bot Framework connector.
    * Additional functionality to manage conversation flow and state.
    * Simple way to incorporate cognitive services, such as Natural Language Processing (NLP).

    When your bot is added to a group or team, an introduction message is sent. The message provides a brief description of the bot's features and how to use them.
 
    This step-by-step guide helps you to create basic conversation bot in the Teams application. You'll see the following output:

    :::image type="content" source="./assets/images/conversation-bot/final-output.png" alt-text="Final output."lightbox="assets/images/conversation-bot/final-output.png":::

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure that you install the following tools and set up your development environment:

    | &nbsp; | Install | For using... |
     | --- | --- | --- |
     | **Required** | &nbsp; | &nbsp; |
     | &nbsp; | [Microsoft 365 developer account](/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | Access to Teams account with the appropriate permissions to install an app. |
     | &nbsp; | [ngrok](https://ngrok.com/download) | Teams app features (conversational bots, message extensions, and incoming webhooks) require inbound connections. A tunnel connects your development system to Teams. It isn't required for apps that only include tabs. This package is installed within the project directory (using npm `devDependencies`). |
     | &nbsp; | [Visual Studio 2022 version 17.3](https://visualstudio.microsoft.com)<br> Install one of the following two workloads:<br> • ASP.NET and web development <br> • .NET Core cross-platform development | You can install the enterprise version in Visual Studio 2022, and install the workloads. |   
     | &nbsp; | [.NET Core SDK version 3.1](https://dotnet.microsoft.com/en-us/download) | Customized bindings for local debugging and Azure Functions app deployments. If you haven't installed the .NET 3.1 (or later) SDK globally, the portable version can be installed. |
     | &nbsp; | [Microsoft Teams and a Teams account](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, call and all in one place. |

- title: Create and register your bot
  durationInMinutes: 5
  content: |
    Register your bot with Azure Bot service when you develop and host it in Azure. Perform the following steps:

    * Create a ngrok tunnel to your web server's endpoints.
    * Create bot channel registration in Azure account.
    * Create client secret that enables single sign-on (SSO) authentication of the bot.
    * Add API permissions for downstream calls.
    * Add messaging endpoint to the ngrok tunnel you created.
    * Add Teams channel to deploy the bot to a Teams channel.

    **Create ngrok tunnel**

    Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

    ```bash
    ngrok http --host-header=rewrite 3978
    ```

    **Create Bot channel registration in Azure account**

    1. Access the [Azure portal](https://portal.azure.com/).
    1. Select **Create a resource**.
    1. Search for **Azure Bot** in the search box.
    1. Select **Azure Bot**.
    1. Select **Create**.
    
       :::image type="content" source="./assets/images/conversation-bot/azure-bot_1.png" alt-text="Azure bot.":::

       **Create an Azure Bot** window appears.

    1. Enter bot handle name in **Bot handle**.
    1. Select your **Subscription** and **Resource group** from the dropdown list.
    
       :::image type="content" source="./assets/images/conversation-bot/create-azure-bot.png" alt-text="Create Azure bot.":::

       You can create a new resource group. Select **Create new** > enter resource name > select **OK**. Select the required location from **New resource group location** dropdown list.
   
       :::image type="content" source="~/assets/images/bots/newresource.png" alt-text="Screenshot showing the new resource group location.":::

    1. In the **Microsoft App ID** section, by default **Create new Microsoft App ID** is selected. 
    
       You can select **Use existing app registration** and enter **App ID**, **App tenant ID**, and **MSI resource ID**.

       > [!NOTE]
       > You can't create more than one bot with the same **Microsoft App ID**.

    1. Select **Type of App** as **Multi Tenant**.

    1. Select **Review + create**.

       :::image type="content" source="./assets/images/Tab-ME-SSO/tenant-review.png" alt-text="tenant review.":::

    1. If the validation is passed, select **Create**.

       It takes a few moments for your bot service to be provisioned.

        :::image type="content" source="./assets/images/conversation-bot/validation-passed.png" alt-text="Validation of the bot.":::

    1. Select **Go to resource**. 

       :::image type="content" source="./assets/images/conversation-bot/go-to-resource_1.png" alt-text="Go to resource card.":::

       Your Azure bot is created and you can see the **Resource group** and **Subscription ID** in the Azure Bot.

       :::image type="content" source="./assets/images/conversation-bot/app-overview_1.png" alt-text="app overview." 
    
    **To create client secret**

      Perform the following steps if you've created a new Microsoft App ID:

    1. In the left pane, select **Configuration**. 

       > [!TIP]
       > Save the **Microsoft App ID** or **Client ID** for future reference.

    1. Next to **Microsoft App ID**, select **Manage**.

        :::image type="content" source="./assets/images/conversation-bot/microsoft-app-id_1.png" alt-text="Microsoft App Id.":::

    1. In the **Client secrets** section, select **New client secret**.

       :::image type="content" source="~/assets/images/Tab-ME-SSO/newclientsecret_1.png" alt-text="Screenshot showing the selection of new client secret.":::

       **Add a client secret** window appears.

    1. Enter **Description** of the client secret.

    1. Select **Add**.
 
        :::image type="content" source="./assets/images/conversation-bot/add-client-secret_1.png" alt-text="Add client secret.":::

    1. Select **Copy to clipboard** to copy the **Value** details.

        :::image type="content" source="./assets/images/conversation-bot/value_1.png" alt-text="Value card.":::

       > [!TIP]
       > Save the Client secrets **Value** or app password for future reference.

    **To add API permissions for downstream calls**

    1. In the left pane, select **API permissions**.
    1. Select **Add a permission**. 
       **Request API permissions** window appears.
    1. Select **Microsoft APIs** > **Microsoft Graph**.

       :::image type="content" source="./assets/images/conversation-bot/api-permissions_1.png" alt-text="Add API permissions."lightbox="assets/images/conversation-bot/api-permissions.png":::

    1. Select **Application permissions**.

    1. Add user permissions that your app requires to downstream APIs, for example, User.Read.
    
    1. Select **Add permissions**.

       :::image type="content" source="./assets/images/conversation-bot/api-permissions_3.png" alt-text="Add API permissions."lightbox="assets/images/conversation-bot/api-permissions.png":::

    **To add messaging endpoint**

    1. From ngrok, copy the HTTPS URL (https to io).
            
        ![ngrok HTTPS URL](~/assets/images/conversation-bot/ngrok-image.png)

        > [!NOTE]
        > The HTTPS URL in your ngrok is a domain name that doesn't include `https://`.

    1. In **Settings**, select **Configuration**.

    1. In **Messaging endpoint**, add the HTTPS URL from ngrok and at the end of the URL add **/api/messages**.
       
       :::image type="content" source="./assets/images/conversation-bot/messaging-endpoint_1.png" alt-text="Messaging endpoint.":::

    1. Select **Apply**.

    **To add the Microsoft Teams channel**

    1. Go to **Home**.
    
       :::image type="content" source="~/assets/images/conversation-bot/home page.png" alt-text="Select home":::

    1. Select your bot from **Recent Resources**.
    1. Select **Channels** in the left pane.
    1. Select **Microsoft Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>.    
        
       :::image type="content" source="~/assets/images/Tab-ME-SSO/channel-teams_1.png" alt-text="Select Teams in channels":::

    1. Select the checkbox to accept the **Terms of Service**.
    1. Select **Agree**.

       :::image type="content" source="~/assets/images//Tab-ME-SSO/terms.png" alt-text="Terms of service":::

    1. Select **Apply**.

       :::image type="content" source="~/assets/images//Tab-ME-SSO/apply.png" alt-text="Screenshot showing the selection of Teams.":::

    You have successfully set up a bot in Azure Bot service and you need to set up bot service connection.

- title: Set up bot service connection
  durationInMinutes: 1
  content: |
    Configure the bot to understand how to authenticate conversation bot in Teams, create the Teams app package, and upload it to the organization.
    
    * Update appsettings.json in Visual Studio.
    * Update manifest.json in Visual Studio and compress it to the zip file in the File Explorer.
    * Run your solution in Visual Studio.
    * Upload the bot to Teams.

    **To update appsettings**

    1. Go to the repo https://github.com/Microsoft/botbuilder-samples.git.
    1. Select **Code**.
    1. Select **Download ZIP** from the dropdown menu.

        :::image type="content" source="./assets/images/calls-and-meetings/git_1.png" alt-text="Screenshot showing the repo download.":::

        > [!NOTE]
        > Ensure to note the path of the repository that you downloaded.

    1. In the **File Explorer**, go to **botbuilder-samples** > **samples** > **csharp_dotnetcore** > **57.teams-conversation-bot**.
    1. Open the **appsettings.json** file in Visual Studio and update the configuration for the bot.
   
        * Replace `"MicrosoftAppType"`to **Multitenant**.
        * Replace `"MicrosoftAppId"` to your bot's **Microsoft App ID**.
        * Replace `"MicrosoftAppPassword"` to your bot's client secret ID **Value**.
        * Replace your `"MicrosoftAppTenantId"` to your tenant ID. You can obtain the tenant ID from the link of the account used to login to the Teams. 
          Follow the path in the image to get the link for tenant Id:
        
          1. Select **Teams**.

          1. Select the ellipse ●●●.

          1. Select **Get link to team**.

             :::image type="content" source="./assets/images/conversation-bot/teams-link-new_1.png" alt-text="Tenant ID path in Teams.":::
            
          1. Select **Copy**.

             :::image type="content" source="./assets/images/conversation-bot/tenant-id.png" alt-text="Copy Teams link.":::

          1. Copy the **tenant Id** from the URL.

             :::image type="content" source="./assets/images/conversation-bot/url-tenantid_1.png" alt-text="TenantID.":::

    1. Select **Save**.    
        
        :::image type="content" source="./assets/images/conversation-bot/appsettings_1.png" alt-text="Appsettings Json.":::

    **To update manifest**

    1. In the **File Explorer**, go to **botbuilder-samples** > **samples** > **csharp_dotnetcore** > **57.teams-conversation-bot** > **TeamsAppManifest**.
    
       :::image type="content" source="./assets/images/conversation-bot/manifest location.png" alt-text="Manifest.":::

    1. Open the **manifest.json** file in Visual Studio and make the following changes:
       * Replace `"{id}"`and `"{botId}"` to your bot's **Microsoft App ID**.
       * Replace `"validDomains"` to your ngrok domain excluding `https://`.

        :::image type="content" source="./assets/images/conversation-bot/manifest_1.png" alt-text="Manifest.":::

    1. Zip the contents of the **TeamsAppManifest** folder to create **manifest.zip**.
    
        > [!NOTE]
        > The `manifest.zip` must not contain any additional folders in it. It must have `manifest json` source file, `color` icon, and `outline` icon inside the zip folder.
        > Run your solution in Visual Studio and upload your manifest in your demo tenant for organization or your Teams account.
    
    **To run solution in Visual Studio**

    1. Open the latest version of Visual Studio.
    1. Select **File** > **Open** > **Project/Solution**.

       ![Open file](~/assets/images/Tab-ME-SSO/open-project1.png)

    1. Go to **botbuilder-samples** > **samples** > **csharp_dotnetcore** > **57.teams-conversation-bot**.
    1. Select `TeamsConversationBot.csproj` file.

        :::image type="content" source="./assets/images/conversation-bot/visual-studio_2.png" alt-text="Visual Studio debug.":::

    1. Select **F5** to run the project.

    1. Select **Yes** if the following dialog appears:

       :::image type="content" source="./assets/images/conversation-bot/certificate.png" alt-text="Trust Certificate.":::
    
       A webpage appears with a message **Your bot is ready!**

       :::image type="content" source="./assets/images/conversation-bot/bot.png" alt-text="Bot ready screen.":::

    **To upload the app to Teams**

    1. Go to **Teams**.

    1. Select **Apps** > **Manage your apps**.

       :::image type="content" source="../msteams-platform/assets/images/conversation-bot/manageapps_1.png" alt-text="Manage apps":::
   
    1. Select **Upload a custom app**.

       :::image type="content" source="../msteams-platform/assets/images/conversation-bot/uploadapp_1.png" alt-text="Upload custom app":::

    1. Select **Open** to upload the .zip file that you created in the **Manifest** folder.
    
        :::image type="content" source="./assets/images/conversation-bot/upload-manifest_1.png" alt-text="Manifest upload in Teams.":::

    1. Select **Add**.

       :::image type="content" source="./assets/images/conversation-bot/add-app-teams.png" alt-text="Add App to Teams.":::

        You can interact with the bot.

- title: Interact with the conversation bot
  durationInMinutes: 2
  content: |
    You can interact with the bot in Teams by sending it a message, or selecting a command from the command list. The bot responds to the following strings:

    In the left pane of the Teams, select the ellipses ●●●, and then select your app from the list. The bot shows **Suggestions** as follows:
       * **MentionMe**
       * **Show Welcome**
       * **MessageAllMembers**

    :::image type="content" source="./assets/images/conversation-bot/suggestions_1.png" alt-text="Suggestions card.":::

    | MentionMe    | Show Welcome   | MessageAllMembers |
    | --- | --- | --- |
    | :::image type="content" source="./assets/images/conversation-bot/mentionme-new.png" alt-text="Mentionme card"lightbox="assets/images/conversation-bot/mentionme-new.png"::: | :::image type="content" source="./assets/images/conversation-bot/show-welcome-new.png" alt-text="Show Welcome card"lightbox="assets/images/conversation-bot/show-welcome-new.png"::: | :::image type="content" source="./assets/images/conversation-bot/message-all-members-new.png" alt-text="MessageAllMembers card"lightbox="assets/images/conversation-bot/message-all-members-new.png"::: |
    | **Result:** The bot responds to the message and mention the user. | **Result:** The bot sends the welcome card for you to interact with. |  **Result:** The bot sends a one-on-one message to each member in the current conversation. |
    | **Valid scopes:** personal, group chat, team chat. | **Valid scopes:** personal, group chat, team chat. |  **Valid scopes:** personal, group chat, team chat. |

    You can select an option from the command list by typing **@TeamsConversationBot** into the compose message area and send it.

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with output like this?

    :::image type="content" source="./assets/images/conversation-bot/final-output.png" alt-text="Final output."lightbox="assets/images/conversation-bot/final-output.png":::
    
- content: |
    You've completed the tutorial to get started with conversation bot for Microsoft Teams.
