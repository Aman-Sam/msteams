### YamlMime:Tutorial
title: Meeting Token Generator
metadata:
  title: Meeting Token Generator
  description: In this tutorial, you'll learn to set up a meeting token generator for Teams.
  audience: Developer
  level: Beginner
  ms.date: 10/12/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ../apps-in-teams-meetings/enable-and-configure-your-app-for-teams-meetings.md
  nextTutorialTitle: Read more to authenticate apps in Teams meeting
  ms.custom: mvc
  ms.localizationpriority: none
items:
- durationInMinutes: 1
  content: |
    Meeting Token Generator app extends meetings in Teams. Through this app, meeting participants request **token**. The tokens are generated sequentially so that each participant has equal opportunity to interact, for example, the app is useful in Q&A sessions and in meetings like scrum meetings. You can create a Meeting Token Generator app to enhance your meeting experience in Teams.

    **Key Features**

    The following list provides the key features of the meeting token generator:

    * Displays the current token that is being serviced in the meeting.
    * Displays the user list sorted by the token number in ascending order.
    * Generates a token for the user upon request.
    * Displays the current user's token number.
    * Allows the organizer to skip the current meeting token.

    **User Interactions**

    The following list provides different ways of user interactions:

    * **Token** - Requests token for the user.
    * **Done** - Confirms that the user is done with the token.
    * **Skip** - Skips the current user and moves on to the next person in line for a token.

       > [!NOTE]
       > **Skip** is available only to the meeting organizers.


- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure you install the following tools and set up your development environment:  

    * [.NET Core SDK](https://dotnet.microsoft.com/download) of version 3.1
    * [Visual Studio Code](https://code.visualstudio.com/download) of version 1.55 or later.
    * [Visual Studio 2019](https://visualstudio.microsoft.com/downloads/)
    * [nodejs](https://nodejs.org/en/download/) of LTS version 10.21.0 or above.
    * [ngrok](https://ngrok.com/download) of latest version (only for devbox testing) or any equivalent tunneling solution.
    
    To gain full understanding of the app, ensure you have the working knowledge of the following technologies:

    * [C#](https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/tutorials/how-to-display-command-line-arguments).
    * [ECMAScript6](http://es6-features.org/#Constants).
    * [ASP.NET core](https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-3.1) of version 3.1.
    * [React.JS](https://reactjs.org/tutorial/tutorial.html) of version 16+.

    This app uses the Teams extensibility features described in the following pages:

    * [Apps in Teams meetings](https://docs.microsoft.com/en-us/microsoftteams/platform/apps-in-teams-meetings/teams-apps-in-meetings)
    * [Create apps for Teams meetings](https://docs.microsoft.com/en-us/microsoftteams/platform/apps-in-teams-meetings/create-apps-for-teams-meetings?tabs=json)
    * [Tab single sign-on](https://docs.microsoft.com/en-us/microsoftteams/platform/tabs/how-to/authentication/auth-aad-sso) to get the identity of the user accessing the tab, in a way that can be verified in the server APIs.

    Clone `Microsoft-Teams-Samples` repository to your local GitHub:  

    * Open [Microsoft Teams Samples](https://github.com/OfficeDev/Microsoft-Teams-Samples).
    * Select `Code` option from the menu and select `Code` button highlighted in green.
    * From the dropdown menu, select `Open with GitHub Desktop` and clone the repository.

       ![Clone repository](~/assets/images/meeting-token-generator/meeting-token-generator-clonerepository.png)

- title: Setting up project file properties
  durationInMinutes: 1
  content: |
    Ensure the following changes are made to the properties of `TokenApp.csproj` file:

    1. Launch **Visual Studio 2019**.
    1. Navigate to `File > Open > Project/Solution`.
    
       ![Open file](~/assets/images/meeting-token-generator/meeting-token-generator-VSopenfile.png)

    1. Navigate to the `TokenApp` folder.
    1. Select `TokenApp.csproj` file.

       ![Token File](~/assets/images/meeting-token-generator/meeting-token-generator-Tokenfileready.png)

    1. Select `TokenApp Properties` under Project in the menu bar.
    1. Set `App URL` to `http://localhost:3978` and clear `Enable SSL` checkbox.

       ![Token File Properties](~/assets/images/meeting-token-generator/meeting-token-generator-tokenproperties.png)


- title: Create and register your bot in Azure Active Directory(AAD) Portal
  durationInMinutes: 5
  content: |
    Develop a bot, host it in Azure and register it with Azure Bot Service. Do the following steps:

    1. Create Azure Bot resource to register bot with Azure Bot Service.
    1. Create client secret that enables SSO authentication of the bot.
    1. Add Microsoft Teams channel to deploy the bot to a Teams channel.
    1. Use ngrok to create a tunnel to your web server's endpoints.
    1. Add messaging endpoint to the ngrok tunnel you created.

    **To create Azure Bot resource**

    1. Go to the [Azure portal](https://portal.azure.com/).
    1. Select **Create a resource**.
    1. In the search box, enter **Azure bot** and select the Enter key.
    1. Select **Azure Bot**.

         ![Create Azure bot card](~/assets/images/bots/createazurebot.png)

    1. Select **Create**.
    1. Enter required bot handle name in **Bot handle**.
    1. From the **Subscription** dropdown list, select the subscription.
    1. From the **Resource group** dropdown list, select the resource group.
        
    **To create a new resource** 

    1. Select **Create new**.
    1. Enter resource name.
    1. Select **OK**.
    1. Select required location from **New resource group location** dropdown list.</br>

        <img src="~/assets/images/meeting-token-generator/meeting-token-generator-review-plus-create.png" alt="Create resource Azure bot" width="700"/>

       In the Microsoft App ID section, by default **Create new Microsoft App ID** is selected. You can either select **Use existing app registration**, and enter **Existing app id** and **Existing app password** or create a new Microsoft app ID:

       ![Create Microsoft App ID](~/assets/images/meeting-token-generator/meeting-token-generator-appidcreate.png)

    1. Select **Review + create**.

    1. If the validation passes, select **Create**.

        It takes a few moments for your bot service to be provisioned.

    1. Select **Go to resource**. The bot and the related resources are listed in the resource group.

        Your Azure bot is created:

        ![Azure bot resource created](~/assets/images/meeting-token-generator/meeting-token-generator-bot-page.png)

    **To create client secret**

    1. In **Settings**, select **Configuration**. Save the **Microsoft App ID** (client ID) for future reference.
    1. Next to **Microsoft App ID**, select **Manage**.

         ![Microsoft App ID](~/assets/images/meeting-token-generator/meeting-token-generator-config.png)

    1. In the **Client secrets** section, select **New client secret**. The **Add a client secret** window appears.  

    1. Enter **Description** and select **Add**.
 
        <img src="~/assets/images/meeting-token-generator/meeting-token-generator-clientsecret.png" alt="Add client secret to app" width="500"/>

    1. In the **Value** column, select **Copy to clipboard** and save the client secret ID for future reference.

         ![Value of client secret](~/assets/images/meeting-token-generator/meeting-token-generator-clientvalue.png)
       
    **To add the Microsoft Teams channel**

    1. Go to **Home**.

        <img src="~/assets/images/meeting-token-generator/meeting-token-generator-gotohome.png" alt="Home page" width="600"/>

    1. Open your bot listed in the **Recent resources** section.

    1. Select **Channels** in the left pane and select **Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>. 

          ![Open Teams from channels](~/assets/images/meeting-token-generator/meeting-token-generator-channels.png)    

          ![Select Teams](~/assets/images/meeting-token-generator/meeting-token-generator-config-teams.png)   

    1. Select **Save**.
    
    1. Select the checkbox to accept the **Terms of Service** and select **Agree**.</br>
          ![Terms of service](~/assets/images/meeting-token-generator/meeting-token-generator-terms.png)

   
    Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

     ```bash
     ngrok http -host-header=localhost 3978
     ```

    > [!NOTE]
    > At a later phase, when you build and run the service, you can either use Visual Studio 2019 or Command line. If you choose `Command line`, ensure to use `localhost 5000` instead of `localhost 3978` while creating ngrok tunnel.


    **To add messaging endpoint**

    1. In **Settings** for the Azure bot that you created, select **Configuration**.
    1. Go to ngrok.
    1. Copy the HTTPS URL (https to io) as shown in the following image:

        ![ngrok HTTPS URL](~/assets/images/meeting-token-generator/meeting-token-generator-ngrok.png)

        > [!NOTE]
        > The HTTPS URL in your ngrok will be your fully qualified domain name.
        > The `WebAppDomain` will be the fully qualified domain name without `https://` in it.

    1. In **Messaging endpoint**, use the HTTPS URL available from ngrok and at the end of the URL add **/api/messages**.

        <img src="~/assets/images/meeting-token-generator/meeting-token-generator-messaging-endpoint.png" alt="Messaging endpoint" width="600"/>

    1. Select **Apply**.

        You have successfully set up a bot in Azure Bot Service.


- title: Update the AAD app registration for tab SSO
  durationInMinutes: 1
  content: |
    To register your app through the AAD portal:  

    1. Go to the [Azure portal](https://portal.azure.com/).

    1. Select **Azure Active Directory** under **Azure services**.

    1. In the left navigation panel, select **App Registrations**.

    1. Select the same AD application created in previous step for bot registration:

       ![App registration](~/assets/images/meeting-token-generator/meeting-token-generator-appregister.png)

    1. Under **Manage**, select **Expose an API**.

       ![Expose an API](~/assets/images/meeting-token-generator/meeting-token-generator-exposeanapi.png)

    1. Select the **Set** link to generate the Application ID URI in the form of `api://{AppID}`. 

       ![Set link](~/assets/images/meeting-token-generator/meeting-token-generator-setlink.png)

    1. Insert your `WebAppDomain` value between `api://` and `/{AppID}` as given:</br>
        `api://ae57****.ngrok.io/{AppID}`.</br>
        
       The domain name is highlighted in the following image:
        
        ![App ID URI](~/assets/images/meeting-token-generator/meeting-token-generator-appIDuri.png)

        > [!NOTE]
        > If you're using a tunneling service such as ngrok, ensure you update this value whenever your ngrok subdomain changes.
        >  `Ex: api://f631****.ngrok.io/92c11075-c629-4a1e-ab58-02b4fd4204c2`, where `f631****.ngrok.io` is the new ngrok subdomain name.

    1. Select the **Add a scope** button. In the panel that opens, enter `access_as_user` as the Scope name.
  
    1. Set **Who can consent?** to `Admins and users`.
  
    1. Set up the following fields for configuring the admin and user consent prompts with values that are appropriate for the `access_as_user` scope:</br>
         * **Admin consent display name**: Teams can access the user’s profile.
         * **Admin consent description**: Allows Teams to call the app’s web APIs as the current user.
         * **User consent display name**: Teams can access the user profile and make requests on the user's behalf.
         * **User consent description**: Enable Teams to call this app’s APIs with the same rights as the user.
  
        ![Add a scope](~/assets/images/meeting-token-generator/meeting-token-generator-addascope.png)

    1. Ensure that **State** is set to **Enabled**.
  
    1. Select the **Add scope** button to save.
         * The **Scope name** should match with the **Application ID** URI with `/access_as_user` appended to the end:</br>
           `api://ae57****.ngrok.io/00000000-0000-0000-0000-000000000000/access_as_user`.

        ![Scopes](~/assets/images/meeting-token-generator/meeting-token-generator-scopes.png) 
  
    1. In the **Authorized client applications** section, identify the applications that you want to authorize for your app’s web application. 
    
    1. Select **Add a client application**. 

    1. Enter each of the following client IDs and select the authorized scope you created in the previous step:</br>
         * `1fec8e78-bce4-4aaf-ab1b-5451cc387264` (Teams mobile/desktop application).
         * `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` (Teams web application).

         ![Add client application](~/assets/images/meeting-token-generator/meeting-token-generator-addclientapplication.png) 

         ![Client applications](~/assets/images/meeting-token-generator/meeting-token-generator-clientapps.png) 
  
    1. Navigate to **API Permissions**. 

    1. Select **Add a permission**.

    1. Select **Microsoft Graph**.

    1. Select **Delegated permissions**.

        By default `User.Read` is checked:

         ![User](~/assets/images/meeting-token-generator/meeting-token-generator-userpermission.png)

     1. Add the following permissions:</br>
         * email
         * offline_access
         * OpenId
         * profile

         ![Other permissions](~/assets/images/meeting-token-generator/meeting-token-generator-otherpermissions.png)
  
    1. Navigate to **Authentication**. 
       If an app is not granted IT admin consent, users will have to provide consent the first time they use an app.</br>
       
       Set a redirect URI:
         * Select **Add a platform**.
         * Select **web**.

         ![Web](~/assets/images/meeting-token-generator/meeting-token-generator-webauthentication.png)

    1. Enter the redirect URI for your app. The page appears with access to implicit grant flow.

    1. Append API route to the domain name:</br>
           `https://ae57****.ngrok.io/auth-end`. </br>

       Enable implicit grant by checking the following boxes:
         * ID Token
         * Access Token

         ![Auth-end](~/assets/images/meeting-token-generator/meeting-token-generator-authend.png)

     > [!NOTE]
     > * Users need to consent to these permissions only if the AAD app is registered in a different tenant.
     > * If you get an error that the domain is already owned and you're the owner, follow the procedure at [Quickstart: Add a custom domain name to Azure Active Directory](https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/add-custom-domain) to register the domain. Then repeat step 7 given earlier. (This error also occurs if you aren't signed in with Admin credentials in the Office 365 tenancy).
     > * If you don't receive the User Principal Name(UPN) in the returned access token, you add it as an [optional claim](https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-optional-claims) in AAD.


- title: Setting up app settings
  durationInMinutes: 1
  content: |
    1. Navigate to `appsettings.json` in cloned repository:

        ![App settings location](~/assets/images/meeting-token-generator/meeting-token-generator-appsettingslocation.png)

    1. Open `appsettings.json` in **Visual Studio Code** and make the following changes:  

         * `"MicrosoftAppId"`: Set up with the application ID of the bot's Azure AD application.
         * `"MicrosoftAppPassword"`: Provide client secret of the bot's Azure AD application.
         * `"AzureAd"."TenantId"`: Provide the tenant ID of the tenant where the app will be used. In our example, use `meganb@M365x682156.onmicrosoft.com` as the tenant ID. 

       > [!NOTE]
       > The sample will only work in this tenant.

         * `"AzureAd"."ApplicationId "`: Set it to the same value as `MicrosoftAppId` provided earlier.
         * `"ContentBubbleUrl "`: Enter the content bubble iframe url `(https://[WebAppDomain]/contentBubble.html)`.

       > [!NOTE]
       > `WebAppDomain` will be your ngrok domain, so the content bubble URL will be similar to `https://ae57****.ngrok.io/contentBubble.html`.

        ![App settings](~/assets/images/meeting-token-generator/meeting-token-generator-appsettings.png)

- title: Setting up manifest file
  durationInMinutes: 1
  content: |
    1. Navigate to `manifest.json` in cloned repository:

        ![Manifest file location](~/assets/images/meeting-token-generator/meeting-token-generator-manifestlocation.png)
    
    1. Open `manifest.json` in **Visual Studio Code** and make the following changes:

         * Set up `manifestVersion` to `1.11`.
         * Set up `$schema` to `https://developer.microsoft.com/json-schemas/teams/v1.11/MicrosoftTeams.schema.json`.
         * Set up `[companyName]` to `Contoso`.
         * Set up `resource` to `api://[WebAppDomainName]/[MicrosoftAppId]`.
         * Set up the following sections to your fully qualified domain name:
           * `[websiteUrl]`
           * `[privacyUrl]`
           * `[termsOfUseUrl]`
         * Replace all occurrences of `[WebAppDomainName]` with your ngrok domain name.
         * Replace all occurrences of `[MicrosoftAppId]` with your application ID as provided in previous steps. 

       ![Manifest image1](~/assets/images/meeting-token-generator/meeting-token-generator-manifest-img1.png)

       ![Manifest image2](~/assets/images/meeting-token-generator/meeting-token-generator-manifest-img2.png)
    

- title: Build the client app using 'npm install'
  durationInMinutes: 1
  content: |
    To build client app using 'npm install':
    
    1. Navigate to the `App` folder in a terminal.
       1. Copy `App` folder path present in cloned repository.
       1. In a terminal window, change the directory to the copied `App` path.

       ![App folder path](~/assets/images/meeting-token-generator/meeting-token-generator-appfolderlocation.png)

    1. Run `npm install`.
    1. Run `npm run build` to build the app.

       ![Build app](~/assets/images/meeting-token-generator/meeting-token-generator-buildapp.png)

    This process generates the `/dist` folder inside the `App` folder where the assets get copied. The server will serve the static files from this location.

       ![Distribution folder](~/assets/images/meeting-token-generator/meeting-token-generator-distfolder.png)

- title: Build and run the service
  durationInMinutes: 1
  content: |
    To build and run the service:

    # [Visual Studio 2019](#tab/vs2019)

       1. Go to **Visual Studio 2019**.

       1. Open `TokenApp.csproj` file, following the steps given in **Prerequisites** section.

       1. Press `F5` to run the project.
    
       > [!NOTE]
       > If a prompt appears, asking for a certification, select `Yes`.

       ![Trust Certificate](~/assets/images/meeting-token-generator/meeting-token-generator-certificate.png)

    A webpage opens with a message `App is ready`:

       ![App ready](~/assets/images/meeting-token-generator/meeting-token-generator-appready.png) 

        
    # [Command line](#tab/cli)

    Navigate to the `csharp` folder in a terminal and enter the following command:

    ```bash
    dotnet run
    ```
      ![Dotnet](~/assets/images/meeting-token-generator/meeting-token-generator-dotnetrun.png)
      
- title: Enable developer preview in your desktop Teams client
  durationInMinutes: 1
  content: |
    Follow these instructions to enable developer preview:

       > [!NOTE]
       > Developer preview mode must be enabled on each Teams client app or browser.

    1. Enable uploading of apps in the admin console of your tenant.
       1. Sign in to [Microsoft 365 admin center](https://admin.microsoft.com/Adminportal/Home?source=applauncher#/homepage#/) with your admin credentials.
       1. Select **Show All** and select **Teams**.

          ![Admin center menu](~/assets/images/prepare-test-tenant/admin-center.png)

          > [!NOTE]
          > It might take up to 24 hours for the **Teams** option to appear.

       1. Navigate to **Teams apps**.
       1. Select **Setup Policies** and select **Global**.

          ![Turn on sideload view](~/assets/images/prepare-test-tenant/turn-on-sideload.png) 

       1. Toggle **Upload custom apps** to the `On` position.
       1. Select **Save**. Your test tenant can permit custom app sideloading.

          > [!NOTE]
          > It might take up to 24 hours for the sideloading to be active.

          ![Upload app view](~/assets/images/prepare-test-tenant/upload-for-contoso.png)

    1. Select your profile (either in the upper right or lower left of the Teams interface) to display the Teams menu.
    
    1. Select **About** and select **Developer preview**.
   
    1. Select **Switch to Developer preview**.
 
       > [!NOTE]
       > In-meeting tabs are available only in the Teams desktop client.

- title: Build the client app
  durationInMinutes: 1
  content: |
    To build client app
    1. In your cloned repository, navigate to `csharp > Resources > Manifest`.

    1. Create a .zip with the following files that are present in the `Manifest` folder. 
       * manifest.json
       * icon-outline.png
       * icon-color.png

       ![Zip file](~/assets/images/meeting-token-generator/meeting-token-generator-zipfile.png) 
    
    1. Create a meeting with a few Presenters and Attendees.
   
    1. Once the meeting is created, go to the meeting details page and select the **Add an app** (+) button.

       ![Add an app](~/assets/images/meeting-token-generator/meeting-token-generator-addanapp.png) 
   
    1. In the pop-up that opens, select **Manage apps**.

       ![Manage apps](~/assets/images/meeting-token-generator/meeting-token-generator-manageapps.png)
   
    1. Select **Upload a custom app** and upload the .zip file that was created in the previous steps. This step adds the app to the meeting.

       ![Upload custom app](~/assets/images/meeting-token-generator/meeting-token-generator-uploadcustomapp.png)

       ![Select zip file](~/assets/images/meeting-token-generator/meeting-token-generator-selectzip.png)

       ![Add the app](~/assets/images/meeting-token-generator/meeting-token-generator-addtheapp.png)

       You will see the app listed in the **Manage apps** section.

       ![App in Manage apps](~/assets/images/meeting-token-generator/meeting-token-generator-manageappsection.png)
   
    1. Select the **Add an app** button again. In the app selection page, the app displays as **Meeting Token App**.
  
       ![App icon in Teams](~/assets/images/meeting-token-generator/meeting-token-generator-appicon.png)

    1. Select the **Meeting Token App** and select **Save**.

       ![Welcome App](~/assets/images/meeting-token-generator/meeting-token-generator-welcomeapp.png)
   
    Now the app will be visible in the meeting chat. Start the meeting and the icon should be visible in the meeting control bar.

       ![Token in Meet](~/assets/images/meeting-token-generator/meeting-token-generator-tokeninmeet.png)

- title: Troubleshoot
  durationInMinutes: 1
  content: |
    To maintain token information and service URL for the tenant, the sample app uses an in-memory store. 
    If you restart the project, run the following command to recapture the service URL: `@[BotName] reset`. In our example, `[BotName]` is `MeetingTokenGeneratorBot`.

    > [!NOTE]
    > When you work on your own project, ensure to use a durable storage mechanism to store the token information and service URL for the tenant.

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

       ![Token in Meet](~/assets/images/meeting-token-generator/meeting-token-generator-tokeninmeet.png)

       ![Your Token](~/assets/images/meeting-token-generator/meeting-token-generator-yourtokennumber.png)

- content: |
    You've completed the tutorial to get started with a Meeting Token Generator app.

