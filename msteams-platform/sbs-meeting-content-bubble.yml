### YamlMime:Tutorial
title: Meeting content bubble
metadata:
  title: Meeting content bubble
  description: In this tutorial, you'll learn to send reply to meeting content bubble in Teams.
  audience: Developer
  level: Beginner
  ms.date: 12/03/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: apps-in-teams-meetings/enable-and-configure-your-app-for-teams-meetings.md
  nextTutorialTitle: Read more to enable and configure apps for meetings 
  ms.custom: mvc
  ms.localizationpriority: none
items:
- durationInMinutes: 1
  content: |
    Microsoft Teams helps you to interact with content bubble bot in Teams meeting.

    **Key features of meeting content bubble**

    * You will see agenda items listed in an Adaptive Card.
    * You can select any option in the given agenda.
    * You can submit your feedback on either content bubble or Adaptive Card sent in chat.
    
    This step-by-step guide helps you to send feedback to content bubble bot during meetings in Teams with attendees. You'll see the following output:

       ![Meeting content bubble introduction](~/assets/images/meeting-content-bubble/desktop-and-mobile-image-final.png)

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure you install the following tools and set up your development environment:  

    * Microsoft Teams with a valid account
    * [.NET Core SDK](https://dotnet.microsoft.com/download) version 3.1
    * [Visual Studio 2019](https://visualstudio.microsoft.com/downloads/)
    * [ngrok](https://ngrok.com/download) latest version (only for devbox testing) or any equivalent tunneling solution
    
      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).

    Ensure you have working knowledge of [C#](https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/tutorials/how-to-display-command-line-arguments).

- title: Set up local environment
  durationInMinutes: 1
  content: |
   Clone `Microsoft-Teams-Samples` repository to your local GitHub:  

    1. Open [Microsoft Teams Samples](https://github.com/OfficeDev/Microsoft-Teams-Samples).
    1. Select **Code**.
    1. From the dropdown menu, select **Open with GitHub Desktop**.

       ![Clone repository](~/assets/images/meeting-token-generator/meeting-token-generator-clonerepository1.png)

    1. Select **Clone**. 

- title: Create and register your bot in AAD portal
  durationInMinutes: 5
  content: |
    To create and register your bot in Azure Active Directory (AAD), create a tunnel using ngrok, and add messaging endpoint, perform the following steps:

    * Create Azure Bot resource to register bot with Azure Bot Service.
    * Create client secret that enables SSO authentication of the bot.
    * Add Microsoft Teams channel to deploy the bot to a Teams channel.
    * Use ngrok to create a tunnel to your web server's endpoints.
    * Add messaging endpoint to the ngrok tunnel you created.

    **To create Azure Bot resource**

    1. Go to the [Azure portal](https://portal.azure.com/).
    1. Select **Create a resource**.
    1. In the search box, enter **Azure Bot**.
    1. Select **Enter**.
    1. Select **Azure Bot**.

         ![Create Azure bot card](~/assets/images/bots/createazurebot.png)

    1. Select **Create**.
    1. Enter required bot handle name in **Bot handle**.
    1. From the **Subscription** dropdown list, select **msteams.nonprod.pub.msft.aplt**.
    1. From the **Resource group** dropdown list, select your existing resource group. You can also create a new resource group (select **Create new** > enter resource name > select **OK**).
    
    1. Select the required location from **New resource group location** dropdown list.

        ![Create resource Azure bot](~/assets/images/meeting-content-bubble/meeting-token-generator-review-plus-create.png)

    1. In the **Microsoft App ID** section, by default **Create new Microsoft App ID** is selected. 
    
       You can either select **Use existing app registration** and enter **Existing app ID** and **Existing app password**, or select **Create new Microsoft App ID**.

       > [!NOTE]
       > You can't create more than one bot with the same **Microsoft App ID**.

    1. Select **Review + create**.

        ![Create Microsoft App ID](~/assets/images/meeting-token-generator/meeting-token-generator-appidcreate.png)

    1. If the validation passes, select **Create**.

        It takes a few moments for your bot service to be provisioned.

    1. Select **Go to resource**. 

        ![Deploy App](~/assets/images/meeting-content-bubble/meeting-token-generator-botdeployment.png)

        Your Azure bot is created.

        ![Azure bot resource created](~/assets/images/meeting-content-bubble/meeting-content-bubble-creating-resource-group.png)

    **To create client secret**

      Perform the following steps if you have created a new **Microsoft App ID**:

    1. In the left panel, select **Configuration**. 

       > [!TIP]
       > Save the **Microsoft App ID** or **Client ID** for future reference.

    1. Next to **Microsoft App ID**, select **Manage**.

    1. Select **Multitenant** under **App Type**.

        ![Microsoft App ID](~/assets/images/meeting-content-bubble/meeting-content-bubble-view-configuration.png)

    1. In the **Client secrets** section, select **New client secret**. 

        ![New client secret](~/assets/images/meeting-token-generator/meeting-token-generator-newclientsecret.png)
    
       The **Add a client secret** window appears.  

    1. Enter **Description**.
    
    1. Select **Add**.

        ![Add client secret to app](~/assets/images/meeting-token-generator/meeting-token-generator-clientsecret.png)

    1. In the **Value** column, select **Copy to clipboard**.

         ![Value of client secret](~/assets/images/meeting-content-bubble/meeting-content-bubble-client-secret.png)
       
       > [!TIP]
       > Save the **Client secrets** value or app password for future reference.

    **To add the Microsoft Teams channel**

    1. Select **Home**.

    1. Select your bot from **Recent resources**.

    1. Select **Channels** in the left pane. 

    1. Select **Microsoft Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>.

    1. Select the checkbox to accept the **Terms of Service**.
    
    1. Select **Agree**.

          ![Terms of service](~/assets/images/meeting-token-generator/meeting-token-generator-terms.png)

    1. Select **Save**.

          ![Select Teams](~/assets/images/meeting-token-generator/meeting-token-generator-config-teams.png)   
    
    **To create tunnel for local web server**

    Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

     ```bash
     ngrok http -host-header=localhost 3978
     ```

    **To add messaging endpoint**

    1. From ngrok, copy the HTTPS URL (https to io).

        ![ngrok HTTPS URL](~/assets/images/meeting-content-bubble/meeting-content-bubble-messaging-end-point.png)

        > [!NOTE]
        > The HTTPS URL in your ngrok is your fully qualified domain name.
        > The `WebAppDomain` is a fully qualified domain name that does not include `https://` in it.

    1. In **Settings** for the Azure bot that you created, select **Configuration**.

    1. In **Messaging endpoint**, use the HTTPS URL available from ngrok and at the end of the URL add **/api/messages**.

        ![Messaging Endpoint](~/assets/images/meeting-content-bubble/meeting-content-bubble-config-messaging-end-point.png)

    1. Select **Apply**.

        You have successfully set up a bot in Azure Bot Service.

- title: Update the AAD app registration
  durationInMinutes: 1
  content: |
    **To register your app through the AAD portal**  

    1. Go to the [Azure portal](https://portal.azure.com/).

    1. Select **Azure Active Directory**.

    1. In the left navigation panel, select **App Registrations**.

    1. Select your bot.

    1. Under **Manage**, select **Expose an API**.

    1. Select **Set**.

    1. Set the **Application ID URI** in the form of `api://{AppID}`.

       ![Set link](~/assets/images/meeting-content-bubble/meeting-content-bubble-set-api.png)

    1. Insert the `WebAppDomain` value between `api://` and `/{AppID}`.</br>
        `api://****.ngrok.io/{AppID}`</br>
        
        ![App ID URI](~/assets/images/meeting-content-bubble/meeting-content-bubble-expose-api.png)

        > [!NOTE]
        > If you're using a tunneling service such as ngrok, ensure you update the value whenever your ngrok subdomain changes.
        > `For example: api://f631****.ngrok.io/92c11075-c629-4a1e-ab58-02b4fd4204c2`, where `f631****.ngrok.io` is the new ngrok subdomain name.

    1. Select **Add a scope**. 

        ![Add Scope](~/assets/images/meeting-content-bubble/selectscope.png)
    
    1. In the panel that appears, enter `access_as_user` as the **Scope name**.
  
    1. Set **Who can consent?** to `Admins and users`.
  
    1. To configure the admin and user consent prompts with appropriate values for `access_as_user` scope, provide the following information in the fields:</br>
    
         * Enter `Teams can access the user’s profile` as **Admin consent display name**.

         * Enter `Allows Teams to call the app’s web APIs as the current user` as **Admin consent description**.

         * Enter `Teams can access the user profile and make requests on the user’s behalf` as **User consent display name**.

         * Enter `Enable Teams to call this app’s APIs with the same rights as the user` as **User consent description**.
  
    1. Ensure that **State** is set to **Enabled**.
  
    1. Select **Add scope** to save.

        ![Add a scope](~/assets/images/meeting-content-bubble/meeting-content-bubble-access-as-user.png)

       > [!NOTE]
       > The **Scope name** should match with the **Application ID** URI with `/access_as_user` appended at the end.</br>
           `api://****.ngrok.io/00000000-0000-0000-0000-000000000000/access_as_user`
  
        ![Scope](~/assets/images/meeting-content-bubble/meeting-content-bubble-add-scope.png)

    1. In the **Authorized client applications** section, identify the applications that you want to authorize for your app’s web application. 

    1. Select **Add a client application**. 

        ![Add client app](~/assets/images/meeting-token-generator/meeting-token-generator-selectclientapp.png) 

    1. Enter **Client ID**: `1fec8e78-bce4-4aaf-ab1b-5451cc387264` for Teams mobile or desktop application. 

        ![Add client application 1](~/assets/images/meeting-token-generator/meeting-token-generator-addclientapp1.png) 

       You can enter **Client ID**: `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` for Teams web application.

        ![Add client application 2](~/assets/images/meeting-token-generator/meeting-token-generator-addclientapp2.png) 

    1. Select **Authorized scopes**.

         ![Add client application](~/assets/images/meeting-content-bubble/meeting-content-bubble-add-client-app.png)

       The following image displays the client IDs:

         ![Client applications](~/assets/images/meeting-content-bubble/meeting-content-bubble-client-applications.png) 

    1. In the left panel, select **API Permissions**. 

       > [!NOTE]
       > Users need to consent to these permissions only if the AAD app is registered in a different tenant.

    1. Select **Add a permission**.

    1. Select **Microsoft Graph**.

    1. Select **Delegated permissions**.

        By default, **User.Read** is selected.

         ![User](~/assets/images/meeting-token-generator/meeting-token-generator-userpermission.png)

    1. Add the following permissions:</br>
         * **email**
         * **offline_access**
         * **OpenId**
         * **profile**

    1. Select **Add permissions**.

         ![Other permissions](~/assets/images/meeting-token-generator/meeting-token-generator-otherpermissions.png)

    1. From the left panel, select **Authentication** to set a redirect URI. 

       > [!NOTE]
       > If an app is not granted IT admin consent, users must provide consent the first time they use an app.
               
         1. Select **Add a platform**.
         1. Select **Web**.

            ![Web](~/assets/images/meeting-content-bubble/meeting-content-bubble-platform-web.png)

         1. Enter the redirect URI for your app by appending `auth-end` to fully qualified domain name:</br> 
           `https://****.ngrok.io/auth-end`. </br>

         1. Enable **Implicit grant and hybrid flows** by selecting the following checkboxes:
             * **ID tokens**
             * **Access tokens**
   
         1. Select **Configure**.

            ![Auth-end](~/assets/images/meeting-content-bubble/meeting-content-bubble-config-web.png)

- title: Set up app settings
  durationInMinutes: 1
  content: |
    1. Navigate to **appsettings.json** in cloned repository.

        ![App settings location](~/assets/images/meeting-content-bubble/navigate-to-meeting-content-bubble-repo.png)

    1. Open **appsettings.json** in **Visual Studio 2019** and update the following information:  

         * Set `"MicrosoftAppId"` to your bot's **Microsoft App ID**.
         * Set `"MicrosoftAppPassword"` to your bot's client secret ID value.
         * Set `"BaseURL"` to your `webAppDomain`.

        ![App settings](~/assets/images/meeting-content-bubble/appsettings-json.png)

- title: Set up manifest file
  durationInMinutes: 1
  content: |
    1. Navigate to **manifest.json** in cloned repository.
    
    1. Open **manifest.json** in **Visual Studio 2019** and make the following changes:

         * Set `id` to `[MicrosoftAppId]`
         * Set `botId` to `[MicrosoftAppId]`
         * Set `validDomains` to `[WebAppDomainName]`

          > [!NOTE]
          > `WebAppDomain` is your ngrok domain.

          ![Manifest image1](~/assets/images/meeting-content-bubble/manifest-set.png)

- title: Build and run the service
  durationInMinutes: 1
  content: |
    **To build and run the service using Visual Studio 2019**

       1. Launch **Visual Studio 2019**.
       1. Navigate to **File** > **Open** > **Project/Solution**.
    
          ![Open file](~/assets/images/meeting-token-generator/meeting-token-generator-VSopenfile.png)

       1. Open `ContentBubbleBot.sln` file.

          ![Open file](~/assets/images/meeting-content-bubble/proj-sln.png)

       1. Press **fn+F5** to run the project.

          A webpage opens with a message **Your bot is ready!**.

          ![App ready](~/assets/images/meeting-content-bubble/your-bot-is-ready.png) 
    
- title: Add Meeting content bubble App to Teams
  durationInMinutes: 1
  content: |
    **To create a Teams meeting and add Meeting content bubble**

    1. In your cloned repository, navigate to **csharp > Resources > Manifest**.

    1. Create a .zip with the following files that are present in the **Manifest** folder: 
       * manifest.json
       * icon-outline.png
       * icon-color.png

       ![Zip file](~/assets/images/meeting-content-bubble/create-manifest-zip.png) 
    
    1. Create a meeting with a few presenters and attendees.
   
    1. After the meeting is created, select **+** to **Add an App**.

       ![Add an app](~/assets/images/meeting-content-bubble/add-an-app.png) 
   
    1. In the pop-up that opens, select **Manage apps**.

       ![Manage apps](~/assets/images/meeting-content-bubble/manage-apps.png)
   
    1. Select **Upload a custom app**. 

       ![Upload custom app](~/assets/images/meeting-content-bubble/upload-custom-app.png)

    1. Select **Open** to upload the .zip file that you created in the **Manifest** folder.

       ![Upload zip app](~/assets/images/meeting-content-bubble/zip.png)

    1. Select **Add**.

       ![Add the app](~/assets/images/meeting-content-bubble/content-bubble-demo.png)

    1. The **Manage apps** section displays the list of applications.

       ![Manage apps](~/assets/images/meeting-content-bubble/Manage.png)

    1. Go to meeting chat.
    
    1. **Content Bubble Demo** app sends an automatic reply to the meeting chat.

       ![Content Bubble Demo reply](~/assets/images/meeting-content-bubble/content-bubble-demo-first-reply.png)

    1. Send a **hello** message to bot.

       ![Mention bot](~/assets/images/meeting-content-bubble/content-bubble-demo-second-reply.png)

    1. Bot sends you agenda items listed in an Adaptive card.

    1. Select any option and select **Push Agenda** to send reply.

       ![Bot sends you adaptive card](~/assets/images/meeting-content-bubble/push-agenda.png)

    1. Bot sends **Feedback** Adaptive card.

    1. Select **Yes** or **No**.
    
    1. Select **Submit**.

       ![Bot sends you feedback card](~/assets/images/meeting-content-bubble/content-bubble-feedback.png)

        Bot sends you feedback message.
      
- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

    ![Content Bubble Demo desktop and mobile](~/assets/images/meeting-content-bubble/desktop-and-mobile-image-final.png)


- content: |
    You've completed the tutorial to get started with a meeting content bubble app.

    


