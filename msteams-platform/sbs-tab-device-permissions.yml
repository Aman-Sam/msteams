### YamlMime:Tutorial
title: Tab device permissions
metadata:
  title: Tab device permissions
  description: In this tutorial, you'll learn to give tab device permissions for Microsoft Teams apps.
  audience: Developer
  level: Beginner
  ms.date: 12/24/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: concepts/device-capabilities/browser-device-permissions.md
  nextTutorialTitle: Read more on Device permissions for browser
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    Teams app that requires device permissions, such as location, camera, or microphone access, now require users to manually grant permission at per app level in the web browser. Previously, the browser handled how to grant access permissions, but now these permissions are handled in Microsoft Teams.

    This step-by-step guide helps you to do tab device permissions at Microsoft Teams. You'll see the following output:

      :::image type="content" source="../msteams-platform/assets/images/tab-device-permission/sbs-tab-device-permission-location.png" alt-text="final output" border="true":::

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure that you install the following tools and set up your development environment:  

    * [Microsoft Teams](https://developer.microsoft.com/microsoft-365/dev-program) with valid account.
    * [Latest version of Visual Studio](https://code.visualstudio.com/Download)
    * [Latest version of nodejs](https://nodejs.org/en/download/)
    * [Latest version of ngrok](https://ngrok.com/download) (only for devbox testing) or any equivalent tunneling solution
    
      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).

    * [Microsoft 365 developer account](https://docs.microsoft.com/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) or access to Teams account with the appropriate permissions to install an app.

- title: Set up local environment
  durationInMinutes: 1
  content: |
     1. Open [Microsoft Teams Samples](https://github.com/OfficeDev/Microsoft-Teams-Samples).
     1. Select **Code**.
     1. From the dropdown menu, select **Open with GitHub Desktop**.

         :::image type="content" source="../msteams-platform/assets/images/tab-device-permission/clone-repository.png" alt-text="cloning the repository" border="true":::

     1. Select **Clone**. 

- title: Set up tunnel for local web server
  durationInMinutes: 1
  content: |    
     Use ngrok or **Command Prompt** to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

     ```bash
     ngrok http -host-header=localhost 3978
     ``` 
       > [!TIP]
       > If you encounter **ERR_NGROK_4018**, follow the steps,as displayed in the Command Prompt to sign up and authenticate ngrok. Then run the `ngrok http -host-header=localhost 3978` command.

       :::image type="content" source="../msteams-platform/assets/images/tab-device-permission/ngrok-tab-device.png" alt-text="tunnelling" border="true":::

- title: Set up manifest file
  durationInMinutes: 1
  content: | 
     1. Navigate to **manifest.json** in cloned repository.
  
        :::image type="content" source="../msteams-platform/assets/images/tab-device-permission/tab-device-manifest.png" alt-text="manifest file" border="true":::

     1. Open **manifest.json** in **Visual Studio** and make the following changes:
       
        Replace `<<BASE_URI_DOMAIN>>` with your http endpoint from ngrok excluding the https:// part in all the places.

        :::image type="content" source="../msteams-platform/assets/images/tab-device-permission/visual-studio.png" alt-text="update ngrok" border="true":::
               
- title: Build and run client app using npm
  durationInMinutes: 1
  content: |
     1. In your cloned repository, navigate to **samples > tab-device-permissions > nodejs**.

     1. Copy the **nodejs** folder path. 

        :::image type="content" source="../msteams-platform/assets/images/tab-device-permission/nodejs-path-tab-device.png" alt-text="copy the path" border="true":::  






- title: Configure and run the Tab device permissions app on Teams
  durationInMinutes: 1
  content: |
    The most comprehensive way to test your app is by creating an app package and uploading it to Teams. This method is the only way to test the full functionality available to your app, across all scopes. 
    
    To configure and run the Teams app by uploading the manifest.zip file, perform the following:

    1. Configure and run your tab device permissions app.
    2. Begin your tunneling service to get an https endpoint.
    3. Run the tab device permissions by uploading the manifest.zip file in Teams.

    **To configure and run your tab device permissions app:**

    1. Open **command prompt** and clone a repository **git clone https://github.com/OfficeDev/Microsoft-Teams-Samples.git**. Ensure that you note the **Path** where the repository is cloned.
    2. In the **File Explorer**, go to **Microsoft-Teams-Samples > samples > tab-device-permissions > nodejs** folder and copy the folder location.
    3. In the **command prompt**, enter **cd location (node js folder location)** and run this command.
    4. Run the following command in the **command prompt**:
    
       ```command-prompt
        npm install
        ```
    5. Run the application in the **command prompt** using following command:
    
       ```command-prompt
       npm start
       ```
    6. You can see the following output in the browser:

       ![react](~/assets/images/tab-device-permission/sbs-react.PNG)

    **Begin your tunneling service to get an https endpoint:**

    1. Go to **Microsoft-Teams-Samples > samples > tab-device-permissions > nodejs**.
    2. Open **ngrok** terminal and start a ngrok tunnel with the following command (you'll need the https endpoint to update the manifest file):

       ```ngrok
       ngrok http 3000 --host-header=localhost
       ```  
        
    **To run the tab device permissions by uploading the manifest.zip file in Teams:**

    1. In the **File Explorer**, go to **Microsoft-Teams-Samples > samples > tab-device-permissions > nodejs > appPackage** folder.
    2. Open the **manifest.json** file in visual studio code.
    3. In the **manifest.json** file, find **<<BASE_URI_DOMAIN>>** and replace it with your https endpoint from ngrok excluding the "https://" part in all the places.

       ![ngrok](~/assets/images/tab-device-permission/ngrok-tunnel.PNG)

    4. Zip the files in the **appPackage/folder** as manifest.zip.
    5. Open Teams on browser using tenant ID.
    6. To upload **manifest.zip**, select **Apps > Upload a custom app** and open **manifest.zip**.
    7. Select **Tab Device Permission** app.
    8. Select **Add** to add the tab device permission app.

        ![addbrowserteams](~/assets/images/tab-device-permission/sbs-add-browser-teams.png)

    9. Open **Tab Device Permission** and select **Device Permission Tab** to see the following output:

        ![desktopteams](~/assets/images/tab-device-permission/sbs-tab-device-permission-browser-mobile-get-location.png)

    10. Open mobile Teams to see the following outputs:

        ![mobileteams](~/assets/images/tab-device-permission/mobile-teams-output.png)

    11. Open desktop Teams.
    12. To upload **manifest.zip**, select **Apps > Upload a custom app** and open **manifest.zip**.
    13. Select **Add** to add the tab device permission app and you will see the following output:  

        ![desktopteams](~/assets/images/tab-device-permission/dekstop-tab-device-permission.png)

- title: Test your app
  durationInMinutes: 1
  content: |
    To ensure that the tab device permission app enables user to give the permission, you must test the app after you successfully upload the app into Teams.

     # [Desktop](#tab/Desktop)

      To test the app on desktop, select **App Permission** icon and get the following prompts to accept permission request:

       ![desktoppermissionteams](~/assets/images\tab-device-permission\desktop-teams-permission.png)

      # [Browser](#tab/Browser)

      To test the app in browser, select **Get Location** to see the following outputs:

       ![locationresultbrowserteams](~/assets/images/tab-device-permission/sbs-location-result.png)

     # [Mobile](#tab/Mobile)

      To test the app on mobile, select the respective button to test the scenario and get the following prompts to accept permission request:

       ![mobileappteams](~/assets/images/tab-device-permission/prompt-mobile-app.png)

    --- 
    
- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

      ![tabdeviceimage](~/assets/images/tab-device-permission/sbs-tab-device-permission-location.PNG)


- content: |
    You've completed the tutorial and now you can grant tab device permission at Microsoft Teams apps.

