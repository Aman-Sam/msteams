### YamlMime:Tutorial
title: Unfurl links in Teams using bot
metadata:
  title: Unfurl links in Teams using bot
  description: In this tutorial, you'll learn to set up Teams link unfurling bot.
  audience: Developer
  level: Beginner
  ms.date: 01/20/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: messaging-extensions/how-to/link-unfurling.md
  nextTutorialTitle: Read more on link unfurling
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    Microsoft Bot Framework extends the cards specification by adding a set of predefined cards that bots can use as a part of bot messaging. Link unfurling using bot in Teams helps you to register your app and receive an invoke activity when the URL with particular 
    domain is pasted into the compose message area. The invoke contains the full URL and you can respond to it with a card. User can unfurl the link using bot with additional information to get an enhanced experience.

     > [!NOTE]
     > Currently, link unfurling isn't supported on mobile clients.

     **Key features of link unfurling** 

     * Allows user to paste URLs and respond with a card.
     * Allows user to register the app and receive invoke activity.

    This step-by-step guide helps you to create a bot to perform link unfurling in Microsoft Teams for `https://www.BotFramework.com`. You'll see the following output:

    :::image type="content" source="~/assets/images/Teams-link-unfurling/final-image.png" alt-text="Link unfurling" border="true":::

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure you install the following tools and set up your development environment: 

    * [Microsoft Teams](https://teams.microsoft.com/) with valid account
    * [.NET Core SDK](https://dotnet.microsoft.com/download) version 3.1
    * [Latest version of Visual Studio](https://visualstudio.microsoft.com/downloads/)
    * [Latest version of ngrok](https://ngrok.com/download) or any equivalent tunneling solution

      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).

- title: Set up local environment
  durationInMinutes: 1
  content: | 

    1. Open [BotBuilder Samples](https://github.com/microsoft/BotBuilder-Samples).
    1. Select **Code**.
    1. From the dropdown menu, select **Open with GitHub Desktop**.

       :::image type="content" source="~/assets/images/Teams-link-unfurling/clonerepository-new.png" alt-text="Clone repository" border="true":::

    1. Select **Clone**. 

- title: Create and register your bot in Azure portal
  durationInMinutes: 5
  content: |
    The following steps help you to create and register your bot in Azure portal:

    * Create Azure Bot resource to register bot with Azure Bot Service.
    * Create client secret to enable SSO authentication of the bot.
    * Add Teams channel to deploy the bot to Teams channel.
    * Use ngrok to create a tunnel to your web server's endpoints.
    * Add messaging endpoint to the ngrok tunnel you created.

    **To create Azure Bot resource**

    1. Go to the [Microsoft Azure portal](https://portal.azure.com/).
    1. Select **Create a resource**.
    1. In the search box, enter **Azure Bot**.
    1. Select **Enter**.
    1. Select **Azure Bot**.
  
       :::image type="content" source="~/assets/images/bots/createazurebot.png" alt-text="Create Azure bot card" border="true":::
    
    1. Select **Create**.
    1. Enter required bot handle name in **Bot handle**.
    1. Select your **Subscription** from the dropdown list.
    1. Select your **Resource group** from the dropdown list.
    
       :::image type="content" source="~/assets/images/Teams-link-unfurling/review-plus-create.png" alt-text="Select resource Azure bot" border="true":::
       
       You can also create a new resource group (select **Create new** > enter resource name > select **OK**).
    
    1. If you've created a new resource group, select the required location from **New resource group location** dropdown list.

       :::image type="content" source="~/assets/images/meetings-side-panel/newresource.png" alt-text="New resource group location" border="true":::

    1. In the **Microsoft App ID** section, by default **Create new Microsoft App ID** is selected. 
    
       You can either select **Use existing app registration** and enter **Existing app ID** and **Existing app password**, or select **Create new Microsoft App ID**.

       > [!NOTE]
       > You can't create more than one bot with the same **Microsoft App ID**.

    1. Select **Type of App** as **Multi Tenant**.

    1. Select **Review + create**.

       :::image type="content" source="~/assets/images/meeting-token-generator/register-bot-3.png" alt-text="Create Microsoft App ID" border="true":::

    1. If the validation passes, select **Create**. 

       It takes a few moments for your bot service to be provisioned. 

    1. Select **Go to resource**. 

       :::image type="content" source="~/assets/images/Teams-link-unfurling/botdeployment.png" alt-text="Deploy App" border="true":::

       Your Azure bot is created.

       :::image type="content" source="~/assets/images/Teams-link-unfurling/bot-page.png" alt-text="Azure bot resource created" border="true":::
        
      **To create client secret**

       Perform the following steps if you've created a new **Microsoft App ID**:

    1. In the left panel, select **Configuration**. 

       > [!TIP]
       > Save the **Microsoft App ID** or **Client ID** for future reference.

    1. Next to **Microsoft App ID**, select **Manage**.

       :::image type="content" source="~/assets/images/Teams-link-unfurling/config1.png" alt-text="Azure bot resource created" border="true":::

    1. In the **Client secrets** section, select **New client secret**. 

       :::image type="content" source="~/assets/images/meetings-side-panel/newclientsecret.png" alt-text="New client secret" border="true":::
            
       The **Add a client secret** window appears.

    1. Enter **Description**.
    
    1. Select **Add**.

       :::image type="content" source="~/assets/images/Teams-link-unfurling/clientsecret.png" alt-text="Add client secret to app" border="true":::
       
    1. In the **Value** column, select **Copy to clipboard**.

       :::image type="content" source="~/assets/images/Teams-link-unfurling/clientvalue.png" alt-text="Value of client secret" border="true":::
             
       > [!TIP]
       > Save the **Client secrets** value or app password for future reference.

     **To add the Teams channel**

    1. Select **Home**.

       :::image type="content" source="~/assets/images/Teams-link-unfurling/gotohome.png" alt-text="Home page" border="true":::
       
    1. Select your bot from **Recent resources**.

    1. Select **Channels** in the left pane. 

    1. Select **Microsoft Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>.

    1. Select the checkbox to accept the **Terms of Service**.
    
    1. Select **Agree**.

       :::image type="content" source="~/assets/images/meetings-side-panel/terms.png" alt-text="Terms of service" border="true":::
      
    1. Select **Save**.

       :::image type="content" source="~/assets/images/Teams-link-unfurling/configteams.png" alt-text="Select Teams" border="true":::
      
    **To create tunnel for local web server**

         Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

       ```bash
       ngrok http -host-header=localhost 3978
       ```
       > [!TIP]
       > If you encounter **ERR_NGROK_4018**, follow the steps, as displayed in the command prompt to sign up and authenticate ngrok. Then run the `ngrok http -host-header=localhost 3978` command.

    **To add messaging endpoint**

    1. From ngrok, copy the HTTPS URL (https to io).

        ![ngrok HTTPS URL](~/assets/images/Teams-link-unfurling/ngrok.png)

        > [!NOTE]
        > The HTTPS URL in your ngrok is your fully qualified domain name.
        > The `WebAppDomain` is a fully qualified domain name that doesn't include `https://` in it.

    1. In **Settings** for the Azure bot that you created, select **Configuration**.

    1. In **Messaging endpoint**, use the HTTPS URL available from ngrok and at the end of the URL add **/api/messages**.

       :::image type="content" source="~/assets/images/Teams-link-unfurling/messaging-endpoint.png" alt-text="Messaging Endpoint" border="true":::
         
    1. Select **Apply**.

        You have successfully set up a bot in Azure Bot Service.

- title: Update the Azure AD app registration
  durationInMinutes: 1
  content: | 
    1. Go to the [Azure portal](https://portal.azure.com/).

    1. Select **Azure Active Directory**.

    1. From the left pane, select **App registrations**.

    1. Select your bot.
       
       :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/appregister.png" alt-text="App registration" border="true":::
       
    1. Select **Expose an API**.

    1. Select **Set**.

       :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/exposeanapi.png" alt-text="Expose an API" border="true":::
      
    1. Set the **Application ID URI** in the form of `api://your ngrok/botid-{your AppID}`.

       :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/setlink.png" alt-text="Set link" border="true":::
               
       The following image shows the domain name:

       :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/appIDuri.png" alt-text="App id" border="true":::
      
        > [!NOTE]
        > If you're using a tunneling service such as ngrok, ensure you update the value whenever your ngrok subdomain changes.
        > `For example: api://f631****.ngrok.io/92c11075-c629-4a1e-ab58-02b4fd4204c2`, where `f631****.ngrok.io` is the new ngrok subdomain name.

    1. Select **Add a scope**. 
       
       :::image type="content" source="../msteams-platform/assets/images/meetings-side-panel/selectscope.png" alt-text="Select scope" border="true"::: 
          
    1. In the panel that appears, enter `access_as_user` as the **Scope name**.
  
    1. Set **Who can consent?** to `Admins and users`.
  
    1. To configure the admin and user consent prompts with appropriate values for `access_as_user` scope, provide the following information in the fields:</br>
    
         * Enter `Teams can access the user’s profile` as **Admin consent display name**.

         * Enter `Allows Teams to call the app’s web APIs as the current user` as **Admin consent description**.

         * Enter `Teams can access the user profile and make requests on the user’s behalf` as **User consent display name**.

         * Enter `Enable Teams to call this app’s APIs with the same rights as the user` as **User consent description**.
  
    1. Ensure that **State** is set to **Enabled**.
  
    1. Select **Add a scope** to save.

        :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/addscope.png" alt-text="Add a scope" border="true"::: 
        
        > [!NOTE]
        > The **Scope name** should match with the **Application ID** URI with `/access_as_user` appended at the end.</br>
           `api://your ngrok/botid-00000000-0000-0000-0000-000000000000/access_as_user`

          :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/scope.png" alt-text="Scopes" border="true"::: 
        
    1. In the **Authorized client applications** section, identify the applications that you want to authorize for your app’s web application. 
    
    1. Select **Add a client application**. 

       :::image type="content" source="../msteams-platform/assets/images/meetings-side-panel/selectclientapp.png" alt-text="Select client application" border="true":::
       
    1. Enter **Client ID**: `1fec8e78-bce4-4aaf-ab1b-5451cc387264` for Teams desktop application. 
   
       :::image type="content" source="../msteams-platform/assets/images/meetings-side-panel/addclientapplication1.png" alt-text="Add client application" border="true":::
       
       Enter **Client ID**: `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` for Teams web application.

       :::image type="content" source="../msteams-platform/assets/images/meetings-side-panel/addclientapplication2.png" alt-text="Add client application" border="true":::
      
    1. Select **Authorized scopes**.

       :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/authorizedscope.png" alt-text="Add client application" border="true":::
      
       The following image displays the **Client Id**:

       :::image type="content" source="../msteams-platform/assets/images/meetings-side-panel/clientapps.png" alt-text="Client app" border="true"::: 
         
    1. In the left panel, select **API Permissions**. 

       > [!NOTE]
       > Users need to consent to the API permissions only if the AAD app is registered in a different tenant.

    1. Select **Add a permission**.

       :::image type="content" source="../msteams-platform/assets/images/meetings-side-panel/addpermission.png" alt-text="Add permission" border="true":::
      
    1. Select **Microsoft Graph**.

    1. Select **Delegated permissions**.

    1. Select the following permissions:</br>
         * **email**
         * **offline_access**
         * **OpenId**
         * **profile**
         * **User.Read**

    1. Select **Add permissions**.

       :::image type="content" source="../msteams-platform/assets/images/meetings-side-panel/other-permissions.png" alt-text="Other permissions" border="true":::
         
    1. From the left panel, select **Authentication** to set a redirect URI. 

       > [!NOTE]
       > If an app isn't granted IT admin consent, users must provide consent the first time they use an app.
               
         1. Select **Add a platform**.
         1. Select **Web**.

            :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/webauth.png" alt-text="Web" border="true":::
         
         1. Enter the redirect URI for your app by appending `auth-end` to fully qualified domain name:</br> 
           `https://your ngrok/auth-end`. </br>

         1. Enable **Implicit grant and hybrid flows** by selecting the following checkboxes:
             * **ID tokens**
             * **Access tokens**
   
         1. Select **Configure**.

            :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/authend.png" alt-text="Auth-end" border="true":::
            

- title: Set up app settings and manifest files
  durationInMinutes: 1
  content: |
    1. Navigate to **appsettings.json** in cloned repository.
 
       :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/appsettingslocation.png" alt-text="App settings location" border="true":::
      
    1. Open **appsettings.json** in Visual Studio.
    
    1. Update the following information:  

         * Set `"MicrosoftAppType"` to **MultiTenant**.
         * Set `"MicrosoftAppId"` to your bot's **Microsoft App ID**.
         * Set `"MicrosoftAppPassword"` to your bot's client secret ID value.
         * Set `"MicrosoftAppTenantId"` as blank for MultiTenant bot.

           :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/appsettings.png" alt-text="App settings" border="true":::
        
    1. Navigate to **manifest.json** in cloned repository.

       :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/manifestlocation.png" alt-text="[Manifest file location" border="true":::
        
    1. Open **manifest.json** in Visual Studio.

    1. Add the following code snippet to your manifest file, if not already present:

       ```json
       "bots": [
        {
          "botId": "<<YOUR-MICROSOFT-APP-ID>>",
          "scopes": [
            "personal",
            "team",
            "groupchat"
          ],
          "supportsFiles": false,
          "isNotificationOnly": false
        }      
       ```

    1. Replace all occurrences of `<<YOUR-MICROSOFT-APP-ID>>` with your bot's **Microsoft App ID**.

       :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/manifest.png" alt-text="Manifest image" border="true":::
      
- title: Build and run the service
  durationInMinutes: 1
  content: |
    **To build and run the service using latest version of Visual Studio  or Command line**

    # [Visual Studio](#tab/vs)

       1. Launch the latest version of Visual Studio.
       1. Navigate to **File** > **Open** > **Project/Solution**.

          :::image type="content" source="~/assets/images/Teams-link-unfurling/VSopenfile.png" alt-text="Open file" border="true":::
          
       1. Select **TeamsLinkUnfurling.csproj** file from **55.teams-link-unfurling** folder.

          :::image type="content" source="~/assets/images/Teams-link-unfurling/csproj.png" alt-text="Select from folder" border="true":::
      
       1. Open **Solution Explorer** from **View**.

          :::image type="content" source="~/assets/images/Teams-link-unfurling/solutionexplorer.png" alt-text="Solution Explorer" border="true":::
          
       1. Right-click on **TeamsLinkUnfurling**.

       1. Select **Set as Startup Project**.
          
          :::image type="content" source="~/assets/images/Teams-link-unfurling/startup.png" alt-text="Solution Explorer" border="true"::: 
          
       1. Press **F5** to run the project.
    
       1. Select **Yes** if the following dialog appears:

          :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/certificate.png" alt-text="Trust Certificate" border="true":::
          
          A webpage opens with a message **Your bot is ready!**.

          :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/appisready.png" alt-text="App ready" border="true":::
                  
    # [Command line](#tab/cli)

    Navigate to **BotBuilder-Samples > samples > csharp_dotnetcore > 55.teams-link-unfurling** in Command Prompt window and enter the following command:

    ```bash
    dotnet run
    ```
    :::image type="content" source="~/assets/images/Teams-link-unfurling/dotnetruncmd.png" alt-text="Dotnet" border="true":::

      ---

- title: Upload Link Unfurling app
  durationInMinutes: 1
  content: |
    1. In your cloned repository, navigate to **csharp_dotnetcore > 55.teams-link-unfurling > TeamsAppManifest**.

    1. Create a .zip with the following files that are present in the **Manifest** folder: 
       * manifest.json
       * icon-outline.png
       * icon-color.png

         :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/zipfile.png" alt-text="Zip file" border="true":::
       
    1. Go to **Microsoft Teams**.

    1. Select **Apps**.
 
       :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/AppStore.png" alt-text="Zip file" border="true":::
       
    1. In the lower left corner, select **Manage your apps**.

       :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/manageapps.png" alt-text="Manage apps" border="true":::
          
    1. Select **Upload an app to your org's app catalog**. 

       :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/uploadapp.png" alt-text="Upload custom app" border="true":::
      
    1. Select **Open** to upload the .zip file that you created in the **TeamsAppManifest** folder.

       :::image type="content" source="~/assets/images/Teams-link-unfurling/selectzip.png" alt-text="Select zip file" border="true":::
      
    1. Select **Add**.

       :::image type="content" source="~/assets/images/Teams-link-unfurling/addapp.png" alt-text="Add the app" border="true":::
       
       The app opens in a chat.
   
    1. In the compose message area, enter `https://www.BotFramework.com`.

       The link unfurls as shown in the following image:

       :::image type="content" source="~/assets/images/Teams-link-unfurling/result.png" alt-text="Link unfurling result" border="true":::
       
    1. Press Enter.

       :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/result-1.png" alt-text="Link unfurling result" border="true":::
 
- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

    :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/final-image.png" alt-text="Link unfurling" border="true":::

- content: |
    You've completed the tutorial to get started with Teams link unfurling app!
