### YamlMime:Tutorial
title: Teams live share
metadata:
  title: Teams live share
  description: In this tutorial, you'll learn to create a Teams live share session.
  audience: Developer
  level: Beginner
  ms.date: 05/17/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/how-to/authentication/auth-aad-sso-bots.md
  nextTutorialTitle: Read more on Teams live share
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    Teams live share now enables users to discover more ways to collaborate and connect through teams. Users can now share content such as watch a movie, play live games etc. with each other in Teams One-on-one calls, group calls, schedule meetings, and meet now.
  
    This step-by-step guide helps you to create a Teams live share sample app. You'll see the following output:

    (image to be added)

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure you install the following tools and set up your development environment:

 
    * [Microsoft Teams](https://www.microsoft.com/en-in/microsoft-teams/log-in) with a valid account
    * [Visual Studio Code](https://code.visualstudio.com/download)
    * [Latest version of nodejs](https://nodejs.org/en/download/)
    * [Ngrok](https://ngrok.com/) or equivalent tunnelling solution
      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).

    
- title: Set up local environment
  durationInMinutes: 1
  content: |

    1. Open [Live-share-SDK](https://github.com/microsoft/live-share-sdk).
    1. Select **Code**.
    1. From the dropdown menu, select **Open with GitHub Desktop**.

       (image to be added)

    1. Select **Clone**. 
     
- title: Build and run the app using npm
  durationInMinutes: 1
  content: | 
    After you have cloned the repo for Teams live share SDK, you can build and test the Teams live share tab in your local environment.

    In this page, you'll learn to:
    1. [Build and run the sample](#build-and-run-the-sample)
    1. [Create ngrok tunnel](#create-ngrok-tunnel)


    ## Build and run the sample

    After the repository is cloned, you can build the sample app.

    1. Open a terminal window.
    1. Run the change directory command in the terminal to change to the sample app directory:

        ```bash
        cd live-share-sdk\samples\01.dice-roller
        ```

    1. Install all dependencies using the following command:

        ```bash
        npm install
        ```

        You should see a bunch of dependencies getting installed.

    1. Run the following commands after installation is complete:

        ```bash
        npm run build
        ```

    1. Run the following start command  in the terminal:

        ```bash
        npm run start
        ```

    When the Teams live share app starts, it displays `dice rolling on the localhost port 8080` in the browser window.

    ## Create ngrok tunnel

    After you install ngrok, you can create a tunnel to deploy your app locally.

    1. Open a new ngrok terminal window.
    1. Run the following command to create a tunnel. The sample app uses port 8080:

        ```bash
        ngrok http 8080 --host-header=localhost
        ```
        The ngrok tunnel is created. Here's an example of ngrok tunnel.

        (image to be added)

        *Ngrok* listens to requests from the internet and will route them to your app running on port 8080.


- title: Set up manifest file and upload your app
  durationInMinutes: 1
  content: |
     1. Navigate to **manifest.json** in cloned repository.
  
        (image to be added)

     1. Open **manifest.json** in Visual Studio and make the following changes:
       
        Replace `https://<<BASE_URI_DOMAIN>>` with your http endpoint from ngrok excluding the https:// part in all the places.

        (image to be added)
      
      1. Update the following in the manifest:

          * Set `developer.name` to your name.
          * Update `developer.websiteUrl` with your website.
          * Update `developer.privacyUrl` with your privacy policy.
          * Update `developer.termsOfUseUrl` with your terms of use.
      
      1. Zip the contents of the **Manifest** folder to create `manifest.zip`.
    
        > [!NOTE]
        > The `manifest.zip` should not contain any additional folders in it. It should have `manifest json` source file, `color` icon, and `outline` icon inside the zip folder.
        > Upload your manifest in your demo tenant for organization or your Teams account and run your solution in Visual Studio.
     
     ## Upload your app in Teams meeting

      1. Go to Teams.
      1. Schedule a meeting from the calendar in Teams.
      1. Join the meeting.
      1. In the meeting window, select **+ Apps** and select **Manage apps**.

         (image to be added)

      1. Select **Upload a custom app**.
      1. Upload the manifest.json.
      1. Select **Add** and the app is added to the meeting.

         (image to be added)

      1. Select **+ Apps** and select the app.
      1. Select **Save**.

         (image to be added)

      1. Select Share to stage icon from the meeting side panel.

         (image to be added)

- title: Test your app
  durationInMinutes: 1
  content: |
    Ensure that the app added in the Teams meeting and meeting participants can access and play together.

    (image to be added)
    
- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

    (image to be added)

- content: |
    You've completed the tutorial and now you share the content and play.

