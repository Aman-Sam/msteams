### YamlMime:Tutorial
title: Build your first app using C#
metadata:
  title: Hello World with C#
  description: In this tutorial, you'll learn to build Hello World app with C# by setting up a new project, build and deploy tab, bot and message extension apps.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/get-started/get-started-overview.md
  nextTutorialTitle: Back to Get started overview
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    Start Microsoft Teams app development by building your first app with a tab, a bot, and a message extension capability.

    >This app will have all capabilities and each has its own UI and UX:

    :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/prerequisites/your-helloworld-app.png" alt-text="Diagram showing this app has three features.":::

    In this tutorial, you'll learn:

    - How to set up a new project.
    - How to build apps with tab capability using C# and Visual Studio.

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Here's a list of tools you'll need to install for building and deploying a Teams app.

    | &nbsp; | Install | For using... |
    | --- | --- | --- |
    | **Required** | &nbsp; | &nbsp; |
    | &nbsp; | [Visual Studio 2022 version 17.3](https://visualstudio.com/download)<br> Install one of the following two workloads:<br> • **ASP.NET and web development** <br> • **.NET Core cross-platform development** | You can install the enterprise version in Visual Studio 2022, and install the workloads. |
    | &nbsp; | [Teams Toolkit](#install-teams-toolkit) | A Visual Studio extension that creates a project scaffolding for your app. Use latest version. |
    | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, call - all in one place. |

    ## Install Teams Toolkit

    Teams Toolkit helps simplify the development process with tools to create a project scaffolding for your app. It creates the necessary directory structure for all selected capabilities with the required files in place, ready to build the project.

    Teams Toolkit is available as an extension in Visual Studio.

    You can download the latest Visual Studio installer from the [Visual Studio download page](https://visualstudio.microsoft.com/vs/preview/).

    > [!NOTE]
    > You'll need to first install the Visual Studio installer before installing Visual Studio.

    After you open the Visual Studio installer, in the pop-up workloads window.

      1. Select the box **ASP.NET and web development** workload.
      1. Select the box **Microsoft Teams development tools** in the installation details panel.
      1. Select **Install**.

          :::image type="content" source="~/assets/images/teams-toolkit-v2/select-mstools.png" alt-text="Visual studio-installation":::

      1. Select **Launch** to open Visual Studio.

          :::image type="content" source="~/assets/images/teams-toolkit-v2/visual-studio-launch.png" alt-text="Launch visual studio":::
          
         > [!IMPORTANT]
         > You're recommended to download Visual Studio 2022 17.3.0 version, since Teams Toolkit for Visual Studio is GA in this version. This article is written for Visual Studio 2022 17.3.0 version. Teams Toolkit version 17.3.* or higher.

      1. Select **Extensions** > **Manage Extensions**.

          :::image type="content" source="~/assets/images/teams-toolkit-v2/select-extension.png" alt-text="Select Extensions.":::

         The following Manage Extension window appears:

          :::image type="content" source="~/assets/images/teams-toolkit-v2/manage-extension.png" alt-text="Manage Extensions.":::

      1. Select **Installed** and you can see **Teams Toolkit** extension installed.
    
          :::image type="content" source="~/assets/images/teams-toolkit-v2/select-ttk.png" alt-text="Select Teams Toolkit":::

    ## Set up your Teams development tenant

    A **tenant** is like a space, or a container for your organization in Teams, where you chat, share files, and run meetings. This space is also where you sideload and test your app. Let's verify if you're ready to develop with the tenant.

    ### Check for sideloading option

    After creating the app, you must load your app in Teams without distributing it. This process is known as sideloading. Sign in to your Microsoft 365 account to view this option.

    > [!NOTE]
    > Sideloading is necessary for previewing and testing apps in Teams local environment. If it isn't enabled, you will not be able to preview and test your app in Teams locally.
    
    Do you already have a tenant, and do you have the admin access? Let's check if you really do!

    Verify if you can sideload apps in Teams:

    1. In the Teams client, select **Store** icon.
    1. Select **Manage your apps**.
    1. Look for the option to **Upload a custom app**. If you see the option, sideloading apps is enabled.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png" alt-text="Illustration shows the option to upload a custom app in Teams.":::

        > [!NOTE]
        > If Teams doesn't show the option to upload a custom app, talk to your Teams administrator.

    ### Create a free Teams developer tenant (optional)

    If you don't have a Teams account, you can get it free. Join the Microsoft 365 developer program!

    1. Go to the [Microsoft 365 developer program](https://developer.microsoft.com/microsoft-365/dev-program).
    1. Select **Join Now** and follow the onscreen instructions.
    1. In the welcome screen, select **Set up E5 subscription**.
    1. Set up your administrator account. After you finish, the following screen appears:

        :::image type="content" source="~/assets/images/build-your-first-app/dev-program-subscription.png" alt-text="Example of what you see after signing up for the Microsoft 365 developer program.":::

    1. Sign in to Teams using the administrator account you just set up. Verify that you have the **Upload a custom app** option in Teams.

    ## Get a free Azure account

    If you wish to host your app or access resources in Azure, you must have an Azure subscription. Create a free account before you begin.

    Now you’ve got all tools and set up your account. Next, let's set up your development environment and start building! Select the app you want to do first

- title: Create project workspace for your tab app using C#
  durationInMinutes: 1
  content: |

   Start Microsoft Teams app development by creating your first app. This app uses the tab capability.

    :::image type="content" source="~/assets/images/teams-toolkit-v2/first-tab/your-helloworld-app-tab.png" alt-text="Diagram showing this app has three features. Tab is highlighted.":::

    ## Create your tab project workspace
    
    If the prerequisites are in place, let's begin!

    The following steps help you to create project workspace for your tab app in Visual Studio

    1. Open Visual Studio.

       The following page appears:

        :::image type="content" source="~/assets/images/teams-toolkit-v2/visual-studio.png" alt-text="Open Visual Studio":::

    1. Select **Create a new project**.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/select-create-project.png" alt-text="Select create project":::

    1. Enter **Teams** in the search box.
    1. Select **Microsoft Teams App** and select **Next**.
    
        :::image type="content" source="~/assets/images/teams-toolkit-v2/enter-teams.png" alt-text="Enter Teams":::

       Configure your new project page appears.

    1. Enter the following details to configure your new project.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/enter-project-name.png" alt-text="Enter Project name":::

        1. Enter required project name in **Project name**.
        1. Select required location to save project files and folders.
        1. Select **Create**.
    
       Create a new Teams application window displays:

    1. Select **Tab** and select **Create**.   

        :::image type="content" source="~/assets/images/teams-toolkit-v2/select-tab.png" alt-text="Select tab":::

       Now Teams tab app is created in a few seconds.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/tap-app-in-vs.png" alt-text="Project Creation":::     

    ## Take a tour of tab app source code
      
    Teams Toolkit provides all components for building an app. After creating the project, you can view the project folders and files under **Solution Explorer**.  

<<<<<<< HEAD
      :::image type="content" source="~/assets/images/teams-toolkit-v2/solution explorer.png" alt-text="Solution Explorer"::: 
         
- title: Build and run your first tab app using C#
=======
            :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/local-host-after-debug.png" alt-text="Image showing local host":::

        - `https://localhost:3333/hello`

            :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/local-host-hello.png" alt-text="Image showing Hello page of the app":::

        - `https://localhost:3333/first`

            :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/local-host-first-tab.png" alt-text="Image showing first tab of the app":::

        - `https://localhost:3333/second`

            :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/local-host-second-tab.png" alt-text="Image showing second tab of the app":::

        > [!Note]
        > If you receive an error `Could not find a part of the path … bin\roslyn\csc.exe`, update the package with the command `Update-Package Microsoft.CodeDom.Providers.DotNetCompilerPlatform -r`.

    ## Deploy your sample app locally

    Microsoft Teams apps are web applications that provide one or more capabilities. Make your app available on the internet so that the Teams platform can load it. Host your app using `ngrok` to create a tunnel to the local process on your computer.

    After you host your app, make a note of its root URL, such as `https://yourteamsapp.ngrok.io` or `https://yourteamsapp.azurewebsites.net`.

    ### Tunnel using ngrok

    After you install ngrok, you can create a tunnel to deploy your app locally:

    1. Open a new terminal window.
    1. Run the following command to create a tunnel. The sample app uses port 3333.

        ```bash
        ngrok http 3333 --host-header=localhost:3333
        ````
        The ngrok tunnel is created. Here's an example:

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/csharp-ngrok-tunnel.png" alt-text="Image showing ngrok tunnel":::

        You can try adding `hello`, `first`, or `second` to the ngrok tunnel url to view different tab pages of the app.
        
        Ngrok listens to requests from the internet and routes them to your app running on port 3333.

    To verify the app's local deployment:

    1. Open the browser.
    1. Load your app using the following URL:

        `https://<forwarding address in ngrok console session>/`

        Here's an example of the URL:

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/csharp-ngrok-verify-tunnel.png" alt-text="Image showing C# app running locally on ngrok tunnel":::

    1. Make a note of the forwarding address in ngrok console. You need this URL to deploy your app in Teams.

        > [!NOTE]
        > If you've used a different port during [build](#build-your-first-app), ensure you use the same port number to setup the `ngrok` tunnel.
        > [!TIP]
        > It's a good idea to run `ngrok` in a different terminal window. It helps to keep `ngrok` from interfering with the app, when you'll need to stop, rebuild, and rerun the app. The `ngrok` session provides useful debugging information in this window.
        > [!IMPORTANT]
        > If you use the free version of ngrok, your app will be available only during the current session on your development machine. It isn't available if the machine is shut down or goes to sleep. When you restart the service, it returns a new address. Then, you must update every location that uses the outdated address. Remember this step when sharing the app for testing.

- title: Configure your first C# app using Developer Portal
>>>>>>> main
  durationInMinutes: 1
  content: |

    After you set up your project workspace with Teams Toolkit, build your tab app. 
    You'll need to sign in to your Microsoft 365 account.

    ## Sign in to your Microsoft 365 account

    Use your Microsoft 365 account to sign in to Teams. If you're using a Microsoft 365 developer program tenant, the admin account you set up while registering is your Microsoft 365 account.


    1. Right click on **Mytabapp** under **Solution Mytabapp**.

    1. Select **Teams Toolkit** > **Prepare Teams App Dependencies**.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/teams-app-dependencies.png" alt-text="Teams app Dependencies":::
    
    1. Select **Microsoft 365 Account** and select **Continue**. 

        :::image type="content" source="~/assets/images/teams-toolkit-v2/select-m365-account.png" alt-text="Select-M365-account":::

    ## Build and run your app locally in Visual Studio

    To build and run your app locally:

    1. From Visual Studio, select **F5** or **Debug** > **Start Debugging** to run the application in debug mode.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/start-debugging.png" alt-text="Start Debugging":::

       Teams web client opens in a browser window.

    1. Sign in with your Microsoft 365 account, if prompted. 

    1. Select **Add** when prompted to sideload the app onto Teams on your local machine.

        :::image type="content" source="~/assets/images/teams-toolkit-v2/select-add.png" alt-text="Select Add":::

       Congratulations, your first tab app is running on Teams!

        :::image type="content" source="~/assets/images/teams-toolkit-v2/final-output-vs.png" alt-text="Final Output for VS":::

      <details>
      <summary>Learn how to troubleshoot if your app doesn't run locally.</summary>

      To successfully run your app in Teams, ensure that you've enabled sideloading in your Teams account. You can learn more about sideloading in the Prerequisites section.

      </details>   
           
- title: Congratulations!
  durationInMinutes: 1
  content: |

    You've done it!

    You've created a tab app.

    Now that you've learned to create a basic app.

    That's it! Teams Toolkit adds the scaffolding for the new capability to your app's directory structure. 

    You've completed the tutorial to build tab app using C#.
