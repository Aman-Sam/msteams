### YamlMime:Tutorial
title: Build Tab with Adaptive Cards
metadata:
  title: Build Tab with Adaptive Cards
  description: With this learning module, learn how to set up Adaptive Cards in a tab on desktop and mobile for Microsoft Teams.
  audience: Developer
  level: Beginner
  ms.date: 12/23/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: tabs/how-to/authentication/tab-sso-overview.md
  nextTutorialTitle: Read more on tab authentication
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    Adaptive Card tabs are a new way to build tabs in Microsoft Teams. Instead of embedding web content in an iFrame, you can render Adaptive Cards to a tab. The front end is rendered with Adaptive Cards, and the backend is powered by a bot. The bot is responsible for accepting requests and responding appropriately with the Adaptive Card that is rendered.

    You can build your tabs with relevant user interface (UI) building blocks, which are native to desktop, web, and mobile.

    This article helps you to understand:
    
    * The changes required to be made to the app manifest.
    * How the invoke activity requests and sends information in tab with the Adaptive Cards.
    * Effects on the task module workflow.
    
    This step-by-step guide helps you to build tabs with Adaptive Cards on desktop and mobile. You'll see the following output:

    :::image type="content" source="../msteams-platform/assets/images/adaptive-cards/desktop-mobile-screenshot.png" alt-text="Desktop Mobile screenshot":::

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure that you install the following tools and set up your development environment:

     &nbsp; | Install | For using... |
     | --- | --- | --- |
     | **Required** | &nbsp; | &nbsp; |
     | &nbsp; | [Microsoft Teams with an account (not a guest account)](https://www.microsoft.com/microsoft-teams/download-app) |  Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, call and all in one place. |
     | &nbsp; | [Visual Studio 2022 version 17.3](https://visualstudio.microsoft.com)<br> Install one of the following two workloads:<br> • ASP.NET and web development <br> • .NET Core cross-platform development | You can install the enterprise version in Visual Studio 2022, and install the workloads. |
     | &nbsp; | [.NET Core SDK version 3.1](https://dotnet.microsoft.com/en-us/download) | Customized bindings for local debugging and Azure Functions app deployments. If you haven't installed the .NET 3.1 (or later) SDK globally, the portable version can be installed. |
     | &nbsp; | [ngrok](https://ngrok.com/download) | Teams app features (conversational bots, message extensions, and incoming webhooks) require inbound connections. A tunnel connects your development system to Teams. It isn't required for apps that only include tabs. This package is installed within the project directory (using npm `devDependencies`). |
     | &nbsp; | [Microsoft 365 developer account](/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | Access to Teams account with the appropriate permissions to install an app. |

- title: Create and register your bot
  durationInMinutes: 2
  content: |

    Register your bot with Azure Bot service when you develop and host it in Azure. Perform the following steps:

    * Create a ngrok tunnel to your web server's endpoints.
    * Create Azure Bot resource to register bot with Azure Bot service.
    * Create client secret that enables single sign-on (SSO) authentication of the bot.
    * Add Microsoft Teams channel to deploy the bot to a Teams channel.
    * Add messaging endpoint to the ngrok tunnel you created.

    Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

    ```bash
    ngrok http --host-header=rewrite 3978
    ```

    **To create Azure Bot resource**

    1. Open [Azure portal](https://portal.azure.com/).
    1. Select **Create a resource**.

       :::image type="content" source="~/assets/images/adaptive-cards/create-azure-bot_1.png" alt-text="Azure bot.":::

    1. Search for **Azure Bot** in the search box.
    1. Select **Azure Bot**.
    1. Select **Create**.

       :::image type="content" source="~/assets/images/adaptive-cards/azure-bot_1.png" alt-text="create Azure bot.":::

       **Create an Azure Bot** window appears.

    1. Enter the required bot handle name in **Bot handle**.
    1. Select your **Subscription** and **Resource group** from the dropdown list.
            
       :::image type="content" source="~/assets/images/adaptive-cards/resource-group_1.png" alt-text="resource group.":::

       You can create a new resource group. Select **Create new** > enter resource name > select **OK**. Select the required location from **New resource group location** dropdown list, if you've created a new resource group.

        :::image type="content" source="~/assets/images/adaptive-cards/newresource_1.png" alt-text="Screenshot showing the new resource group location.":::

    1. In the **Microsoft App ID** section, by default **Create new Microsoft App ID** is selected. 
    
       You can select **Use existing app registration** and enter **App ID**, **App tenant ID**, and **MSI resource ID**.

       > [!NOTE]
       > You can't create more than one bot with the same **Microsoft App ID**. 

    1. Select **Type of App** as **Multi Tenant**.
    1. Select **Review + create**.

       :::image type="content" source="./assets/images/Tab-ME-SSO/tenant-review.png" alt-text="tenant review.":::

    1. If the validation passes, select **Create**.

       It takes a few moments for your bot service to be provisioned.

       :::image type="content" source="~/assets/images/adaptive-cards/create bot.png" alt-text="create bot.":::

    1. Select **Go to resource**.

       :::image type="content" source="~/assets/images/adaptive-cards/go-to-resource-card_1.png" alt-text="Go to resource.":::

        Your Azure Bot is created and you can see the **Resource group** and **Subscription ID** in the Azure Bot.

       :::image type="content" source="~/assets/images/adaptive-cards/azure-bot-ui_1.png" alt-text="azure bot resource created.":::
        
    **To create client secret**

    Perform the following steps if you've created a new **Microsoft App ID**:

    1. In left pane, select **Configuration**.

    1. Next to **Microsoft App ID**, select **Manage**.

       > [!TIP]
       > Save the **Microsoft App ID** or **Client ID** for future reference.

       :::image type="content" source="~/assets/images/adaptive-cards/config-microsoft-app-id_1.png" alt-text="Microsoft App ID.":::

    1. In the **Client secrets** section, select **+ New client secret**.  
       
       :::image type="content" source="~/assets/images/Tab-ME-SSO/newclientsecret_1.png" alt-text="Screenshot showing the selection of new client secret.":::
       
       **Add a client secret** window appears. 

    1. Enter **Description** of the client secret.
    
    1. Select **Add**.

       :::image type="content" source="~/assets/images/adaptive-cards/newclientsecret_1.png" alt-text="New Client secret.":::

    1. Select **Copy to clipboard** to copy the **Value** details.

       :::image type="content" source="~/assets/images/adaptive-cards/client-secret-value_1.png" alt-text="Client secret value.":::

       
    **To add the Microsoft Teams channel**

    1. Go to **Home**.

       :::image type="content" source="~/assets/images/adaptive-cards/bot-home-page_1.png" alt-text="Bot home page.":::

    1. Select your bot from **Recent resources**.

    1. Select **Channels** in the left pane.

    1. Select <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/> **Microsoft Teams**.

       :::image type="content" source="~/assets/images/Tab-ME-SSO/channel-teams_1.png" alt-text="Select Teams in channels":::
    
    1. Select the checkbox to accept the **Terms of Service**.
    
    1. Select **Agree**.

       :::image type="content" source="~/assets/images//Tab-ME-SSO/terms.png" alt-text="Terms of service":::

    1. Select **Apply**.

       :::image type="content" source="~/assets/images//Tab-ME-SSO/apply.png" alt-text="Screenshot showing the selection of Teams.":::

    **To create tunnel for local web server**

    Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

     ```bash
     ngrok http --host-header=localhost 3978
     ```
     > [!TIP]
     > If you encounter **ERR_NGROK_4018**, follow the steps, as displayed in the command prompt to sign up and authenticate ngrok. Then run the `ngrok http --host-header=localhost`

    **To add messaging endpoint**

    1. From ngrok, copy the HTTPS URL (https to io).

       :::image type="content" source="../msteams-platform/assets/images//adaptive-cards/ngrok-url_1.png" alt-text="ngrok HTTPS URL":::
   
    1. In **Settings**, select **Configuration**.

    1. In **Messaging endpoint**, add the HTTPS URL from ngrok and at the end of the URL add **/api/messages**.

       :::image type="content" source="~/assets/images/adaptive-cards/ngrok-messaging-endpoint_1.png" alt-text="Messaging endpoint.":::

    1. Select **Apply**.

        You have successfully set up a bot in Azure Bot service.

- title: Set up bot service connection
  durationInMinutes: 5
  content: |
    To ensure that the bot service enables users to sign in and access the bot, you must configure SSO for your bot. Perform the following steps to configure:
    
    * Add Redirect URI to the Azure Bot resource.
    * Add any necessary API permissions for downstream calls.
    * Enable implicit grant and hybrid flows.
    * Update manifest.
    * Set up bot service connection.

    **To add Redirect URI to the Azure bot resource**

    
    1. From the left pane, Select **Authentication** to set a redirect URI.
    1. Select **Add a platform** > **Web**.

       :::image type="content" source="~/assets/images/adaptive-cards/configure-web-redirect-url_1.png" alt-text="Configure web redirect url.":::

    **Configure Web** window appears.

    1. Enter the redirect URI for your app by appending `auth-end` to domain name.</br> 
           `https://token.botframework.com/.auth/web/redirect`. </br>

    1. Select the following to enable **Implicit grant and hybrid flows**:</br>
       * **ID tokens (used for implicit flows)**
       * **Access tokens (used for implicit and hybrid flows)**
   
    1. Select **Configure**.

       :::image type="content" source="~/assets/images/adaptive-cards/configure-web_1.png" alt-text="Configure web.":::

       The **Redirect URIs** is added to the Azure Bot resource.

       :::image type="content" source="~/assets/images/adaptive-cards/web-redirect-url-display_1.png" alt-text="web-redirect-url-display.":::

    **To add necessary API permissions for downstream calls**

    1. In the left pane, select **API permissions**
    
       > [!NOTE]
       > Users need to consent to these permissions only if the Azure AD app is registered in a different tenant.

    1. Select **Add a permission**.

       **Request API permissions** window appears.

    1. Select **Microsoft Graph** > **Delegated permissions**.
    
       :::image type="content" source="~/assets/images/adaptive-cards/api-permission_1.png" alt-text="api permission.":::

    1. Select the required user permissions, for example, `User.Read`.
    
    1. Select **Add permissions**.

       :::image type="content" source="~/assets/images/adaptive-cards/add-permissions_1.png" alt-text="add permission.":::

    **To update manifest**

    1. In the left pane, select **Manifest**.
    1. Ensure the config item is set to **"accessTokenAcceptedVersion": 2**. If not, change its value to **2** and select **Save**.
        
        > [!NOTE]
        > If you're already testing your bot in Teams, you must sign out this app and sign out Teams. Then sign in again to see this change.
       
       :::image type="content" source="~/assets/images/adaptive-cards/manifest_1.png" alt-text="manifest.":::

    **To set up bot service connection**

    1. Go to **Home** > **Configuration**.
    1. Select **Add OAuth Connection Settings**.

       :::image type="content" source="./assets/images/adaptive-cards/oauth-connection-setting_1.png" alt-text="Bot service connection":::

       **New Connection Setting** window appears.

    1. Enter the following details:

        | Field | Value or description |
        | ----- | ----- |
        | Name | Enter name for your new connection setting. You can use the name in the settings of your bot service code. |
        | Service Provider | Select **Azure Active Directory V2**. |
        | Client ID | Saved previously as your **Microsoft App ID**. |
        | Client secret | Saved previously as **Value** of the client secret ID. |
        | Token Exchange URL | Use the **Application ID URL** obtained previously while exposing API endpoint. |
        | Tenant ID | Enter **common**. |
        | Scopes | Enter **User.Read** and also add all the **Scopes** required while specifying permissions to downstream APIs. |

    1. Select **Save**.

       :::image type="content" source="./assets/images/adaptive-cards/oauth-connection-setting_3.png" alt-text="Bot service connection":::

    
- title: Configure the bot
  durationInMinutes: 1
  content: |
    Configure the bot sample to understand how to authenticate conversation bot in Teams.

    **To configure and run your bot sample**

    1. Go to the repo https://github.com/OfficeDev/Microsoft-Teams-Samples.git.
    1. Select **Code**.
    1. Select **Download ZIP** from the dropdown menu.

       :::image type="content" source="./assets/images/adaptive-cards/repo-download_1.png" alt-text="Repo Download":::

       > [!NOTE]
       > Ensure to note the path of the repository that you downloaded.

    1. In the File Explorer, go to **Microsoft-Teams-Samples** > **samples** > **tab-adaptive-cards** > **csharp** > **TabWithAdpativeCardFlow**.
       
       :::image type="content" source="./assets/images/adaptive-cards/appsetting-location_1.png" alt-text="appsetting location":::

    1. Open the **appsettings.json** file in the Visual Studio Code and make the following changes:
         
         * Replace `MicrosoftAppId` to your bot's **Microsoft App ID**.
         * Replace `MicrosoftAppPassword` to your bot's client secret ID **Value**.
         * Replace `ConnectionName` to the name of OAuth connection setting.
         * Replace  `ApplicationBaseUrl`to your ngrok domain name.

         :::image type="content" source="./assets/images/adaptive-cards/appsettings-json_1.png" alt-text="appsettings-json":::

    1. Select **Save**.

- title: Configure and upload the app in Teams
  durationInMinutes: 2
  content: |
    The most comprehensive way to test your bot is by creating an app package and uploading it to Teams. This method is to test the full functionality available to your bot across all scopes. You can configure and run the Teams app by uploading the `manifest.zip` file.

    **To run the Teams app by uploading the manifest.zip file**
    
    1. In the File Explorer, go to **Microsoft-Teams-Samples** > **samples** > **tab-adaptive-cards** > **csharp** > **TabWithAdpativeCardFlow** > **AppPackage**.
    
       :::image type="content" source="./assets/images/adaptive-cards/manifest-json_1.png" alt-text="appsettings-json":::

    1. Open the `manifest.json` file in the Visual Studio Code and make the following changes:

         * Replace `contentBotId` to your bot's **Microsoft App ID**.
         * Replace  `validDomains`to your ngrok domain name.

       :::image type="content" source="./assets/images/adaptive-cards/manifest-json_2.png" alt-text="appsettings-json":::

    1. In the File Explorer, go to the AppPackage folder.
    1. Zip the contents of the AppPackage folder to create `manifest.zip`.

       :::image type="content" source="./assets/images/adaptive-cards/zip.png" alt-text="zip file":::

        > [!NOTE]
        > The `manifest.zip` must not contain any additional folders in it. It must have **manifest** json source file, **color** icon, and **outline** icon inside the zip folder.

    1. Go to **Microsoft Teams**.

    1. Select **Apps** > **Manage your apps**.

       :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/manageapps_1.png" alt-text="Manage apps":::
   
    1. Select **Upload an app** > **Upload a custom app**.

       :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/uploadapp_1.png" alt-text="Upload custom app":::
    
    1. Select **Open** to upload the .zip file that you created in the Manifest folder.

    1. Select **Add** to add the tab to your chat.

       :::image type="content" source="../msteams-platform/assets/images/adaptive-cards/tab-in-teams_1.png" alt-text="Upload custom app":::

        You can interact with this tab by signing in.
   

- title: Interact with the tab in Teams
  durationInMinutes: 1
  content: |
    Tabs allow you to access services and content in a dedicated space within a channel or in a chat.
    
    Perform the following steps to use the tab:

    1. In the left pane of the Teams, select ●●● and choose your app from the list.
    1. Tab shows the Adaptive Card with action controls.
    1. Select **Sign In**.

       :::image type="content" source="../msteams-platform/assets/images/adaptive-cards/adaptive-cards-tab-action-controls_1.png" alt-text="Tab showing Adaptive card with action controls":::
   
    1. Choose an account to access the tab.

       :::image type="content" source="../msteams-platform/assets/images/adaptive-cards/sign-in-page.png" alt-text="sign-in-page":::

    1. Select **Show Task Module** on the home page.

       :::image type="content" source="../msteams-platform/assets/images/adaptive-cards/tab-home-page.png" alt-text="tab-home-page":::

    1. Tab/fetch is the first invoke request that your bot receives when a user opens an Adaptive Card tab. When your bot receives the request, it either sends a tab continue response or a tab auth response. Select **Close**.

       :::image type="content" source="../msteams-platform/assets/images/adaptive-cards/sample-task-module.png" alt-text="sample task module":::

    1. The task/submit request is triggered to your bot with the corresponding data through the `Action.Submit` function of Adaptive Card. 

       :::image type="content" source="../msteams-platform/assets/images/adaptive-cards/task-submit.png" alt-text="task submit":::

    1. Tab keeps you signed in unless you select **Sign out**.

       :::image type="content" source="../msteams-platform/assets/images/adaptive-cards/sign-out.png" alt-text="Sign out":::

    1. Refresh to **Sign In** again.

       :::image type="content" source="../msteams-platform/assets/images/adaptive-cards/success-sign-out.png" alt-text="success sign out":::

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with output like this?

    :::image type="content" source="../msteams-platform/assets/images/adaptive-cards/desktop-mobile-screenshot.png" alt-text="Desktop Mobile screenshot":::

    
- content: |
    You've completed the tutorial to get started with the Adaptive Cards for Microsoft Teams using the Bot Framework.
