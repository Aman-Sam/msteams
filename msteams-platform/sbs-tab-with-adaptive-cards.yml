### YamlMime:Tutorial
title: Teams Tab with Adaptive cards
metadata:
  title: Teams Tab with Adaptive Cards
  description: In this tutorial, you'll learn to set up Adaptive Cards in a tab for Teams.
  audience: Developer
  level: Beginner
  ms.date: 10/21/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/how-to/authentication/auth-aad-sso-bots.md
  nextTutorialTitle: Read more on bot framework documentation
  ms.custom: mvc
  ms.localizationpriority: none
items:
- durationInMinutes: 1
  content: |
    Adaptive Card tabs are a new way to build tabs in Teams. Instead of embedding web content in an IFrame, you can render Adaptive Cards to a tab. While the front end is rendered with Adaptive Cards, the backend is powered by a bot. The bot is responsible for accepting requests and responding appropriately with the Adaptive Card that is rendered.

    You can build your tabs with relevant user interface (UI) building blocks native on desktop, web, and mobile.

    This article helps you understand:
    
    * The changes required to be made to the app manifest.
    * Identifies how the invoke activity requests and sends information in tab with Adaptive Cards.
    * Effect on the task module workflow.
    
    This step-by-step guide helps you to build tabs with Adaptive Cards in desktop and mobile.

    The below image will be replaced once I get the output
    ![Mobile signed in to bot](~/assets/images/bots/sbs-desktop-mobile.png)

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure that you install the following tools and set up your development environment

    * Microsoft Teams with an account (not a guest account).
    * [.NET Core SDK](https://dotnet.microsoft.com/download) version 3.1
    * [ngrok](https://ngrok.com/) or [Tunnel Relay](https://github.com/OfficeDev/microsoft-teams-tunnelrelay)
    * Visual Studio 2019 or the latest version.
    * [Microsoft 365 developer account](https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) or access to Teams account with the appropriate permissions to install an app.

- title: Create a Bot Registration In Azure portal
  durationInMinutes: 5
  content: |
    To authenticate the bot with SSO, you can set up bot in Azure Bot Service. Register bot with Azure Bot Service when you develop and host it in Azure. Perform the following steps for bot registration:

    * Use ngrok to create a tunnel to your web server's endpoints.
    * Create Azure Bot resource to register bot with Azure Bot Service.
    * Create client secret that enables SSO authentication of the bot.
    * Add Microsoft Teams channel to deploy the bot to a Teams channel.
    * Add messaging endpoint to the ngrok tunnel you created.

    Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

    ```bash
    ngrok http -host-header=rewrite 3978
    ```

    **To create Azure Bot resource**

    Follow the steps to create Azure Bot resource.
    1. Open [Azure portal](https://portal.azure.com/).
    1. Select **Create a resource**.
    1. Search for **Azure bot** in the search box.
    1. Select **Azure Bot**.

        ![Azure Bot](~/assets/images/adaptive-cards/azure-bot.png)

    1. Select **Create**.
    1. Enter bot handle name in **Bot handle** field.
    1. Select your **Subscription** from the dropdown list.
    1. Select your **Resource group** from the dropdown list.
        
        To create a new resource group, select **Create new**, enter resource name, select **OK**, and select required location from **New resource group location** dropdown list.

        > [!NOTE]
        > In the Microsoft App ID section, **Create new Microsoft App ID** is already selected to create a new bot. You can also select **Use existing app registration**, if you have already created a bot. Enter Microsoft App ID in **Existing app id** field, and enter value in **Existing app password** field.

    1. Select **Review + create**.

        ![Create Azure Bot](~/assets/images/adaptive-cards/create-azure-bot.png)

    1. If the validation passes, select **Create**.

        It takes a few moments for your bot service to be provisioned.

        ![Azure Bot validation](~/assets/images/adaptive-cards/validation-pane.png)

    1. Select **Go to resource**. The bot and the related resources are listed in the resource group.

        ![Go to resource](~/assets/images/adaptive-cards/go-to-resource-card.png)

        Now your Azure bot is created.

        ![Azure bot resource created](~/assets/images/adaptive-cards/azure-bot-ui.png)

    **To create client secret**

    Follow the steps to create client secret.

    1. In **Settings**, select **Configuration**. Save the **Microsoft App ID** (client ID) for future reference.

        ![Microsoft App ID](~/assets/images/adaptive-cards/config-microsoft-app-id.png)

    1. Adjacent to **Microsoft App ID**, select **Manage**.

        ![Manage Bot](~/assets/images/adaptive-cards/manage-bot-label.png)

    1. In the **Client secrets** section, select **New client secret**. The **Add a client secret** window appears.  

    1. Enter **Description** and select **Add**.
 
        ![Client secret](~/assets/images/adaptive-cards/client-secret.png)

    1. In the **Value** column, select **Copy to clipboard** and save the client secret ID for future reference.

        ![Client secret value](~/assets/images/adaptive-cards/client-secret-value.png)
       
    **To add the Microsoft Teams channel**

    Follow the steps to add your bot to Microsoft Teams channel.

    1. Go to **Home**.

        ![Bot home page](~/assets/images/adaptive-cards/bot-home-page.png)

    1. Open your bot, which is listed in the **Recent resources** section.
    1. Select **Channels** in the left pane and select **Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>.

        ![Channel Teams](~/assets/images/adaptive-cards/channel-teams.png)

    1. Select the checkbox to accept the terms of service and select **Agree**.</br>

        ![Select terms of service](~/assets/images/adaptive-cards/select-terms-of-service.png)

    1. Select **Save**.

        ![Select Teams](~/assets/images/adaptive-cards/select-teams.png)

    **To add messaging endpoint**

    Follow the steps to add messaging endpoint
    
    1. Go to **Home** page of the Azure bot that you created, in the **Settings** on the left pane, select **Configuration**.
    1. Go to ngrok.
    1. Copy the HTTPS URL (https to io) as shown in the following image:

        ![ngrok HTTPS URL](~/assets/images/adaptive-cards/ngrok-url.png)

    1. In **Messaging endpoint**, use the HTTPS URL available from ngrok and at the end of the URL add **/api/messages**.

        ![Messaging endpoint](~/assets/images/adaptive-cards/ngrok-messaging-endpoint.png)

    1. Select **Apply**.

        You have successfully set up a bot in Azure Bot Service and now you need to set up bot service connection.

- title: Set up bot service connection
  durationInMinutes: 5
  content: |
    To ensure that the Bot Service enables user to sign in and access the bot, you must configure SSO for your bot. To do so, perform the following steps:
    
    **To add Redirect URI to the Azure bot resource**

    1. Select **Manage** next to **Microsoft App ID**.

        ![Manage Bot](~/assets/images/adaptive-cards/manage-bot-label.png)

    1. Select **Authentication** from the left pane of your bot resource.
    1. In **Platform configurations**, select **Add a platform**.
    1. Select **Web**.
    1. Enter **Redirect URIs** as **https://token.botframework.com/.auth/web/redirect** and select **Configure**.

        ![Configure web redirect url](~/assets/images/adaptive-cards/configure-web-redirect-url.png)

        The Redirect URI is added to the Azure bot resource.

        ![Display web redirect url](~/assets/images/adaptive-cards/web-redirect-url-display.png)

    **To expose API endpoint**

    1. Select **Expose an API** from the left pane.
    1. Select **Set** for the Application ID URI.
    1. Use the **Application ID URI** shown and append **api://botid-** at the beginning of the URI.

        ![App ID URI](~/assets/images/adaptive-cards/app-id-url.png)

    1. Select **Save**. Save the **Application ID URI** for future reference.
    1. Select **Add a scope**.
    1. In **Scope name**, enter **access_as_user**.
    1. In **Who can consent?**, switch to **Admins and users**.
    1. Enter the following values in the boxes:

        | Field | Value |
        | ----- | ----- |
        | Admin consent display name | Teams can access the user’s profile |
        | Admin consent description | Allows Teams to call the app’s web APIs as the current user. |
        | User consent display name | Teams can access your user profile and make requests on your behalf |
        | User consent description | Enable Teams to call this app’s APIs with the same rights that you have. |

    1. Ensure that **State** is set to **Enabled**.

        ![Add a scope](~/assets/images/adaptive-cards/add-scope.png)

    1. Select **Add scope**. The scope name automatically matches the Application ID URI, with **/access_as_user** added to the end.

    **To authorize client applications**

    Add the following IDs as **Authorized client applications**, select the check box for **Authorized scopes** and select **Add application**.      
    * 1fec8e78-bce4-4aaf-ab1b-5451cc387264 (Teams mobile or desktop application)            
    * 5e3ce6c0-2b1f-4285-8d4b-75ee78787346 (Teams web application)</br>

        ![Add client application](~/assets/images/adaptive-cards/add-client-aapplication.png)      
    
    **To add any necessary API permissions for downstream calls**

    1. Select **API permissions** from the left pane.
    1. Add any user **Delegated permissions** that your app requires to downstream APIs, for example, User.Read.</br>

        ![API permissions](~/assets/images/adaptive-cards/add-permissions.png)

    **To enable implicit grant**
    
    1. Select **Authentication** from the left pane.
    1. Select **Access tokens** and **ID tokens** checkboxes.</br>

        ![Authentication Tokens](~/assets/images/adaptive-cards/authentication-tokens.png)

    1. Select **Save** to save the changes.

    **To update manifest**

    1. Select **Manifest** from the left pane.
    1. Ensure the config item is set to **"accessTokenAcceptedVersion": 2**. If not, change its value to **2** and select **Save**. (If you are already testing your bot in Teams, you must sign out this app and sign out Teams. Then sign in again to see this change).</br>

        ![Update Manifest](~/assets/images/adaptive-cards/manifest.png)

    **To set up Bot Service connection**

    1. Go to **Home** page and select **Configuration** from the left pane.
    1. Select **Add OAuth Connection Settings**.
    1. In **New Connection Setting**, enter the following details:

        | Field | Value or description |
        | ----- | ----- |
        | Name | Enter name for your new connection setting. You can use the name in the settings of your bot service code. |
        | Service Provider | Select **Azure Active Directory V2**. |
        | Client id | Saved previously as your **Microsoft App ID**. |
        | Client secret | Saved previously as **Value** of the client secret ID. |
        | Token Exchange URL | Use the **Application ID URL** obtained previously while exposing API endpoint. |
        | Tenant ID | Enter **common**. |
        | Scopes | Enter **User.Read** and also add all the **Scopes** required while specifying permissions to downstream APIs. |

        :::image type="content" source="./assets/images/adaptive-cards/oauth-connection-setting.png" alt-text="Bot service connection":::

    1. Select **Save**.
    1. Select **Apply**.

- title: Configure and run the bot
  durationInMinutes: 1
  content: |
    Configure the bot sample to understand how to authenticate conversational bot in Microsoft Teams.

    **To configure and run your bot sample**

    1. Go to the repo.
    1. Select **code** and select the dropdown.
    1. Select **Download ZIP**.

        ![Repo Download](~/assets/images/adaptive-cards/repo-download.png)

    1. Ensure that you note the Path where the repository is downloaded.
    1. In the Windows Explorer, Select the **Project**.
    1. Go to **Microsoft-Teams-Samples > samples > tab-adaptive-cards > csharp > TabWithAdpativeCardFlow** folder.
    1. Open the **appsettings.json** file.
    1. Update the **appsettings.json** configuration for the bot to use the `MicrosoftAppId`, `MicrosoftAppPassword`, and `ApplicationBaseUrl`.
    1. Use the OAuth connection name as the **Connection Name**.

        > [!NOTE]
        > You can obtain the `MicrosoftAppId` from the bot's Configuration page. The `MicrosoftAppPassword` is the Value for client secret ID that you saved previously.

        ![Appsettings Json](~/assets/images/adaptive-cards/appsettings-json.png)

    1. Select the **F5** key to run this project.

- title: Configure and upload the app in Teams
  durationInMinutes: 2
  content: |
    The most comprehensive way to test your bot is by creating an app package and uploading it to Teams. This method is the only way to test the full functionality available to your bot, across all scopes. You can configure and run the Teams app by uploading the **manifest.zip** file.

    **To run the Teams app by uploading the manifest.zip file**
    
    1. In the Windows Explorer, go to **Microsoft-Teams-Samples > samples > tab-adaptive-cards > csharp > TabWithAdpativeCardFlow > AppPackage** to open the folder.
    1. Open the **manifest.json** file in Visual Studio Code.
    1. In the **manifest.json** file, find **{TODO: contentBotId}** and add your Microsoft App ID and save.
    1. In Windows Explorer, go to the **AppPackage** folder.
    1. Zip the contents of the **AppPackage** folder to create **manifest.zip**.

        > [!NOTE]
        > The **manifest.zip** should not contain any additional folders in it. It should have **manifest** json source file, **color** icon, and **outline** icon inside the zip folder.

    1. Go to Teams.
    1. To upload **manifest.zip**, select **Store > Manage your apps > Upload a custom app** and open **manifest.zip**.
    1. Select **Add** to add the tab to your chat.

        ![Tab in Teams app](~/assets/images/adaptive-cards/tab-in-teams.png)

        You can interact with this tab by signing in.

    1. Send a message to the tab.

        (Image to be replaced once I get the output)
        ![Mobile signed in to bot](~/assets/images/bots/sbs-desktop-mobile.png)

- title: Interacting with the Tab in Teams
  durationInMinutes: 1
  content: |
    Follow the steps to use the tab.

    1. In the navigation bar located on the left pane of the Teams, select the ellipses ●●● and choose your app from the list.
    1. Tab showing Adaptive card with action controls.

        ![Tab showing Adaptive card with action controls](~/assets/images/adaptive-cards/adaptive-cards-tab-action-controls.png)
    
    1. Select **Sign In** and choose an account to access the tab.

        ![Sign In](~/assets/images/adaptive-cards/sign-in-page.png)

    1. Select **Show Task Module** on the home page.

        ![Show Task Module](~/assets/images/adaptive-cards/tab-home-page.png)

    1. Tab/fetch is the first invoke request that your bot receives when a user opens an Adaptive Card tab. When your bot receives the request, it either sends a tab continue response or a tab auth response.

        ![Sample Task Module](~/assets/images/adaptive-cards/sample-task-module.png)

    1. **Submit function of Adaptive Card**
       **task/submit** request is triggered to your bot with the corresponding data through the Action. 

        ![Task Submit card](~/assets/images/adaptive-cards/task-submit.png)

    1. Tab keeps you signed in unless you select **Sign out**.

        ![Sign out](~/assets/images/adaptive-cards/sign-out.png)

    1. Refresh to **Sign In** again.

        ![Success Sign out](~/assets/images/adaptive-cards/success-sign-out.png)

- title: Deploy the bot to Azure
  durationInMinutes: 1
  content: |
    This step by step process demonstrates how to deploy a bot to Azure. It explains how to prepare your bot for deployment, deploy your bot to Azure, and test your bot in Web Chat.

  

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

    Below image should be replaced once I get the output
    ![Mobile signed in to bot](~/assets/images/bots/sbs-desktop-mobile.png)
    
- content: |
    You've completed the tutorial to get started with Adaptive cards for Microsoft Teams using the Bot Framework.

