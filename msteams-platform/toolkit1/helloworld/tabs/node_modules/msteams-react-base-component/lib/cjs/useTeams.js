"use strict";
// Copyright (c) Wictor Wil√©n. All rights reserved.
// Licensed under the MIT license.
// SPDX-License-Identifier: MIT
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTeams = exports.getQueryVariable = exports.checkInTeams = void 0;
var react_1 = require("react");
var react_dom_1 = require("react-dom");
var microsoftTeams = __importStar(require("@microsoft/teams-js"));
var react_northstar_1 = require("@fluentui/react-northstar");
var checkInTeams = function () {
    // eslint-disable-next-line dot-notation
    var microsoftTeamsLib = microsoftTeams || window["microsoftTeams"];
    if (!microsoftTeamsLib) {
        return false; // the Microsoft Teams library is for some reason not loaded
    }
    if ((window.parent === window.self && window.nativeInterface) ||
        window.navigator.userAgent.includes("Teams/") ||
        window.name === "embedded-page-container" ||
        window.name === "extension-tab-frame") {
        return true;
    }
    return false;
};
exports.checkInTeams = checkInTeams;
var getQueryVariable = function (variable) {
    var query = window.location.search.substring(1);
    var vars = query.split("&");
    for (var _i = 0, vars_1 = vars; _i < vars_1.length; _i++) {
        var varPairs = vars_1[_i];
        var pair = varPairs.split("=");
        if (decodeURIComponent(pair[0]) === variable) {
            return decodeURIComponent(pair[1]);
        }
    }
    return undefined;
};
exports.getQueryVariable = getQueryVariable;
/**
 * Microsoft Teams React hook
 * @param options optional options
 * @returns A tuple with properties and methods
 * properties:
 *  - inTeams: boolean = true if inside Microsoft Teams
 *  - fullscreen: boolean = true if in full screen mode
 *  - theme: Fluent UI Theme
 *  - themeString: string - representation of the theme (default, dark or contrast)
 *  - context - the Microsoft Teams JS SDK context
 * methods:
 *  - setTheme - manually set the theme
 */
function useTeams(options) {
    var _a = (0, react_1.useState)(undefined), inTeams = _a[0], setInTeams = _a[1];
    var _b = (0, react_1.useState)(undefined), fullScreen = _b[0], setFullScreen = _b[1];
    var _c = (0, react_1.useState)(react_northstar_1.teamsTheme), theme = _c[0], setTheme = _c[1];
    var _d = (0, react_1.useState)("default"), themeString = _d[0], setThemeString = _d[1];
    var initialTheme = (0, react_1.useState)((options && options.initialTheme) ? options.initialTheme : (0, exports.getQueryVariable)("theme"))[0];
    var _e = (0, react_1.useState)(), context = _e[0], setContext = _e[1];
    var themeChangeHandler = function (theme) {
        setThemeString(theme || "default");
        switch (theme) {
            case "dark":
                setTheme(react_northstar_1.teamsDarkTheme);
                break;
            case "contrast":
                setTheme(react_northstar_1.teamsHighContrastTheme);
                break;
            case "default":
            default:
                setTheme(react_northstar_1.teamsTheme);
        }
    };
    var overrideThemeHandler = (options === null || options === void 0 ? void 0 : options.setThemeHandler) ? options.setThemeHandler : themeChangeHandler;
    (0, react_1.useEffect)(function () {
        // set initial theme based on options or query string
        if (initialTheme) {
            overrideThemeHandler(initialTheme);
        }
        var isInTeams = (0, exports.checkInTeams)();
        if (isInTeams) {
            microsoftTeams.initialize(function () {
                microsoftTeams.getContext(function (context) {
                    (0, react_dom_1.unstable_batchedUpdates)(function () {
                        setInTeams(true);
                        setContext(context);
                        setFullScreen(context.isFullScreen);
                    });
                    overrideThemeHandler(context.theme);
                });
                microsoftTeams.registerFullScreenHandler(function (isFullScreen) {
                    setFullScreen(isFullScreen);
                });
                microsoftTeams.registerOnThemeChangeHandler(overrideThemeHandler);
            });
        }
        else {
            setInTeams(false);
            microsoftTeams.initialize();
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    return [{ inTeams: inTeams, fullScreen: fullScreen, theme: theme, context: context, themeString: themeString }, { setTheme: overrideThemeHandler }];
}
exports.useTeams = useTeams;
