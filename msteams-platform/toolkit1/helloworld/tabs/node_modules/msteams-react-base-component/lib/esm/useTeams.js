// Copyright (c) Wictor Wil√©n. All rights reserved.
// Licensed under the MIT license.
// SPDX-License-Identifier: MIT
import { useEffect, useState } from "react";
import { unstable_batchedUpdates as batchedUpdates } from "react-dom";
import * as microsoftTeams from "@microsoft/teams-js";
import { teamsDarkTheme, teamsHighContrastTheme, teamsTheme } from "@fluentui/react-northstar";
export var checkInTeams = function () {
    // eslint-disable-next-line dot-notation
    var microsoftTeamsLib = microsoftTeams || window["microsoftTeams"];
    if (!microsoftTeamsLib) {
        return false; // the Microsoft Teams library is for some reason not loaded
    }
    if ((window.parent === window.self && window.nativeInterface) ||
        window.navigator.userAgent.includes("Teams/") ||
        window.name === "embedded-page-container" ||
        window.name === "extension-tab-frame") {
        return true;
    }
    return false;
};
export var getQueryVariable = function (variable) {
    var query = window.location.search.substring(1);
    var vars = query.split("&");
    for (var _i = 0, vars_1 = vars; _i < vars_1.length; _i++) {
        var varPairs = vars_1[_i];
        var pair = varPairs.split("=");
        if (decodeURIComponent(pair[0]) === variable) {
            return decodeURIComponent(pair[1]);
        }
    }
    return undefined;
};
/**
 * Microsoft Teams React hook
 * @param options optional options
 * @returns A tuple with properties and methods
 * properties:
 *  - inTeams: boolean = true if inside Microsoft Teams
 *  - fullscreen: boolean = true if in full screen mode
 *  - theme: Fluent UI Theme
 *  - themeString: string - representation of the theme (default, dark or contrast)
 *  - context - the Microsoft Teams JS SDK context
 * methods:
 *  - setTheme - manually set the theme
 */
export function useTeams(options) {
    var _a = useState(undefined), inTeams = _a[0], setInTeams = _a[1];
    var _b = useState(undefined), fullScreen = _b[0], setFullScreen = _b[1];
    var _c = useState(teamsTheme), theme = _c[0], setTheme = _c[1];
    var _d = useState("default"), themeString = _d[0], setThemeString = _d[1];
    var initialTheme = useState((options && options.initialTheme) ? options.initialTheme : getQueryVariable("theme"))[0];
    var _e = useState(), context = _e[0], setContext = _e[1];
    var themeChangeHandler = function (theme) {
        setThemeString(theme || "default");
        switch (theme) {
            case "dark":
                setTheme(teamsDarkTheme);
                break;
            case "contrast":
                setTheme(teamsHighContrastTheme);
                break;
            case "default":
            default:
                setTheme(teamsTheme);
        }
    };
    var overrideThemeHandler = (options === null || options === void 0 ? void 0 : options.setThemeHandler) ? options.setThemeHandler : themeChangeHandler;
    useEffect(function () {
        // set initial theme based on options or query string
        if (initialTheme) {
            overrideThemeHandler(initialTheme);
        }
        var isInTeams = checkInTeams();
        if (isInTeams) {
            microsoftTeams.initialize(function () {
                microsoftTeams.getContext(function (context) {
                    batchedUpdates(function () {
                        setInTeams(true);
                        setContext(context);
                        setFullScreen(context.isFullScreen);
                    });
                    overrideThemeHandler(context.theme);
                });
                microsoftTeams.registerFullScreenHandler(function (isFullScreen) {
                    setFullScreen(isFullScreen);
                });
                microsoftTeams.registerOnThemeChangeHandler(overrideThemeHandler);
            });
        }
        else {
            setInTeams(false);
            microsoftTeams.initialize();
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    return [{ inTeams: inTeams, fullScreen: fullScreen, theme: theme, context: context, themeString: themeString }, { setTheme: overrideThemeHandler }];
}
